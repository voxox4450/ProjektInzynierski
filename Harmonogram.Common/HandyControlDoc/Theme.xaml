
<!--<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:t="clr-namespace:HandyControl.Themes;assembly=HandyControl" xmlns:o="http://schemas.microsoft.com/winfx/2006/xaml/presentation/options" xmlns:system="clr-namespace:System;assembly=mscorlib">
    <Color x:Key="LightPrimaryColor">#f3fbff</Color>
    <Color x:Key="PrimaryColor">#326cf3</Color>
    <Color x:Key="DarkPrimaryColor">#326cf3</Color>
    <Color x:Key="LightDangerColor">#fff6f7</Color>
    <Color x:Key="DangerColor">#db3340</Color>
    <Color x:Key="DarkDangerColor">#db3340</Color>
    <Color x:Key="LightWarningColor">#fffcf5</Color>
    <Color x:Key="WarningColor">#e9af20</Color>
    <Color x:Key="DarkWarningColor">#e9af20</Color>
    <Color x:Key="LightInfoColor">#f1fdff</Color>
    <Color x:Key="InfoColor">#00bcd4</Color>
    <Color x:Key="DarkInfoColor">#00bcd4</Color>
    <Color x:Key="LightSuccessColor">#f3fff6</Color>
    <Color x:Key="SuccessColor">#2db84d</Color>
    <Color x:Key="DarkSuccessColor">#2db84d</Color>
    <Color x:Key="VioletColor">#7b1fa2</Color>
    <Color x:Key="DarkVioletColor">#7b1fa2</Color>
    <Color x:Key="PrimaryTextColor">#212121</Color>
    <Color x:Key="SecondaryTextColor">#757575</Color>
    <Color x:Key="ThirdlyTextColor">#bdbdbd</Color>
    <Color x:Key="ReverseTextColor">#212121</Color>
    <Color x:Key="TextIconColor">White</Color>
    <Color x:Key="BorderColor">#e0e0e0</Color>
    <Color x:Key="SecondaryBorderColor">#757575</Color>
    <Color x:Key="BackgroundColor">#eeeeee</Color>
    <Color x:Key="RegionColor">#ffffff</Color>
    <Color x:Key="SecondaryRegionColor">#eeeeee</Color>
    <Color x:Key="ThirdlyRegionColor">White</Color>
    <Color x:Key="TitleColor">#326cf3</Color>
    <Color x:Key="SecondaryTitleColor">#326cf3</Color>
    <Color x:Key="DefaultColor">White</Color>
    <Color x:Key="DarkDefaultColor">#f5f5f5</Color>
    <Color x:Key="AccentColor">#f8491e</Color>
    <Color x:Key="DarkAccentColor">#f8491e</Color>
    <Color x:Key="DarkMaskColor">#20000000</Color>
    <Color x:Key="DarkOpacityColor">#40000000</Color>
    <Color x:Key="MainContentForegroundColor">#FFF0F0F0</Color>
    <Color x:Key="MainContentBackgroundColor">#FFF5F5F5</Color>
    <Color x:Key="ForthlyRegionColor">#e0e0e0</Color>
    <Color x:Key="OddEvenRegionColor">#f5f5f5</Color>
    <system:UInt32 x:Key="BlurGradientValue">0x99FFFFFF</system:UInt32>
    <SolidColorBrush x:Key="LightPrimaryBrush" PresentationOptions:Freeze="True" Color="{t:StaticColor LightPrimaryColor}" />
    <LinearGradientBrush x:Key="PrimaryBrush" PresentationOptions:Freeze="True" EndPoint="1,0" StartPoint="0,0">
        <GradientStop PresentationOptions:Freeze="True" Offset="0" Color="{t:StaticColor PrimaryColor}" />
        <GradientStop PresentationOptions:Freeze="True" Offset="1" Color="{t:StaticColor DarkPrimaryColor}" />
    </LinearGradientBrush>
    <SolidColorBrush x:Key="DarkPrimaryBrush" PresentationOptions:Freeze="True" Color="{t:StaticColor DarkPrimaryColor}" />
    <SolidColorBrush x:Key="PrimaryTextBrush" PresentationOptions:Freeze="True" Color="{t:StaticColor PrimaryTextColor}" />
    <SolidColorBrush x:Key="SecondaryTextBrush" PresentationOptions:Freeze="True" Color="{t:StaticColor SecondaryTextColor}" />
    <SolidColorBrush x:Key="ThirdlyTextBrush" PresentationOptions:Freeze="True" Color="{t:StaticColor ThirdlyTextColor}" />
    <SolidColorBrush x:Key="ReverseTextBrush" PresentationOptions:Freeze="True" Color="{t:StaticColor ReverseTextColor}" />
    <SolidColorBrush x:Key="TextIconBrush" PresentationOptions:Freeze="True" Color="{t:StaticColor TextIconColor}" />
    <SolidColorBrush x:Key="BorderBrush" PresentationOptions:Freeze="True" Color="{t:StaticColor BorderColor}" />
    <SolidColorBrush x:Key="SecondaryBorderBrush" PresentationOptions:Freeze="True" Color="{t:StaticColor SecondaryBorderColor}" />
    <SolidColorBrush x:Key="BackgroundBrush" PresentationOptions:Freeze="True" Color="{t:StaticColor BackgroundColor}" />
    <SolidColorBrush x:Key="RegionBrush" PresentationOptions:Freeze="True" Color="{t:StaticColor RegionColor}" />
    <SolidColorBrush x:Key="SecondaryRegionBrush" PresentationOptions:Freeze="True" Color="{t:StaticColor SecondaryRegionColor}" />
    <SolidColorBrush x:Key="ThirdlyRegionBrush" PresentationOptions:Freeze="True" Color="{t:StaticColor ThirdlyRegionColor}" />
    <SolidColorBrush x:Key="OddEvenRegionBrush" PresentationOptions:Freeze="True" Color="{t:StaticColor OddEvenRegionColor}" />
    <LinearGradientBrush x:Key="TitleBrush" PresentationOptions:Freeze="True" EndPoint="1,0" StartPoint="0,0">
        <GradientStop PresentationOptions:Freeze="True" Offset="0" Color="{t:StaticColor TitleColor}" />
        <GradientStop PresentationOptions:Freeze="True" Offset="1" Color="{t:StaticColor SecondaryTitleColor}" />
    </LinearGradientBrush>
    <SolidColorBrush x:Key="DefaultBrush" PresentationOptions:Freeze="True" Color="{t:StaticColor DefaultColor}" />
    <SolidColorBrush x:Key="DarkDefaultBrush" PresentationOptions:Freeze="True" Color="{t:StaticColor DarkDefaultColor}" />
    <SolidColorBrush x:Key="LightDangerBrush" PresentationOptions:Freeze="True" Color="{t:StaticColor LightDangerColor}" />
    <LinearGradientBrush x:Key="DangerBrush" PresentationOptions:Freeze="True" EndPoint="1,0" StartPoint="0,0">
        <GradientStop PresentationOptions:Freeze="True" Offset="0" Color="{t:StaticColor DangerColor}" />
        <GradientStop PresentationOptions:Freeze="True" Offset="1" Color="{t:StaticColor DarkDangerColor}" />
    </LinearGradientBrush>
    <SolidColorBrush x:Key="DarkDangerBrush" PresentationOptions:Freeze="True" Color="{t:StaticColor DarkDangerColor}" />
    <SolidColorBrush x:Key="LightWarningBrush" PresentationOptions:Freeze="True" Color="{t:StaticColor LightWarningColor}" />
    <LinearGradientBrush x:Key="WarningBrush" PresentationOptions:Freeze="True" EndPoint="1,0" StartPoint="0,0">
        <GradientStop PresentationOptions:Freeze="True" Offset="0" Color="{t:StaticColor WarningColor}" />
        <GradientStop PresentationOptions:Freeze="True" Offset="1" Color="{t:StaticColor DarkWarningColor}" />
    </LinearGradientBrush>
    <SolidColorBrush x:Key="DarkWarningBrush" PresentationOptions:Freeze="True" Color="{t:StaticColor DarkWarningColor}" />
    <SolidColorBrush x:Key="LightInfoBrush" PresentationOptions:Freeze="True" Color="{t:StaticColor LightInfoColor}" />
    <LinearGradientBrush x:Key="InfoBrush" PresentationOptions:Freeze="True" EndPoint="1,0" StartPoint="0,0">
        <GradientStop PresentationOptions:Freeze="True" Offset="0" Color="{t:StaticColor InfoColor}" />
        <GradientStop PresentationOptions:Freeze="True" Offset="1" Color="{t:StaticColor DarkInfoColor}" />
    </LinearGradientBrush>
    <SolidColorBrush x:Key="DarkInfoBrush" PresentationOptions:Freeze="True" Color="{t:StaticColor DarkInfoColor}" />
    <SolidColorBrush x:Key="LightSuccessBrush" PresentationOptions:Freeze="True" Color="{t:StaticColor LightSuccessColor}" />
    <LinearGradientBrush x:Key="SuccessBrush" PresentationOptions:Freeze="True" EndPoint="1,0" StartPoint="0,0">
        <GradientStop PresentationOptions:Freeze="True" Offset="0" Color="{t:StaticColor SuccessColor}" />
        <GradientStop PresentationOptions:Freeze="True" Offset="1" Color="{t:StaticColor DarkSuccessColor}" />
    </LinearGradientBrush>
    <SolidColorBrush x:Key="DarkSuccessBrush" PresentationOptions:Freeze="True" Color="{t:StaticColor DarkSuccessColor}" />
    <LinearGradientBrush x:Key="VioletBrush" PresentationOptions:Freeze="True" EndPoint="1,0" StartPoint="0,0">
        <GradientStop PresentationOptions:Freeze="True" Offset="0" Color="{t:StaticColor VioletColor}" />
        <GradientStop PresentationOptions:Freeze="True" Offset="1" Color="{t:StaticColor DarkVioletColor}" />
    </LinearGradientBrush>
    <SolidColorBrush x:Key="DarkVioletBrush" PresentationOptions:Freeze="True" Color="{t:StaticColor DarkVioletColor}" />
    <SolidColorBrush x:Key="AccentBrush" PresentationOptions:Freeze="True" Color="{t:StaticColor AccentColor}" />
    <SolidColorBrush x:Key="DarkAccentBrush" PresentationOptions:Freeze="True" Color="{t:StaticColor DarkAccentColor}" />
    <SolidColorBrush x:Key="DarkMaskBrush" PresentationOptions:Freeze="True" Color="{t:StaticColor DarkMaskColor}" />
    <SolidColorBrush x:Key="DarkOpacityBrush" PresentationOptions:Freeze="True" Color="{t:StaticColor DarkOpacityColor}" />
    <SolidColorBrush x:Key="MainContentBackgroundBrush" PresentationOptions:Freeze="True" Color="{t:StaticColor MainContentBackgroundColor}" />
    <SolidColorBrush x:Key="MainContentForegroundBrush" PresentationOptions:Freeze="True" Color="{t:StaticColor MainContentForegroundColor}" />
    <DrawingBrush x:Key="MainContentForegroundDrawingBrush" PresentationOptions:Freeze="True" CachingHint="Cache" Viewport="0,0,16,16" ViewportUnits="Absolute" Stretch="None" TileMode="Tile">
        <DrawingBrush.Drawing>
            <DrawingGroup PresentationOptions:Freeze="True">
                <GeometryDrawing PresentationOptions:Freeze="True" Brush="{t:StaticResource MainContentForegroundBrush}">
                    <GeometryDrawing.Geometry>
                        <GeometryGroup PresentationOptions:Freeze="True">
                            <RectangleGeometry PresentationOptions:Freeze="True" Rect="0,0,8,8" />
                            <RectangleGeometry PresentationOptions:Freeze="True" Rect="8,8,8,8" />
                        </GeometryGroup>
                    </GeometryDrawing.Geometry>
                </GeometryDrawing>
            </DrawingGroup>
        </DrawingBrush.Drawing>
    </DrawingBrush>
</ResourceDictionary>


<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:langs="clr-namespace:HandyControl.Properties.Langs;assembly=HandyControl" xmlns:converter="clr-namespace:HandyControl.Tools.Converter;assembly=HandyControl" xmlns:o="http://schemas.microsoft.com/winfx/2006/xaml/presentation/options" xmlns:system="clr-namespace:System;assembly=mscorlib" xmlns:interactivity="clr-namespace:HandyControl.Interactivity;assembly=HandyControl" xmlns:hc="clr-namespace:HandyControl.Controls;assembly=HandyControl" xmlns:tools="clr-namespace:HandyControl.Tools;assembly=HandyControl" xmlns:shapes="clr-namespace:HandyControl.Expression.Shapes;assembly=HandyControl" xmlns:ex="clr-namespace:HandyControl.Tools.Extension;assembly=HandyControl" xmlns:primitives="clr-namespace:Microsoft.Windows.Controls.Primitives;assembly=HandyControl">
    <langs:LangProvider x:Key="Langs" />
    <converter:StringRepeatConverter x:Key="StringRepeatConverter" />
    <converter:Positive2Nagative x:Key="Positive2Nagative" />
    <converter:SpeedConverter x:Key="SpeedConverter" />
    <converter:ValueToBrushConverter x:Key="ValueToBrushConverter" />
    <converter:Boolean2BooleanReConverter x:Key="Boolean2BooleanReConverter" />
    <converter:Boolean2VisibilityReConverter x:Key="Boolean2VisibilityReConverter" />
    <converter:BooleanArr2VisibilityConverter x:Key="BooleanArr2VisibilityConverter" />
    <converter:BooleanArr2BooleanConverter x:Key="BooleanArr2BooleanConverter" />
    <converter:Long2FileSizeConverter x:Key="Long2FileSizeConverter" />
    <converter:String2VisibilityConverter x:Key="String2VisibilityConverter" />
    <converter:String2VisibilityReConverter x:Key="String2VisibilityReConverter" />
    <BooleanToVisibilityConverter x:Key="Boolean2VisibilityConverter" />
    <converter:TreeViewItemMarginConverter x:Key="TreeViewItemMarginConverter" />
    <converter:Color2HexStringConverter x:Key="Color2HexStringConverter" />
    <converter:Object2BooleanConverter x:Key="Object2BooleanConverter" />
    <converter:Boolean2StringConverter x:Key="Boolean2StringConverter" />
    <converter:Int2StringConverter x:Key="Int2StringConverter" />
    <converter:BorderClipConverter x:Key="BorderClipConverter" />
    <converter:BorderCircularClipConverter x:Key="BorderCircularClipConverter" />
    <converter:BorderCircularConverter x:Key="BorderCircularConverter" />
    <converter:Object2VisibilityConverter x:Key="Object2VisibilityConverter" />
    <converter:Object2VisibilityReConverter x:Key="Object2VisibilityReConverter" />
    <converter:Number2PercentageConverter x:Key="Number2PercentageConverter" />
    <converter:RectangleCircularConverter x:Key="RectangleCircularConverter" />
    <converter:ThicknessSplitConverter x:Key="ThicknessSplitConverter" />
    <converter:CornerRadiusSplitConverter x:Key="CornerRadiusSplitConverter" />
    <MenuScrollingVisibilityConverter x:Key="MenuScrollingVisibilityConverter" />
    <converter:Double2GridLengthConverter x:Key="Double2GridLengthConverter" />
    <converter:DoubleMinConverter x:Key="DoubleMinConverter" />
    <converter:Object2StringConverter x:Key="Object2StringConverter" />
    <converter:DataGridSelectAllButtonVisibilityConverter x:Key="DataGridSelectAllButtonVisibilityConverter" />
    <Color x:Key="EffectShadowColor">#88000000</Color>
    <system:Double x:Key="LargeFontSize">24</system:Double>
    <system:Double x:Key="HeadFontSize">20</system:Double>
    <system:Double x:Key="SubHeadFontSize">16</system:Double>
    <system:Double x:Key="TextFontSize">12</system:Double>
    <Geometry x:Key="CalendarGeometry" PresentationOptions:Freeze="True">M377.897477 116.291025l265.298718 0 0 47.459125-265.298718 0 0-47.459125ZM888.317416 116.291025 748.229288 116.291025l0 47.459125 123.54866 0c18.167626 0 32.894732 14.727106 32.894732 32.894732l0 92.92987L115.42936 289.574752l0-92.92987c0-18.167626 14.727106-32.894732 32.894732-32.894732l123.54866 0 0-47.459125L131.776437 116.291025c-35.244356 0-63.814389 28.571056-63.814389 63.815412l0.004093 713.966329c0 35.243333 28.571056 63.814389 63.814389 63.814389l756.540979 0c35.244356 0 63.814389-28.571056 63.814389-63.815412l-0.004093-713.966329C952.131805 144.861058 923.560749 116.291025 888.317416 116.291025zM904.67268 337.033877l0 540.498398c0 18.167626-14.727106 32.894732-32.894732 32.894732L148.324092 910.427007c-18.167626 0-32.894732-14.727106-32.894732-32.894732L115.42936 337.033877 904.67268 337.033877zM300.659736 64.801927l47.459125 0 0 170.241292-47.459125 0 0-170.241292ZM672.97481 64.801927l47.450938 0 0 170.241292-47.450938 0 0-170.241292ZM358.384138 547.939214l0 231.021432 52.863464 0L411.247602 459.226591l-34.580198 0-2.651514 3.804835c-18.000819 25.896006-41.448959 48.758786-69.681285 67.955908l-3.886703 2.643327 0 53.742526 13.441772-8.069156C330.690097 569.215794 345.588103 558.712075 358.384138 547.939214zM618.031888 726.552576c-10.287791 6.395971-24.435678 8.069156-42.059902 4.948946-16.094309-2.842881-27.898712-18.373321-35.082666-46.159464l-2.261615-8.753781-48.312603 13.424375 1.68956 8.129534c6.270098 30.168514 18.347737 52.052967 35.884976 65.017855 17.120734 12.705979 35.542152 19.777364 54.731087 21.043255 3.358652 0.225138 6.655903 0.337707 9.897892 0.337707 14.859119 0 28.430857-2.374184 40.452211-7.072408 14.417029-5.641758 26.88866-13.338413 37.076162-22.86278 10.365566-9.723922 18.230051-22.143362 23.378552-36.920612 4.918246-14.170401 7.739636-28.296797 8.385373-42.025108 0.60685-13.658723-0.667228-26.650218-3.791531-38.619382l-0.008187-0.017397c-3.111-11.777796-8.133628-23.738773-14.946104-35.551363-7.353831-12.679372-19.028268-22.750211-34.710165-29.952586-15.037183-6.872854-30.927843-10.685876-47.24729-11.32752-11.414505-0.415482-23.487027 1.386646-36.04462 5.434017 3.813022-14.568486 7.648557-31.884681 11.465673-51.775637l113.87693 0 0-49.357449L535.645647 464.492778l-1.495122 7.028404c-24.621928 115.77116-31.589954 145.497585-33.102473 150.039235l-3.432334 10.338958 45.829943 5.391036 3.054716-4.20292c8.146931-11.214951 18.247448-18.139996 30.879746-21.164011 13.004799-3.137607 24.743707-3.180588 34.879018-0.129966 9.857981 2.95545 17.822756 8.771178 24.327202 17.758284 6.512633 9.03111 10.084143 20.392401 10.617311 33.757421 0.519864 13.849067-1.603598 26.442477-6.314102 37.440476C636.315153 711.429431 628.843637 719.871089 618.031888 726.552576z</Geometry>
    <Geometry x:Key="DeleteGeometry" PresentationOptions:Freeze="True">M512 620.544l253.3376 253.3376a76.6976 76.6976 0 1 0 108.544-108.544L620.6464 512l253.2352-253.3376a76.6976 76.6976 0 1 0-108.544-108.544L512 403.3536 258.6624 150.1184a76.6976 76.6976 0 1 0-108.544 108.544L403.3536 512 150.1184 765.3376a76.6976 76.6976 0 1 0 108.544 108.544L512 620.6464z</Geometry>
    <Geometry x:Key="DeleteFillCircleGeometry" PresentationOptions:Freeze="True">M7.4038057,6.4038057 C7.1478834,6.4038057 6.8919611,6.5014372 6.6966991,6.6966991 6.3061748,7.0872235 6.3061748,7.7203884 6.6966991,8.1109123 L10.585787,12 6.6966991,15.889088 C6.3061748,16.279612 6.3061748,16.912777 6.6966991,17.303301 7.0872235,17.693825 7.7203879,17.693825 8.1109123,17.303301 L12,13.414213 15.889088,17.303301 C16.279612,17.693825 16.912777,17.693825 17.303301,17.303301 17.693825,16.912777 17.693825,16.279612 17.303301,15.889088 L13.414213,12 17.303301,8.1109123 C17.693825,7.7203884 17.693825,7.0872235 17.303301,6.6966991 16.912777,6.3061748 16.279612,6.3061748 15.889088,6.6966991 L12,10.585787 8.1109123,6.6966991 C7.9156504,6.5014372 7.6597281,6.4038057 7.4038057,6.4038057 z M12,0 C18.627417,0 24,5.3725829 24,12 24,18.627417 18.627417,24 12,24 5.3725829,24 0,18.627417 0,12 0,5.3725829 5.3725829,0 12,0 z</Geometry>
    <Geometry x:Key="CloseGeometry" PresentationOptions:Freeze="True">M0.7,0 L5,4.3 L9.3,0 L10,0.7 L5.7,5 L10,9.3 L9.3,10 L5,5.7 L0.7,10 L0,9.3 L4.3,5 L0,0.7 z</Geometry>
    <Geometry x:Key="DownGeometry" PresentationOptions:Freeze="True">M512 801.6896L5.12 282.0096l58.1632-59.5968L512 682.3936l448.7168-460.0832 58.1632 59.5968-506.88 519.7824z</Geometry>
    <Geometry x:Key="UpGeometry" PresentationOptions:Freeze="True">M50.000001,0 L100,51.262779 94.262627,57.141584 50.000001,11.767713 5.7373757,57.151686 0,51.27288 z</Geometry>
    <Geometry x:Key="ClockGeometry" PresentationOptions:Freeze="True">M498.506684 256.571517 425.359734 256.571517 425.359734 622.190635 720.166063 622.190635 720.166063 549.725206 498.506684 549.725206ZM512.714268 80.162738c-245.740844 0-445.181175 197.577914-445.181175 441.024505s199.439308 441.024505 445.181175 441.024505c245.738797 0 445.178105-197.577914 445.178105-441.024505S758.453065 80.162738 512.714268 80.162738zM512.714268 874.005824c-195.880249 0-356.145349-158.768003-356.145349-352.818581s160.2651-352.821651 356.145349-352.821651c195.877179 0 356.14228 158.77005 356.14228 352.821651S708.591447 874.005824 512.714268 874.005824z</Geometry>
    <Geometry x:Key="LeftGeometry" PresentationOptions:Freeze="True">M394.24 512L683.52 248.32c10.24-10.24 10.24-25.6 0-35.84-10.24-10.24-25.6-10.24-35.84 0l-307.2 279.04c-5.12 5.12-7.68 12.8-7.68 20.48 0 7.68 2.56 15.36 7.68 20.48l307.2 279.04c10.24 10.24 25.6 10.24 35.84 0 10.24-10.24 10.24-25.6 0-35.84L394.24 512z</Geometry>
    <Geometry x:Key="RightGeometry" PresentationOptions:Freeze="True">M4.1666641,0 C5.2083321,0 6.25,0.41666794 7.0833321,1.25 L57.083331,46.666664 C57.916664,47.499998 58.33333,48.749998 58.333329,49.999998 58.33333,51.249997 57.916664,52.499997 57.083331,53.333331 L7.0833321,98.749996 C5.4166641,100.41666 2.9166641,100.41666 1.2499962,98.749996 -0.41666794,97.083328 -0.41666794,94.583328 1.2499962,92.916664 L48.333331,49.999998 1.2499962,7.0833321 C-0.41666794,5.4166641 -0.41666794,2.9166641 1.2499962,1.25 2.0833282,0.41666794 3.1249962,0 4.1666641,0 z</Geometry>
    <Geometry x:Key="RotateLeftGeometry" PresentationOptions:Freeze="True">M165.238899 508.178506C164.450369 456.442676 171.767779 404.485842 187.244542 353.863631 266.138632 95.812692 533.436225-51.353028 784.380224 25.368251 1035.324219 102.08953 1174.62994 373.566359 1095.735851 631.617298 1016.84176 889.66824 749.544168 1036.833959 498.600172 960.11268 424.134741 937.346313 357.837833 896.870788 303.973868 842.276436 291.310328 829.441176 291.396506 808.495802 304.166356 795.493625 316.936205 782.491452 337.554042 782.356136 350.217582 795.191397 396.640587 842.243889 453.73137 877.098901 517.975091 896.740177 734.436966 962.919213 965.320335 835.802028 1033.557737 612.607541 1101.795139 389.413057 981.467179 154.919792 765.005305 88.740755 548.543428 22.561718 317.660056 149.678904 249.422655 372.873388 235.597198 418.094418 229.294871 464.461039 230.4403 510.559881L311.240978 429.759202C323.584094 417.416085 343.892513 417.712357 356.601099 430.420946 369.309686 443.129535 369.605959 463.437952 357.262842 475.781068L230.778782 602.265128C229.273826 605.769679 227.098877 609.041396 224.251145 611.889128 211.908029 624.232245 191.59961 623.935974 178.891024 611.227385L40.825428 473.16179C28.11684 460.453206 27.820569 440.144784 40.163685 427.801668 52.506801 415.458551 72.815218 415.754827 85.523806 428.463411L165.238899 508.178506Z</Geometry>
    <Geometry x:Key="RotateRightGeometry" PresentationOptions:Freeze="True">M13.1117823382705,0.00108644926083379C18.7165758868546,0.0742913923738762 23.9197352191299,3.84162509632329 25.6893389483779,9.62980814885544 26.1165926715226,11.0273168346189 26.3185999652236,12.461670228202 26.296833302626,13.8899238456496L28.4974711200089,11.6892569876356C28.8483088275283,11.3384168617557 29.4089472552627,11.330238049977 29.7496950885147,11.6709881771838 30.0904429217666,12.0117402117628 30.0822642108291,12.572387459387 29.7314265033096,12.923229492639L25.9199488421768,16.7347560556155C25.5691111346572,17.0855980888674 25.0084688922257,17.0937769006462 24.6677210589736,16.7530248660672 24.5891077777236,16.674408708165 24.5290644427627,16.5840870073788 24.4875185748428,16.4873374624474L20.9957621356339,12.9955379708416C20.6550143023818,12.6547878436347 20.6631930133193,12.0941405960106 21.0140307208389,11.7432985627585 21.3648684283584,11.3924565295065 21.9255068560928,11.3842777177278 22.2662546893447,11.7250297523068L24.4968645831436,13.9556652415401C24.5284846087783,12.6830303030582 24.3545000811904,11.4030042974954 23.9728319903702,10.1546044295501 22.0890505572647,3.99295504901009 15.7152140399307,0.483677352708723 9.73950221742095,2.3106585349176 3.76379420960845,4.13763876344051 0.441986348280352,10.6112083411418 2.32576778138575,16.7728577216819 4.20954921449125,22.9345051948497 10.5833819171279,26.4437838448372 16.5590937396377,24.6168036163144 18.3326227923721,24.0745720467974 19.9086878558486,23.1123447593618 21.1902544757217,21.8133823630949 21.5398485919327,21.4590441166922 22.1090319415421,21.4627806587338 22.4615595599502,21.8217271162507 22.8140871783584,22.1806735737676 22.8164675494522,22.7589048852417 22.4668734332412,23.1132431316444 20.9798891803115,24.6204085496776 19.1496775409072,25.7378005615073 17.0939638873428,26.3663063881084 10.1663286944717,28.484321088751 2.78723170960845,24.4215726325395 0.609260823377952,17.2976520950044 -1.56871387754975,10.1737353722136 2.27700069154205,2.6791733248245 9.20463588441315,0.561156716809679 10.5035670062393,0.164028483596132 11.8183710833877,-0.0158071458708005 13.1117823382705,0.00108644926083379z</Geometry>
    <Geometry x:Key="EnlargeGeometry" PresentationOptions:Freeze="True">M750.3 198.7C598 46.4 351.1 46.4 198.7 198.7s-152.3 399.2 0 551.5C345.1 896.6 578.8 902.3 732 767.3l172.1 172.1 35.4-35.4-172.1-171.9c135-153.2 129.3-387-17.1-533.4z m39.3 403.8c-17.1 42.1-42.2 80-74.7 112.4-32.5 32.5-70.3 57.6-112.4 74.7-40.7 16.5-83.8 24.9-128 24.9s-87.2-8.4-128-24.9c-42.1-17.1-80-42.2-112.4-74.7s-57.6-70.3-74.7-112.4c-16.5-40.7-24.9-83.8-24.9-128s8.4-87.2 24.9-128c17.1-42.1 42.2-80 74.7-112.4s70.3-57.6 112.4-74.7c40.7-16.5 83.8-24.9 128-24.9s87.2 8.4 128 24.9c42.1 17.1 80 42.2 112.4 74.7 32.5 32.5 57.6 70.3 74.7 112.4 16.5 40.7 24.9 83.8 24.9 128s-8.4 87.3-24.9 128zM671 502H496v175h-50V502H271v-50h175V277h50v175h175v50z</Geometry>
    <Geometry x:Key="ReduceGeometry" PresentationOptions:Freeze="True">M750.3 198.7C598 46.4 351.1 46.4 198.7 198.7s-152.3 399.2 0 551.5C345.1 896.6 578.8 902.3 732 767.3l172.1 172.1 35.4-35.4-172.1-171.9c135-153.2 129.3-387-17.1-533.4z m39.3 403.8c-17.1 42.1-42.2 80-74.7 112.4-32.5 32.5-70.3 57.6-112.4 74.7-40.7 16.5-83.8 24.9-128 24.9s-87.2-8.4-128-24.9c-42.1-17.1-80-42.2-112.4-74.7s-57.6-70.3-74.7-112.4c-16.5-40.7-24.9-83.8-24.9-128s8.4-87.2 24.9-128c17.1-42.1 42.2-80 74.7-112.4s70.3-57.6 112.4-74.7c40.7-16.5 83.8-24.9 128-24.9s87.2 8.4 128 24.9c42.1 17.1 80 42.2 112.4 74.7 32.5 32.5 57.6 70.3 74.7 112.4 16.5 40.7 24.9 83.8 24.9 128s-8.4 87.3-24.9 128zM671 502H271v-50h400v50z</Geometry>
    <Geometry x:Key="DownloadGeometry" PresentationOptions:Freeze="True">M868.100096 742.600704l-0.049152 0L216.246272 742.600704l-0.049152 0c-13.98784 0-25.327616 11.33568-25.327616 25.352192 0 13.993984 11.360256 25.327616 25.327616 25.327616l0.049152 0 651.804672 0 0.049152 0c13.996032 0 25.33376-11.333632 25.33376-25.327616C893.431808 753.936384 882.096128 742.600704 868.100096 742.600704L868.100096 742.600704 868.100096 742.600704M523.15136 688.433152c4.728832 4.757504 11.237376 7.733248 18.47296 7.733248l0 0 0 0c7.231488 0 13.740032-2.951168 18.42176-7.757824l314.836992-314.83904c4.732928-4.704256 7.714816-11.214848 7.7312-18.395136 0-14.342144-11.712512-25.9584-25.972736-25.9584-7.213056-0.02048-13.694976 2.930688-18.376704 7.636992L567.578624 607.51872 567.578624 117.52448c-0.024576-0.026624-0.024576-0.026624-0.024576-0.0512 0.024576-14.344192-11.59168-25.980928-25.901056-25.980928-14.348288 0-25.960448 11.634688-25.960448 25.980928 0 0 0 0.024576 0.024576 0.0512l0 489.967616L245.055488 336.826368c-4.683776-4.704256-11.2128-7.6288-18.374656-7.60832-14.342144-0.02048-25.954304 11.614208-26.005504 25.9072 0 7.20896 2.951168 13.768704 7.684096 18.423808L523.15136 688.433152 523.15136 688.433152 523.15136 688.433152M523.15136 688.433152 523.15136 688.433152z</Geometry>
    <Geometry x:Key="SaveGeometry" PresentationOptions:Freeze="True">M608 320C625.664 320 640 305.696 640 288L640 160C640 142.304 625.664 128 608 128 590.336 128 576 142.304 576 160L576 288C576 305.696 590.336 320 608 320L608 320ZM960 896C960 931.328 931.328 960 896 960L128 960C92.672 960 64 931.328 64 896L64 128C64 92.672 92.672 64 128 64L192 64 192 384C192 419.328 220.672 448 256 448L768 448C803.328 448 832 419.328 832 384L832 64 896 64C931.328 64 960 92.672 960 128L960 896 960 896ZM256 64 768 64 768 352C768 369.696 753.664 384 736 384L288 384C270.336 384 256 369.696 256 352L256 64 256 64ZM896 0 128 0C57.312 0 0 57.312 0 128L0 896C0 966.688 57.312 1024 128 1024L896 1024C966.688 1024 1024 966.688 1024 896L1024 128C1024 57.312 966.688 0 896 0L896 0Z</Geometry>
    <Geometry x:Key="WindowsGeometry" PresentationOptions:Freeze="True">M426.276571 574.829714l0 372.004571-389.705143-53.686857 0-318.317714 389.705143 0zM426.276571 150.308571l0 376.539429-389.705143 0 0-322.852571zM987.428571 574.829714l0 449.170286-518.290286-71.460571 0-377.709714 518.290286 0zM987.428571 73.142857l0 453.705143-518.290286 0 0-382.317714z</Geometry>
    <Geometry x:Key="FullScreenGeometry" PresentationOptions:Freeze="True">M942 82v320h-50V167.4l-274 274-35.4-35.4 274-274H622V82h320zM406 582.6l-274 274V622H82v320h320v-50H167.4l274-274-35.4-35.4zM132 132h302V82H82v352h50V132z m760 760H590v50h352V590h-50v302z</Geometry>
    <Geometry x:Key="FullScreenReturnGeometry" PresentationOptions:Freeze="True">M94.186081,59.07 L100,59.07 100,100 59.07,100 59.07,94.186081 94.186081,94.186081 z M4.5814285,58.208999 L41.791,58.208999 41.791,95.418571 35.977005,95.418571 35.977005,68.139304 4.1163101,100 0,95.88369 31.860695,64.022995 4.5814285,64.022995 z M95.88369,0 L100,4.1163101 68.139304,35.977005 95.418571,35.977005 95.418571,41.791 58.208999,41.791 58.208999,4.5814285 64.022995,4.5814285 64.022995,31.860695 z M0,0 L40.929998,0 40.929998,5.8139191 5.8139191,5.8139191 5.8139191,40.929998 0,40.929998 z</Geometry>
    <Geometry x:Key="SearchGeometry" PresentationOptions:Freeze="True">M716.6003 213.800623c-138.851102-138.915088-364.020238-138.915088-502.935326 0s-138.915088 364.084225 0 502.935326a355.573996 355.573996 0 0 0 502.935326 0 355.573996 355.573996 0 0 0 0-502.935326z m-580.359212 580.359212a465.183184 465.183184 0 1 1 657.783099 0 465.183184 465.183184 0 0 1-657.783099 0z m868.939152 211.156054a63.474789 63.474789 0 0 1-89.837303 0l-89.773316-89.837303a63.410803 63.410803 0 1 1 89.773316-89.773316l89.837303 89.773316a63.346816 63.346816 0 0 1 0 89.837303z</Geometry>
    <Geometry x:Key="UpDownGeometry" PresentationOptions:Freeze="True">M454.464 143.68l-253.44 253.44c-12.032 12.032-12.032 31.36 0 43.392 11.968 11.968 31.36 11.968 43.328 0l237.376-237.376 237.376 237.376c11.968 11.968 31.36 11.968 43.328 0 12.032-12.032 12.032-31.36 0-43.392l-253.44-253.44C491.264 126.016 478.016 124.032 454.464 143.68zM507.968 947.648l252.48-253.376c11.968-11.968 11.968-31.36 0-43.392-11.968-11.968-31.296-11.968-43.264 0l-236.48 237.376L244.16 650.88c-11.968-11.968-31.296-11.968-43.264 0-11.968 12.032-11.968 31.424 0 43.392l252.48 253.376C465.984 960 491.136 964.48 507.968 947.648z</Geometry>
    <Geometry x:Key="WindowMinGeometry" PresentationOptions:Freeze="True">M0,4 L10,4 L10,5 L0,5 z</Geometry>
    <Geometry x:Key="WindowRestoreGeometry" PresentationOptions:Freeze="True">M1,3 L1,9 L7,9 L7,3 z M3,1 L3,2 L8,2 L8,7 L9,7 L9,1 z M2,0 L10,0 L10,8 L8,8 L8,10 L0,10 L0,2 L2,2 z</Geometry>
    <Geometry x:Key="WindowMaxGeometry" PresentationOptions:Freeze="True">M1,1 L1,9 L9,9 L9,1 z M0,0 L10,0 L10,10 L0,10 z</Geometry>
    <Geometry x:Key="CheckedGeometry" PresentationOptions:Freeze="True">M 0,2 3,5 8,0</Geometry>
    <Geometry x:Key="AlignLeftGeometry" PresentationOptions:Freeze="True">M0,8 L4,8 4,10 0,10 z M0,4 L8,4 8,6 0,6 z M0,0 L12,0 12,2 0,2 z</Geometry>
    <Geometry x:Key="AlignRightGeometry" PresentationOptions:Freeze="True">M8,8 L12,8 12,10 8,10 z M4,4 L12,4 12,6 4,6 z M0,0 L12,0 12,2 0,2 z</Geometry>
    <Geometry x:Key="AlignHCenterGeometry" PresentationOptions:Freeze="True">M4,8 L8,8 8,10 4,10 z M2,4 L10,4 10,6 2,6 z M0,0 L12,0 12,2 0,2 z</Geometry>
    <Geometry x:Key="AlignHStretchGeometry" PresentationOptions:Freeze="True">M0,8 L12,8 12,10 0,10 z M0,4 L12,4 12,6 0,6 z M0,0 L12,0 12,2 0,2 z</Geometry>
    <Geometry x:Key="AlignTopGeometry" PresentationOptions:Freeze="True">M8,0 L10,0 10,4 8,4 z M4,0 L6,0 6,8 4,8 z M0,0 L2,0 2,12 0,12 z</Geometry>
    <Geometry x:Key="AlignBottomGeometry" PresentationOptions:Freeze="True">M8,8 L10,8 10,12 8,12 z M4,4 L6,4 6,12 4,12 z M0,0 L2,0 2,12 0,12 z</Geometry>
    <Geometry x:Key="AlignVCenterGeometry" PresentationOptions:Freeze="True">M8,4 L10,4 10,8 8,8 z M4,2 L6,2 6,10 4,10 z M0,0 L2,0 2,12 0,12 z</Geometry>
    <Geometry x:Key="AlignVStretchGeometry" PresentationOptions:Freeze="True">M8,0 L10,0 10,12 8,12 z M4,0 L6,0 6,12 4,12 z M0,0 L2,0 2,12 0,12 z</Geometry>
    <Geometry x:Key="PageModeGeometry" PresentationOptions:Freeze="True">M1.0000002,12 L1.0000002,13 11,13 11,12 z M1.0000002,10 L1.0000002,11 11,11 11,10 z M1.0000002,8 L1.0000002,9 11,9 11,8 z M1.0000002,6 L1.0000002,7 11,7 11,6 z M1.0000002,4 L1.0000002,5 11,5 11,4 z M1.0000002,2 L1.0000002,3 11,3 11,2 z M0,0 L12,0 12,14 0,14 z</Geometry>
    <Geometry x:Key="TwoPageModeGeometry" PresentationOptions:Freeze="True">M8.99999988079071,12L8.99999988079071,13 13,13 13,12z M1,12L1,13 5,13 5,12z M9.00000011920929,10L9.00000011920929,11 13,11 13,10z M1,10L1,11 5,11 5,10z M9.00000011920929,8L9.00000011920929,9 13,9 13,8z M1,8L1,9 5,9 5,8z M9.00000011920929,6L9.00000011920929,7 13,7 13,6z M1,6L1,7 5,7 5,6z M9.00000011920929,4L9.00000011920929,5 13,5 13,4z M1,4L1,5 5,5 5,4z M8.99999988079071,2L8.99999988079071,3 13,3 13,2z M1,2L1,3 5,3 5,2z M7.99999994039536,0L14,0 14,14 7.99999994039536,14z M0,0L6,0 6,14 0,14z</Geometry>
    <Geometry x:Key="ScrollModeGeometry" PresentationOptions:Freeze="True">M1,12L1,13 8,13 8,12z M1,10L1,11 8,11 8,10z M1,8L1,9 8,9 8,8z M1,6L1,7 8,7 8,6z M11.0000002384186,5L11.0000002384186,9 13,9 13,5z M1,4L1,5 8,5 8,4z M1,2L1,3 8,3 8,2z M10.0000000298023,0L14,0 14,14 10.0000000298023,14z M0,0L9.00000011920929,0 9.00000011920929,14 0,14z</Geometry>
    <Geometry x:Key="EyeOpenGeometry" PresentationOptions:Freeze="True">M928 406.4c-100.8-137.6-249.6-224-416-224s-315.2 86.4-416 224c-44.8 60.8-44.8 150.4 0 211.2 102.4 137.6 251.2 224 416 224 166.4 0 315.2-86.4 416-224 46.4-60.8 46.4-150.4 0-211.2zM512 721.6c-115.2 0-209.6-94.4-209.6-209.6 0-115.2 94.4-209.6 209.6-209.6 115.2 0 209.6 94.4 209.6 209.6 1.6 115.2-92.8 209.6-209.6 209.6z m0-360c-83.2 0-150.4 67.2-150.4 150.4s67.2 150.4 150.4 150.4 150.4-67.2 150.4-150.4-67.2-150.4-150.4-150.4z m0 0</Geometry>
    <Geometry x:Key="EyeCloseGeometry" PresentationOptions:Freeze="True">M950.4 361.6c8-20.8 0-43.2-19.2-54.4-9.6-4.8-20.8-6.4-32-3.2s-19.2 11.2-24 22.4c-56 132.8-208 228.8-361.6 228.8-155.2 0-307.2-97.6-363.2-232-4.8-11.2-12.8-19.2-24-24-9.6-4.8-20.8-3.2-32 0-20.8 9.6-30.4 35.2-20.8 56 25.6 60.8 67.2 118.4 123.2 164.8l-67.2 70.4c-14.4 16-14.4 40 0 57.6 8 8 17.6 14.4 28.8 14.4s22.4-3.2 30.4-11.2l76.8-81.6c35.2 20.8 73.6 38.4 113.6 49.6l-28.8 83.2c-8 22.4 3.2 46.4 24 54.4 4.8 1.6 9.6 3.2 14.4 3.2 6.4 0 11.2-1.6 17.6-3.2 9.6-4.8 17.6-12.8 22.4-24l33.6-96c41.6 4.8 81.6 3.2 123.2-3.2l32 94.4c3.2 11.2 11.2 19.2 22.4 24 9.6 4.8 20.8 4.8 32 1.6 20.8-8 32-32 24-54.4l-28.8-84.8c30.4-9.6 59.2-22.4 86.4-38.4l62.4 65.6c14.4 16 43.2 16 57.6 0 16-16 16-43.2 0-60.8l-51.2-54.4c56-43.2 100.8-100.8 128-164.8z</Geometry>
    <Geometry x:Key="AudioGeometry" PresentationOptions:Freeze="True">M627.52666696 962L550.66666696 890.47999971c116.82-92.99999971 191.09999971-230.94 191.09999971-385.2 0-146.99999971-67.61999971-279-174.96-371.57999942L643.84666667 62C770.86666638 172.99999971 850.66666667 330.2 850.66666667 505.09999971c0 182.27999971-86.58 345.42-223.13999971 456.90000029zM405.64666638 782l-76.32-77.22a227.88 227.88 0 0 0 116.40000058-199.26A228.06 228.06 0 0 0 347.86666638 317.84000029L422.86666696 242A334.37999971 334.37999971 0 0 1 550.66666696 505.52 334.62 334.62 0 0 1 405.64666638 782zM205.66666638 596.6C164.26666638 596.6 130.66666667 562.51999971 130.66666667 520.64 130.66666667 478.76000029 164.26666638 444.79999971 205.66666638 444.79999971s74.99999971 33.95999971 75.00000058 75.90000058c0 41.87999971-33.59999971 75.84000029-75.00000058 75.83999942z</Geometry>
    <Geometry x:Key="BubbleTailGeometry" PresentationOptions:Freeze="True">M0,0L28,0 28,14.0000006258488 28,15.0010000765324 28.0151405334473,15.0010000765324 28.0455417633057,15.8010965883732C28.4084091186524,22.9596563875675,30.92209815979,29.5507589876652,34.9532623291016,34.9410597383976L34.9984359741211,34.9999815523624 34.0966339111328,34.9885679781437C15.1841707229614,34.5094191133976,2.0535663480814E-07,19.0279375612736,0,0z</Geometry>
    <Geometry x:Key="StarGeometry" PresentationOptions:Freeze="True">M535.9 165.2l96.5 195.4c3.9 7.9 11.4 13.3 20.1 14.6l215.7 31.3c21.9 3.2 30.6 30 14.8 45.5L726.8 604.1c-6.3 6.1-9.1 14.9-7.7 23.6L756 842.5c3.7 21.8-19.1 38.4-38.7 28.1L524.4 769.2c-7.8-4.1-17-4.1-24.8 0L306.7 870.6c-19.6 10.3-42.4-6.3-38.7-28.1l36.8-214.8c1.5-8.6-1.4-17.5-7.7-23.6L141.1 452c-15.8-15.4-7.1-42.3 14.8-45.5l215.7-31.3c8.7-1.3 16.2-6.7 20.1-14.6l96.5-195.4c9.7-19.9 37.9-19.9 47.7 0z</Geometry>
    <Geometry x:Key="AddGeometry" PresentationOptions:Freeze="True">M8,0 C8.5522847,0 9,0.44771525 9,1 L9,7 15,7 C15.552285,7 16,7.4477153 16,8 16,8.5522852 15.552285,9 15,9 L9,9 9,15 C9,15.552285 8.5522847,16 8,16 7.4477153,16 7,15.552285 7,15 L7,9 1,9 C0.44771528,9 0,8.5522852 0,8 0,7.4477153 0.44771528,7 1,7 L7,7 7,1 C7,0.44771525 7.4477153,0 8,0 z</Geometry>
    <Geometry x:Key="RemoveGeometry" PresentationOptions:Freeze="True">M10.899495,0 C11.155417,0 11.411339,0.097630501 11.606602,0.29289246 11.997126,0.68341732 11.997126,1.3165817 11.606602,1.7071066 L7.3639612,5.9497471 11.606602,10.192388 C11.997126,10.582912 11.997126,11.216077 11.606602,11.606601 11.216077,11.997126 10.582912,11.997126 10.192388,11.606601 L5.9497476,7.3639607 1.7071068,11.606601 C1.3165827,11.997126 0.68341756,11.997126 0.29289341,11.606601 -0.097630978,11.216077 -0.097630978,10.582912 0.29289341,10.192388 L4.5355338,5.9497471 0.29289341,1.7071066 C-0.097630978,1.3165817 -0.097630978,0.68341732 0.29289341,0.29289246 0.48815536,0.097630501 0.74407768,0 1,0 1.2559223,0 1.5118446,0.097630501 1.7071068,0.29289246 L5.9497476,4.5355334 10.192388,0.29289246 C10.38765,0.097630501 10.643572,0 10.899495,0 z</Geometry>
    <Geometry x:Key="SubGeometry" PresentationOptions:Freeze="True">M62.5797 488.9508c0.2632 42.5185 34.985 77.2116 77.5035 77.5035l743.0216-0.6728c42.5185 0.3215 76.7437-33.9333 76.4518-76.4805l0 0c-0.2918-42.5175-34.985-77.2106-77.5045-77.5035l-743.0216-0.087C96.513 411.4473 62.2879 446.4323 62.5797 488.9508L62.5797 488.9508z</Geometry>
    <Geometry x:Key="WarningGeometry" PresentationOptions:Freeze="True">M943.644188 827.215696l-351.176649-608.204749c-42.945473-74.36249-113.147387-74.36249-156.092861 0l-351.176649 608.204749c-42.946498 74.431167-7.811716 135.14955 78.012605 135.14955l702.420949 0C951.455904 962.36422 986.555836 901.645838 943.644188 827.215696zM466.187532 391.579035c12.621133-13.644108 28.66175-20.466675 48.233578-20.466675 19.580028 0 35.612444 6.75389 48.241778 20.194018 12.544256 13.473954 18.820484 30.325365 18.820484 50.587035 0 17.430551-26.19759 145.621205-34.929778 238.882082l-63.105666 0c-7.666162-93.259852-36.090106-221.450507-36.090106-238.882082C447.358847 421.938226 453.643275 405.155491 466.187532 391.579035zM561.76804 835.026386c-13.268949 12.928641-29.062535 19.375023-47.345906 19.375023-18.275171 0-34.076957-6.447407-47.346931-19.375023-13.235123-12.89379-19.818859-28.517221-19.818859-46.869269 0-18.249546 6.583736-34.043131 19.818859-47.278254 13.268949-13.235123 29.07176-19.852685 47.346931-19.852685 18.283371 0 34.076957 6.617562 47.345906 19.852685 13.235123 13.235123 19.827059 29.028709 19.827059 47.278254C581.595099 806.51019 575.003163 822.132597 561.76804 835.026386z</Geometry>
    <Geometry x:Key="InfoGeometry" PresentationOptions:Freeze="True">M505.6512 39.0144c-261.2224 3.4816-470.1184 218.112-466.6368 479.4368 3.4816 261.12 218.112 470.1184 479.3344 466.6368 261.2224-3.4816 470.1184-218.112 466.7392-479.3344C981.504 244.4288 766.8736 35.5328 505.6512 39.0144zM558.08 196.608c48.128 0 62.2592 27.9552 62.2592 59.8016 0 39.8336-31.9488 76.6976-86.3232 76.6976-45.568 0-67.1744-22.9376-65.9456-60.8256C468.0704 240.4352 494.7968 196.608 558.08 196.608zM434.7904 807.6288c-32.8704 0-56.9344-19.968-33.8944-107.6224l37.6832-155.5456c6.5536-24.8832 7.68-34.9184 0-34.9184-9.8304 0-52.5312 17.2032-77.7216 34.2016l-16.384-26.9312c79.9744-66.7648 171.8272-105.8816 211.2512-105.8816 32.8704 0 38.2976 38.912 21.9136 98.6112l-43.2128 163.5328c-7.68 28.8768-4.4032 38.912 3.2768 38.912 9.9328 0 42.1888-11.9808 73.9328-36.9664l18.6368 24.8832C552.5504 777.728 467.6608 807.6288 434.7904 807.6288z</Geometry>
    <Geometry x:Key="ErrorGeometry" PresentationOptions:Freeze="True">M495.469714 0C224.621714 0 0 224.621714 0 495.469714c0 270.884571 224.621714 495.506286 495.469714 495.506286 270.884571 0 495.506286-224.621714 495.506286-495.506286C990.976 224.621714 766.354286 0 495.469714 0z m211.419429 634.221714c19.821714 19.821714 19.821714 46.226286 0 66.048s-46.226286 19.821714-66.048 0l-138.752-138.715428-145.334857 145.334857a51.858286 51.858286 0 0 1-72.667429 0 51.858286 51.858286 0 0 1 0-72.667429l145.334857-145.334857-138.752-138.752c-19.821714-19.821714-19.821714-46.226286 0-66.048s46.262857-19.821714 66.084572 0l138.715428 138.715429 145.371429-145.334857a51.858286 51.858286 0 0 1 72.667428 0 51.858286 51.858286 0 0 1 0 72.667428l-145.371428 145.334857 138.752 138.752z</Geometry>
    <Geometry x:Key="SuccessGeometry" PresentationOptions:Freeze="True">M512.66048 64.64c-247.424 0-448 200.57728-448 448s200.576 448 448 448 448-200.57728 448-448c0-247.424-200.57728-448-448-448z m250.71232 334.86336L480.98176 681.89312c-15.49568 15.49696-40.61952 15.49696-56.11648 0l-162.9184-162.9184c-15.49568-15.49568-15.49568-40.61824 0-56.1152s40.61952-15.49568 56.11648 0l134.85952 134.85952L707.25504 343.3856c15.49568-15.49568 40.61952-15.49568 56.11648 0s15.49696 40.6208 0.00128 56.11776z</Geometry>
    <Geometry x:Key="FatalGeometry" PresentationOptions:Freeze="True">M716.8 375.466667l34.133333 34.133333c17.066667 17.066667 42.666667 17.066667 59.733334 0 17.066667-17.066667 17.066667-42.666667 0-59.733333l-34.133334-34.133334 34.133334-34.133333c17.066667-17.066667 17.066667-42.666667 0-59.733333-17.066667-17.066667-42.666667-17.066667-59.733334 0l-34.133333 34.133333-34.133333-34.133333c-17.066667-17.066667-42.666667-17.066667-59.733334 0-17.066667 17.066667-17.066667 42.666667 0 59.733333l34.133334 34.133333-34.133334 34.133334c-17.066667 17.066667-17.066667 42.666667 0 59.733333 17.066667 17.066667 42.666667 17.066667 59.733334 0l34.133333-34.133333z m-426.666667 0l34.133334 34.133333c17.066667 17.066667 42.666667 17.066667 59.733333 0 17.066667-17.066667 17.066667-42.666667 0-59.733333l-34.133333-34.133334 34.133333-34.133333c17.066667-17.066667 17.066667-42.666667 0-59.733333-17.066667-17.066667-42.666667-17.066667-59.733333 0l-34.133334 34.133333-34.133333-34.133333c-17.066667-17.066667-42.666667-17.066667-59.733333 0-17.066667 17.066667-17.066667 42.666667 0 59.733333l34.133333 34.133333-34.133333 34.133334c-17.066667 17.066667-17.066667 42.666667 0 59.733333 17.066667 17.066667 42.666667 17.066667 59.733333 0l34.133333-34.133333zM0 85.333333c0-51.2 42.666667-85.333333 85.333333-85.333333h853.333334c51.2 0 85.333333 42.666667 85.333333 85.333333v853.333334c0 51.2-42.666667 85.333333-85.333333 85.333333H85.333333c-51.2 0-85.333333-42.666667-85.333333-85.333333V85.333333z m512 469.333334c-136.533333 0-230.4 68.266667-290.133333 196.266666-8.533333 17.066667 0 42.666667 17.066666 59.733334s42.666667 0 59.733334-17.066667c51.2-93.866667 110.933333-145.066667 221.866666-145.066667 102.4 0 170.666667 51.2 221.866667 145.066667 8.533333 17.066667 34.133333 25.6 59.733333 17.066667 17.066667-8.533333 25.6-34.133333 17.066667-59.733334-76.8-128-170.666667-196.266667-307.2-196.266666z</Geometry>
    <Geometry x:Key="AskGeometry" PresentationOptions:Freeze="True">M512 0 30.11843 240.941297l0 542.117406 481.88157 240.941297 481.88157-240.941297L993.88157 240.941297 512 0zM575.776472 768.799969 460.188012 768.799969 460.188012 656.222073l115.588459 0L575.776472 768.799969zM623.335603 509.329685c-52.375829 36.723353-59.600363 55.988096-59.600363 84.885211l0 19.866447L468.616977 614.081343l0-26.489278c0-45.754021 13.846342-80.67124 61.406497-116.791866 46.957428-36.723353 57.79423-62.0082 57.79423-84.282484 0-25.284848-21.67258-54.181962-55.386393-54.181962-42.743457 0-70.436142 26.489278-82.477374 85.486914l-105.956088-21.67258c24.683144-111.976192 82.477374-157.127486 205.289345-157.127486 98.12985 0 157.72919 63.212631 157.72919 131.842639C707.017407 423.240044 688.956071 461.76953 623.335603 509.329685z</Geometry>
    <Geometry x:Key="AllGeometry" PresentationOptions:Freeze="True">M 721.005 638.949 C 758.74 638.949 789.333 669.56 789.333 707.312 C 789.333 745.047 758.74 775.657 721.005 775.657 C 683.253 775.657 652.66 745.047 652.66 707.312 C 652.66 669.56 683.253 638.949 721.005 638.949 Z M 512.017 638.949 C 549.77 638.949 580.38 669.56 580.38 707.312 C 580.38 745.047 549.77 775.657 512.017 775.657 C 474.265 775.657 443.672 745.047 443.672 707.312 C 443.672 669.56 474.265 638.949 512.017 638.949 Z M 303.029 638.949 C 340.781 638.949 371.392 669.56 371.392 707.312 C 371.392 745.047 340.781 775.657 303.029 775.657 C 265.277 775.657 234.667 745.047 234.667 707.312 C 234.667 669.56 265.277 638.949 303.029 638.949 Z M 721.005 443.655 C 758.74 443.655 789.333 474.265 789.333 512.017 C 789.333 549.769 758.74 580.363 721.005 580.363 C 683.253 580.363 652.66 549.769 652.66 512.017 C 652.66 474.265 683.253 443.655 721.005 443.655 Z M 512.017 443.655 C 549.77 443.655 580.38 474.265 580.38 512.017 C 580.38 549.769 549.77 580.363 512.017 580.363 C 474.265 580.363 443.672 549.769 443.672 512.017 C 443.672 474.265 474.265 443.655 512.017 443.655 Z M 303.029 443.655 C 340.781 443.655 371.392 474.265 371.392 512.017 C 371.392 549.769 340.781 580.363 303.029 580.363 C 265.277 580.363 234.667 549.769 234.667 512.017 C 234.667 474.265 265.277 443.655 303.029 443.655 Z M 721.005 248.343 C 758.74 248.343 789.333 278.953 789.333 316.688 C 789.333 354.44 758.74 385.051 721.005 385.051 C 683.253 385.051 652.66 354.44 652.66 316.688 C 652.66 278.953 683.253 248.343 721.005 248.343 Z M 512.017 248.343 C 549.77 248.343 580.38 278.953 580.38 316.688 C 580.38 354.44 549.77 385.051 512.017 385.051 C 474.265 385.051 443.672 354.44 443.672 316.688 C 443.672 278.953 474.265 248.343 512.017 248.343 Z M 303.029 248.343 C 340.781 248.343 371.392 278.953 371.392 316.688 C 371.392 354.44 340.781 385.051 303.029 385.051 C 265.277 385.051 234.667 354.44 234.667 316.688 C 234.667 278.953 265.277 248.343 303.029 248.343 Z</Geometry>
    <Geometry x:Key="DragVerticalGeometry" PresentationOptions:Freeze="True">M2,12 C3.1045694,12 4,12.895431 4,14 4,15.104569 3.1045694,16 2,16 0.89543051,16 0,15.104569 0,14 0,12.895431 0.89543051,12 2,12 z M2,6 C3.1045694,6 4,6.8954306 4,8 4,9.1045694 3.1045694,10 2,10 0.89543051,10 0,9.1045694 0,8 0,6.8954306 0.89543051,6 2,6 z M2,0 C3.1045694,0 4,0.89543056 4,2 4,3.1045694 3.1045694,4 2,4 0.89543051,4 0,3.1045694 0,2 0,0.89543056 0.89543051,0 2,0 z</Geometry>
    <Geometry x:Key="DragHorizontalGeometry" PresentationOptions:Freeze="True">M14,0 C15.104569,0 16,0.89543051 16,2 16,3.1045694 15.104569,4 14,4 12.895431,4 12,3.1045694 12,2 12,0.89543051 12.895431,0 14,0 z M8,0 C9.1045694,0 10,0.89543051 10,2 10,3.1045694 9.1045694,4 8,4 6.8954306,4 6,3.1045694 6,2 6,0.89543051 6.8954306,0 8,0 z M2,0 C3.1045694,0 4,0.89543051 4,2 4,3.1045694 3.1045694,4 2,4 0.89543056,4 0,3.1045694 0,2 0,0.89543051 0.89543056,0 2,0 z</Geometry>
    <Geometry x:Key="DropperGeometry" PresentationOptions:Freeze="True">M798.165333 97.834667a42.624 42.624 0 0 0-60.330666 0l-140.629334 140.629333-55.381333-55.296-60.330667 60.330667 55.381334 55.296-353.706667 353.706666a42.709333 42.709333 0 0 0-11.221333 19.84l-42.666667 170.666667a42.538667 42.538667 0 0 0 51.712 51.712l170.666667-42.666667c7.509333-1.877333 14.378667-5.76 19.84-11.221333l353.792-353.792 55.210666 55.125333 60.330667-60.330666-55.210667-55.125334 140.544-140.544a42.624 42.624 0 0 0 0-60.330666l-128-128zM319.488 772.138667l-90.197333 22.570666 22.570666-90.197333 345.386667-345.386667 67.669333 67.584-345.429333 345.429334z</Geometry>
    <Geometry x:Key="VisualStudioGeometry" PresentationOptions:Freeze="True">M23.063,0L11,12L3,6L0,7v15l3,2l8-6l11.875,12L30,27V2.938L23.063,0z M3,19v-8l5,4L3,19z M23,21l-8-6l8-6V21z</Geometry>
    <Geometry x:Key="ConfigGeometry" PresentationOptions:Freeze="True">M827.904 541.184a278.592 278.592 0 0 0 0-58.368l73.728-58.368c15.872-13.056 20.224-35.584 9.728-53.504l-78.592-137.728c-9.984-17.408-31.232-25.856-51.712-18.176l-86.528 35.072c-15.872-11.52-32.512-21.248-49.664-29.184l-12.8-92.928c-3.072-20.224-20.736-35.584-41.216-35.584h-157.44c-20.736 0-38.144 14.848-41.216 35.84L378.88 221.44c-17.152 7.936-33.792 17.92-49.664 29.184L242.688 215.296c-18.688-7.168-41.216 0.768-51.2 18.176L112.64 371.2c-10.24 17.92-6.144 40.448 10.24 53.76l73.472 58.112c-1.024 9.472-1.536 19.2-1.536 29.184 0 9.728 0.512 19.456 1.536 29.184l-73.984 58.368c-15.872 13.056-19.968 35.584-9.728 53.248l78.848 137.728c9.984 17.408 32 25.856 51.456 17.92l86.528-35.072c15.872 11.52 32.512 21.248 49.664 29.184l13.056 93.696c3.328 20.48 20.48 35.328 41.216 35.328h157.44c20.48 0 38.144-15.36 41.216-35.84l13.056-93.184c17.152-7.936 33.792-17.664 49.664-29.184l86.784 35.328c4.864 1.792 9.984 2.816 15.104 2.816 14.848 0 28.672-7.936 36.096-20.992l78.592-137.728c10.24-17.664 6.4-40.192-9.984-53.76l-73.472-58.112z m-25.344 231.168l-99.584-40.448c-7.424-3.072-15.872-1.792-22.272 3.072-19.712 15.36-40.704 27.648-62.464 36.608-7.424 3.072-12.544 9.728-13.568 17.664l-14.592 104.96-155.392 2.304-15.104-107.264c-1.024-7.936-6.4-14.592-13.568-17.664-21.76-8.96-42.752-21.504-62.464-36.608-4.096-3.072-8.96-4.608-13.824-4.608-2.816 0-5.888 0.512-8.448 1.536l-96.256 41.472-80.896-137.216 84.48-66.816c6.144-4.864 9.472-12.8 8.448-20.48-1.536-12.032-2.56-24.32-2.56-36.608 0-12.288 1.024-24.576 2.56-36.608 1.024-7.936-2.048-15.616-8.448-20.48l-83.712-64 76.544-139.264 99.584 40.448c7.424 3.072 15.872 1.792 22.272-3.072 19.712-15.36 40.96-27.648 62.72-36.864 7.424-3.072 12.544-9.728 13.568-17.664l12.544-104.704 157.696-2.304 15.104 107.264c1.024 7.936 6.4 14.592 13.568 17.664 21.76 8.96 42.752 21.504 62.464 36.864 6.4 4.864 14.848 6.144 22.272 3.072l96.256-41.472 80.896 137.216-84.48 66.816c-6.144 4.864-9.472 12.544-8.448 20.48 1.536 12.032 2.56 24.32 2.56 36.608 0 12.288-1.024 24.576-2.56 36.608-1.024 7.936 2.304 15.616 8.448 20.48l83.712 63.744-77.056 139.264zM512 345.6c-91.136 0-165.12 74.752-165.12 166.4s73.984 166.4 165.12 166.4 165.12-74.752 165.12-166.4-73.984-166.4-165.12-166.4z m0 297.216c-71.168 0-129.28-58.624-129.28-130.816 0-72.192 58.112-130.816 129.28-130.816s129.28 58.624 129.28 130.816c0 72.192-57.856 130.816-129.28 130.816z</Geometry>
    <Geometry x:Key="NewGeometry" PresentationOptions:Freeze="True">M512 0h1216a512 512 0 1 1 0 1024H512A512 512 0 1 1 512 0zM420.16 311.04V768h74.88V433.92h2.56l228.48 334.08h72.96V311.04h-75.52v329.6h-2.56l-225.92-329.6h-74.88z m468.48 0V768h340.48v-64h-265.6V565.76h239.36v-64h-239.36V375.04h254.72v-64h-329.6z m369.28 0l131.2 456.96h80l89.6-343.68h2.56l88.96 343.68h79.36l131.84-456.96h-84.48l-85.76 347.52h-2.56l-90.24-347.52h-77.44l-90.24 347.52h-2.56l-85.76-347.52h-84.48z</Geometry>
    <Style x:Key="PathBaseStyle" TargetType="{x:Type Path}">
        <Setter Property="Shape.Stretch" Value="Uniform" />
        <Setter Property="UIElement.SnapsToDevicePixels" Value="True" />
        <Setter Property="FlowDirection" Value="LeftToRight" />
    </Style>
    <system:Double x:Key="DefaultControlHeight">30</system:Double>
    <Thickness x:Key="DefaultControlPadding">10,6</Thickness>
    <Thickness x:Key="DefaultInputPadding">8,6</Thickness>
    <CornerRadius x:Key="DefaultCornerRadius">4</CornerRadius>
    <system:Double x:Key="{x:Static SystemParameters.VerticalScrollBarButtonHeightKey}">30</system:Double>
    <interactivity:FluidMoveBehavior x:Key="BehaviorXY200" AppliesTo="Children" Duration="0:0:.2" EaseX="{PowerEase}" EaseY="{PowerEase}" />
    <interactivity:FluidMoveBehavior x:Key="BehaviorX200" AppliesTo="Children" Duration="0:0:.2" EaseX="{PowerEase}" />
    <interactivity:FluidMoveBehavior x:Key="BehaviorY200" AppliesTo="Children" Duration="0:0:.2" EaseY="{PowerEase}" />
    <interactivity:FluidMoveBehavior x:Key="BehaviorXY400" AppliesTo="Children" Duration="0:0:.4" EaseX="{PowerEase}" EaseY="{PowerEase}" />
    <interactivity:FluidMoveBehavior x:Key="BehaviorX400" AppliesTo="Children" Duration="0:0:.4" EaseX="{PowerEase}" />
    <interactivity:FluidMoveBehavior x:Key="BehaviorY400" AppliesTo="Children" Duration="0:0:.4" EaseY="{PowerEase}" />
    <Style x:Key="{x:Type hc:BlendEffectBox}" TargetType="{x:Type hc:BlendEffectBox}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type hc:BlendEffectBox}">
                    <ContentPresenter ContentSource="ActualContent" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="BorderCircular" TargetType="{x:Type Border}">
        <Setter Property="hc:BorderElement.Circular" Value="True" />
    </Style>
    <Style x:Key="{x:Type hc:Col}" TargetType="{x:Type hc:Col}">
        <Setter Property="Focusable" Value="False" />
    </Style>
    <Style x:Key="{x:Type ContentControl}" TargetType="{x:Type ContentControl}">
        <Setter Property="Focusable" Value="False" />
    </Style>
    <Style x:Key="{x:Type hc:FlipClock}" TargetType="{x:Type hc:FlipClock}">
        <Setter Property="Focusable" Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type hc:FlipClock}">
                    <StackPanel Orientation="Horizontal">
                        <hc:FlipNumber Margin="-20" Number="{Binding NumberList[0] , RelativeSource={RelativeSource TemplatedParent}}" />
                        <hc:FlipNumber Margin="-20" Number="{Binding NumberList[1] , RelativeSource={RelativeSource TemplatedParent}}" />
                        <hc:FlipNumber Margin="0,-20,-20,-20" Number="{Binding NumberList[2] , RelativeSource={RelativeSource TemplatedParent}}" />
                        <hc:FlipNumber Margin="-20" Number="{Binding NumberList[3] , RelativeSource={RelativeSource TemplatedParent}}" />
                        <hc:FlipNumber Margin="0,-20,-20,-20" Number="{Binding NumberList[4] , RelativeSource={RelativeSource TemplatedParent}}" />
                        <hc:FlipNumber Margin="-20" Number="{Binding NumberList[5] , RelativeSource={RelativeSource TemplatedParent}}" />
                    </StackPanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="{x:Type hc:FloatingBlock}" TargetType="{x:Type hc:FloatingBlock}">
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="VerticalAlignment" Value="Top" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type hc:FloatingBlock}">
                    <ContentPresenter ContentTemplate="{TemplateBinding ContentTemplate}" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="{x:Type GridSplitter}" TargetType="{x:Type GridSplitter}">
        <Setter Property="Focusable" Value="False" />
    </Style>
    <Style x:Key="{x:Type hc:Notification}" TargetType="{x:Type hc:Notification}">
        <Setter Property="hc:WindowAttach.IgnoreAltF4" Value="True" />
        <Setter Property="hc:WindowAttach.ShowInTaskManager" Value="False" />
        <Setter Property="Window.SizeToContent" Value="WidthAndHeight" />
        <Setter Property="Window.ResizeMode" Value="NoResize" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Window.ShowActivated" Value="False" />
        <Setter Property="Window.ShowInTaskbar" Value="False" />
        <Setter Property="Window.Topmost" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type hc:Notification}">
                    <ContentPresenter Margin="{TemplateBinding Padding}" HorizontalAlignment="Center" VerticalAlignment="Center" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="RectangleCircular" TargetType="{x:Type Rectangle}">
        <Setter Property="hc:RectangleAttach.Circular" Value="True" />
    </Style>
    <Style x:Key="SnapRect4ScreenshotStyle" TargetType="{x:Type Rectangle}">
        <Style.Triggers>
            <Trigger Property="hc:TipElement.Placement" Value="LeftTop">
                <Setter Property="Margin" Value="-3, -3, 0, 0" />
                <Setter Property="HorizontalAlignment" Value="Left" />
                <Setter Property="VerticalAlignment" Value="Top" />
            </Trigger>
            <Trigger Property="hc:TipElement.Placement" Value="Top">
                <Setter Property="Margin" Value="0, -3, 0, 0" />
                <Setter Property="HorizontalAlignment" Value="Center" />
                <Setter Property="VerticalAlignment" Value="Top" />
            </Trigger>
            <Trigger Property="hc:TipElement.Placement" Value="RightTop">
                <Setter Property="Margin" Value="0, -3, -3, 0" />
                <Setter Property="HorizontalAlignment" Value="Right" />
                <Setter Property="VerticalAlignment" Value="Top" />
            </Trigger>
            <Trigger Property="hc:TipElement.Placement" Value="Right">
                <Setter Property="Margin" Value="0, 0, -3, 0" />
                <Setter Property="HorizontalAlignment" Value="Right" />
                <Setter Property="VerticalAlignment" Value="Center" />
            </Trigger>
            <Trigger Property="hc:TipElement.Placement" Value="RightBottom">
                <Setter Property="Margin" Value="0, 0, -3, -3" />
                <Setter Property="HorizontalAlignment" Value="Right" />
                <Setter Property="VerticalAlignment" Value="Bottom" />
            </Trigger>
            <Trigger Property="hc:TipElement.Placement" Value="Bottom">
                <Setter Property="Margin" Value="0, 0, 0, -3" />
                <Setter Property="HorizontalAlignment" Value="Center" />
                <Setter Property="VerticalAlignment" Value="Bottom" />
            </Trigger>
            <Trigger Property="hc:TipElement.Placement" Value="LeftBottom">
                <Setter Property="Margin" Value="-3, 0, 0, -3" />
                <Setter Property="HorizontalAlignment" Value="Left" />
                <Setter Property="VerticalAlignment" Value="Bottom" />
            </Trigger>
            <Trigger Property="hc:TipElement.Placement" Value="Left">
                <Setter Property="Margin" Value="-3, 0, 0, 0" />
                <Setter Property="HorizontalAlignment" Value="Left" />
                <Setter Property="VerticalAlignment" Value="Center" />
            </Trigger>
            <DataTrigger Binding="{Binding IsSelecting}" Value="True">
                <Setter Property="Visibility" Value="Visible" />
            </DataTrigger>
            <DataTrigger Binding="{Binding IsDrawing}" Value="True">
                <Setter Property="Visibility" Value="Visible" />
            </DataTrigger>
        </Style.Triggers>
        <Setter Property="Height" Value="5" />
        <Setter Property="Width" Value="5" />
        <Setter Property="Fill" Value="DodgerBlue" />
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="VerticalAlignment" Value="Top" />
        <Setter Property="Visibility" Value="Collapsed" />
    </Style>
    <Style x:Key="TargetArea4ScreenshotStyle" TargetType="{x:Type Border}">
        <Style.Triggers>
            <DataTrigger Binding="{Binding IsSelecting}" Value="True">
                <Setter Property="BorderThickness" Value="1" />
            </DataTrigger>
            <DataTrigger Binding="{Binding IsDrawing}" Value="True">
                <Setter Property="UIElement.IsHitTestVisible" Value="True" />
                <Setter Property="BorderThickness" Value="1" />
            </DataTrigger>
        </Style.Triggers>
        <Setter Property="UIElement.IsHitTestVisible" Value="False" />
        <Setter Property="BorderThickness" Value="5" />
        <Setter Property="BorderBrush" Value="DodgerBlue" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="VerticalAlignment" Value="Top" />
    </Style>
    <Style x:Key="{x:Type hc:SimpleItemsControl}" TargetType="{x:Type hc:SimpleItemsControl}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type hc:SimpleItemsControl}">
                    <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
                        <StackPanel Name="PART_Panel" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="{x:Type hc:Sprite}" TargetType="{x:Type hc:Sprite}">
        <Setter Property="hc:WindowAttach.IgnoreAltF4" Value="True" />
        <Setter Property="hc:WindowAttach.ShowInTaskManager" Value="False" />
        <Setter Property="Window.SizeToContent" Value="WidthAndHeight" />
        <Setter Property="Window.ResizeMode" Value="NoResize" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Window.ShowActivated" Value="False" />
        <Setter Property="Window.ShowInTaskbar" Value="False" />
        <Setter Property="Window.Topmost" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type hc:Sprite}">
                    <ContentPresenter Margin="{TemplateBinding Padding}" IsDragElement="True" HorizontalAlignment="Center" VerticalAlignment="Center" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Storyboard x:Key="Right2LeftTransition">
        <DoubleAnimation From="50" To="0" Duration="0:0:0.4" TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.X)" EasingFunction="{CubicEase EasingMode=EaseOut}" />
    </Storyboard>
    <Storyboard x:Key="Left2RightTransition">
        <DoubleAnimation From="-50" To="0" Duration="0:0:0.4" TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.X)" EasingFunction="{CubicEase EasingMode=EaseOut}" />
    </Storyboard>
    <Storyboard x:Key="Bottom2TopTransition">
        <DoubleAnimation From="50" To="0" Duration="0:0:0.4" TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.Y)" EasingFunction="{CubicEase EasingMode=EaseOut}" />
    </Storyboard>
    <Storyboard x:Key="Top2BottomTransition">
        <DoubleAnimation From="-50" To="0" Duration="0:0:0.4" TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.Y)" EasingFunction="{CubicEase EasingMode=EaseOut}" />
    </Storyboard>
    <Storyboard x:Key="Right2LeftWithFadeTransition">
        <DoubleAnimation From="0" To="1" Duration="0:0:0.4" TargetProperty="(UIElement.Opacity)" />
        <DoubleAnimation From="50" To="0" Duration="0:0:0.4" TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.X)" EasingFunction="{CubicEase EasingMode=EaseOut}" />
    </Storyboard>
    <Storyboard x:Key="Left2RightWithFadeTransition">
        <DoubleAnimation From="0" To="1" Duration="0:0:0.4" TargetProperty="(UIElement.Opacity)" />
        <DoubleAnimation From="-50" To="0" Duration="0:0:0.4" TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.X)" EasingFunction="{CubicEase EasingMode=EaseOut}" />
    </Storyboard>
    <Storyboard x:Key="Bottom2TopWithFadeTransition">
        <DoubleAnimation From="0" To="1" Duration="0:0:0.4" TargetProperty="(UIElement.Opacity)" />
        <DoubleAnimation From="50" To="0" Duration="0:0:0.4" TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.Y)" EasingFunction="{CubicEase EasingMode=EaseOut}" />
    </Storyboard>
    <Storyboard x:Key="Top2BottomWithFadeTransition">
        <DoubleAnimation From="0" To="1" Duration="0:0:0.4" TargetProperty="(UIElement.Opacity)" />
        <DoubleAnimation From="-50" To="0" Duration="0:0:0.4" TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.Y)" EasingFunction="{CubicEase EasingMode=EaseOut}" />
    </Storyboard>
    <Storyboard x:Key="FadeTransition">
        <DoubleAnimation From="0" To="1" Duration="0:0:0.4" TargetProperty="(UIElement.Opacity)" />
    </Storyboard>
    <Style x:Key="{x:Type hc:TransitioningContentControl}" TargetType="{x:Type hc:TransitioningContentControl}">
        <Setter Property="Focusable" Value="False" />
    </Style>
    <Style x:Key="SliderRepeatButtonHorizontalStyle" TargetType="{x:Type RepeatButton}">
        <Setter Property="FrameworkElement.OverridesDefaultStyle" Value="true" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Focusable" Value="false" />
        <Setter Property="IsTabStop" Value="false" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Border Background="Transparent" Height="{TemplateBinding Height}" Width="{TemplateBinding Width}">
                        <Rectangle StrokeThickness="0" Fill="{TemplateBinding Background}" Height="2" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="SliderRepeatButtonVerticalStyle" TargetType="{x:Type RepeatButton}">
        <Setter Property="FrameworkElement.OverridesDefaultStyle" Value="true" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Focusable" Value="false" />
        <Setter Property="IsTabStop" Value="false" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Border Background="Transparent" Height="{TemplateBinding Height}" Width="{TemplateBinding Width}">
                        <Rectangle StrokeThickness="0" Fill="{TemplateBinding Background}" Width="2" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="CompareSliderRepeatButtonTransparent" TargetType="{x:Type RepeatButton}">
        <Setter Property="FrameworkElement.OverridesDefaultStyle" Value="true" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Focusable" Value="false" />
        <Setter Property="IsTabStop" Value="false" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <ContentPresenter Content="{TemplateBinding Content}" Height="{TemplateBinding ActualHeight}" Width="{TemplateBinding ActualWidth}" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="PreviewSliderRepeatButtonHorizontalStyle" TargetType="{x:Type RepeatButton}">
        <Setter Property="FrameworkElement.OverridesDefaultStyle" Value="true" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Focusable" Value="false" />
        <Setter Property="IsTabStop" Value="false" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Border Background="Transparent" Height="{TemplateBinding Height}" Width="{TemplateBinding Width}">
                        <Rectangle Fill="{TemplateBinding Background}" Height="2" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="PreviewSliderRepeatButtonVerticalStyle" TargetType="{x:Type RepeatButton}">
        <Setter Property="FrameworkElement.OverridesDefaultStyle" Value="true" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Focusable" Value="false" />
        <Setter Property="IsTabStop" Value="false" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Border Background="Transparent" Height="{TemplateBinding Height}" Width="{TemplateBinding Width}">
                        <Rectangle Fill="{TemplateBinding Background}" Width="2" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ScrollBarBaseRepeatButton" TargetType="{x:Type RepeatButton}">
        <Setter Property="FrameworkElement.OverridesDefaultStyle" Value="true" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Focusable" Value="false" />
        <Setter Property="IsTabStop" Value="false" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Rectangle Fill="{TemplateBinding Background}" Height="{TemplateBinding Height}" Width="{TemplateBinding Width}" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ToggleBlockBaseStyle" TargetType="{x:Type hc:ToggleBlock}">
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type hc:ToggleBlock}">
                    <ControlTemplate.Triggers>
                        <Trigger Property="hc:ToggleBlock.IsChecked" Value="True">
                            <Setter TargetName="ContentPresenterChecked" Property="Visibility" Value="Visible" />
                            <Setter TargetName="ContentPresenterUnChecked" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="ContentPresenterIndeterminate" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="hc:ToggleBlock.IsChecked" Value="False">
                            <Setter TargetName="ContentPresenterChecked" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="ContentPresenterUnChecked" Property="Visibility" Value="Visible" />
                            <Setter TargetName="ContentPresenterIndeterminate" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                        <Trigger Value="{x:Null}" Property="hc:ToggleBlock.IsChecked">
                            <Setter TargetName="ContentPresenterChecked" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="ContentPresenterUnChecked" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="ContentPresenterIndeterminate" Property="Visibility" Value="Visible" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                    <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
                        <hc:SimplePanel Margin="{TemplateBinding Padding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}">
                            <ContentPresenter Name="ContentPresenterChecked" ContentSource="CheckedContent" Visibility="Collapsed" />
                            <ContentPresenter Name="ContentPresenterUnChecked" ContentSource="UnCheckedContent" />
                            <ContentPresenter Name="ContentPresenterIndeterminate" ContentSource="IndeterminateContent" Visibility="Collapsed" />
                        </hc:SimplePanel>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <ControlTemplate x:Key="GroupBoxBaseTopTemplate" TargetType="{x:Type GroupBox}">
        <Grid>
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto" MinHeight="30" />
                <RowDefinition />
            </Grid.RowDefinitions>
            <Border MinHeight="30" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" Margin="0,0,0,6" Background="{Binding Path=(hc:TitleElement.Background), RelativeSource={RelativeSource TemplatedParent}}" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}">
                <ContentPresenter Foreground="{TemplateBinding Foreground}" Margin="10,0" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" ContentSource="Header" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
            </Border>
            <Border Grid.Row="1" Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}">
                <ContentPresenter Margin="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
            </Border>
        </Grid>
    </ControlTemplate>
    <ControlTemplate x:Key="GroupBoxBaseLeftTemplate" TargetType="{x:Type GroupBox}">
        <Grid>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" MinWidth="30" />
                <ColumnDefinition />
            </Grid.ColumnDefinitions>
            <Border MinWidth="30" BorderThickness="{TemplateBinding BorderThickness}" ClipToBounds="False" BorderBrush="{TemplateBinding BorderBrush}" Margin="0,0,6,0" Background="{Binding Path=(hc:TitleElement.Background), RelativeSource={RelativeSource TemplatedParent}}" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}">
                <ContentPresenter Foreground="{TemplateBinding Foreground}" Margin="0,10" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" ContentSource="Header" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" RenderTransformOrigin="0.5,0.5">
                    <ContentPresenter.LayoutTransform>
                        <TransformGroup>
                            <RotateTransform Angle="-90" />
                        </TransformGroup>
                    </ContentPresenter.LayoutTransform>
                </ContentPresenter>
            </Border>
            <Border Grid.Column="1" Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}">
                <ContentPresenter Margin="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
            </Border>
        </Grid>
    </ControlTemplate>
    <ControlTemplate x:Key="GroupBoxTabTopTemplate" TargetType="{x:Type GroupBox}">
        <Grid>
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto" MinHeight="30" />
                <RowDefinition />
            </Grid.RowDefinitions>
            <Border Grid.Row="1" Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource CornerRadiusSplitConverter}, ConverterParameter=0,0,1,1}">
                <ContentPresenter Margin="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
            </Border>
            <Border Grid.Row="0" MinHeight="30" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{Binding BorderThickness , RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource ThicknessSplitConverter}, ConverterParameter=1,1,1,0}" Background="{Binding Path=(hc:TitleElement.Background), RelativeSource={RelativeSource TemplatedParent}}" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource CornerRadiusSplitConverter}, ConverterParameter=1,1,0,0}">
                <ContentPresenter Foreground="{TemplateBinding Foreground}" Margin="10,0" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" ContentSource="Header" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
            </Border>
        </Grid>
    </ControlTemplate>
    <ControlTemplate x:Key="GroupBoxTabLeftTemplate" TargetType="{x:Type GroupBox}">
        <Grid>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" MinWidth="30" />
                <ColumnDefinition />
            </Grid.ColumnDefinitions>
            <Border Grid.Column="1" Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource CornerRadiusSplitConverter}, ConverterParameter=0,1,1,0}">
                <ContentPresenter Margin="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
            </Border>
            <Border Grid.Column="0" MinWidth="30" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{Binding BorderThickness , RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource ThicknessSplitConverter}, ConverterParameter=1,1,0,1}" Background="{Binding Path=(hc:TitleElement.Background), RelativeSource={RelativeSource TemplatedParent}}" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource CornerRadiusSplitConverter}, ConverterParameter=1,0,0,1}">
                <ContentPresenter Foreground="{TemplateBinding Foreground}" Margin="0,10" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" ContentSource="Header" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
                    <ContentPresenter.LayoutTransform>
                        <TransformGroup>
                            <RotateTransform Angle="-90" />
                        </TransformGroup>
                    </ContentPresenter.LayoutTransform>
                </ContentPresenter>
            </Border>
        </Grid>
    </ControlTemplate>
    <ItemsPanelTemplate x:Key="ButtonGroupHorizontalUniformItemsPanelTemplate">
        <UniformGrid Rows="1" FocusVisualStyle="{x:Null}" />
    </ItemsPanelTemplate>
    <ItemsPanelTemplate x:Key="ButtonGroupVerticalUniformItemsPanelTemplate">
        <UniformGrid Columns="1" FocusVisualStyle="{x:Null}" />
    </ItemsPanelTemplate>
    <ItemsPanelTemplate x:Key="ButtonGroupHorizontalStackItemsPanelTemplate">
        <StackPanel Orientation="Horizontal" FocusVisualStyle="{x:Null}" />
    </ItemsPanelTemplate>
    <ItemsPanelTemplate x:Key="ButtonGroupVerticalStackItemsPanelTemplate">
        <StackPanel FocusVisualStyle="{x:Null}" />
    </ItemsPanelTemplate>
    <tools:ButtonGroupItemStyleSelector x:Key="ButtonGroupItemStyleSelector" />
    <LinearGradientBrush x:Key="ProgressBarIndicatorAnimatedFill" StartPoint="0,0" EndPoint="1,0">
        <GradientStop Color="#00FFFFFF" Offset="0" />
        <GradientStop Color="#60FFFFFF" Offset="0.4" />
        <GradientStop Color="#60FFFFFF" Offset="0.6" />
        <GradientStop Color="#00FFFFFF" Offset="1" />
    </LinearGradientBrush>
    <ControlTemplate x:Key="CircleProgressBarTemplate" TargetType="{x:Type hc:CircleProgressBar}">
        <hc:SimplePanel Name="TemplateRoot">
            <shapes:Arc ArcThickness="{TemplateBinding ArcThickness}" Stretch="None" EndAngle="360" Width="{TemplateBinding ActualWidth}" Height="{TemplateBinding ActualHeight}" Stroke="{TemplateBinding BorderBrush}" Fill="{TemplateBinding Background}" StrokeThickness="0" />
            <shapes:Arc Name="PART_Indicator" ArcThickness="{TemplateBinding ArcThickness}" Stretch="None" Width="{TemplateBinding ActualWidth}" StrokeThickness="0" Height="{TemplateBinding ActualHeight}" Fill="{TemplateBinding Foreground}" />
            <TextBlock HorizontalAlignment="Center" VerticalAlignment="Center" Foreground="{TemplateBinding Foreground}" Text="{TemplateBinding Text}" Visibility="{Binding ShowText , RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource Boolean2VisibilityConverter}}" />
        </hc:SimplePanel>
    </ControlTemplate>
    <LinearGradientBrush x:Key="ResizeGripperForeground" EndPoint="1,0.75" StartPoint="0,0.25">
        <GradientStop Color="#FFFFFF" Offset="0.3" />
        <GradientStop Color="#BBC5D7" Offset="0.75" />
        <GradientStop Color="#6D83A9" Offset="1" />
    </LinearGradientBrush>
    <SineEase x:Key="SineEaseOut" EasingMode="EaseOut" />
    <ControlTemplate x:Key="BadgeDotTemplate" TargetType="{x:Type hc:Badge}">
        <hc:SimplePanel>
            <ContentPresenter />
            <Border Margin="{TemplateBinding BadgeMargin}" Width="10" Height="10" CornerRadius="5" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Visibility="{TemplateBinding ShowBadge , Converter={StaticResource Boolean2VisibilityConverter}}" />
        </hc:SimplePanel>
    </ControlTemplate>
    <Style x:Key="ColorPickerSliderRepeatButtonBaseStyle" TargetType="{x:Type RepeatButton}">
        <Setter Property="FrameworkElement.OverridesDefaultStyle" Value="true" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Focusable" Value="false" />
        <Setter Property="IsTabStop" Value="false" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Rectangle Fill="{TemplateBinding Background}" Height="{TemplateBinding Height}" Width="{TemplateBinding Width}" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <ControlTemplate x:Key="ColorPickerSliderThumbTemplate" TargetType="{x:Type Thumb}">
        <Border Width="13" Height="13" Background="White" CornerRadius="6.5" />
    </ControlTemplate>
    <LinearGradientBrush x:Key="ColorPickerRainbowBrush">
        <GradientStop Color="#ff0000" />
        <GradientStop Color="#ff00ff" Offset="0.167" />
        <GradientStop Color="#0000ff" Offset="0.334" />
        <GradientStop Color="#00ffff" Offset="0.501" />
        <GradientStop Color="#00ff00" Offset="0.668" />
        <GradientStop Color="#ffff00" Offset="0.835" />
        <GradientStop Color="#ff0000" Offset="1" />
    </LinearGradientBrush>
    <DrawingBrush x:Key="ColorPickerOpacityBrush" Viewport="0,0,12,11" ViewportUnits="Absolute" Stretch="None" TileMode="Tile">
        <DrawingBrush.Drawing>
            <DrawingGroup>
                <GeometryDrawing Brush="#d0cec7">
                    <GeometryDrawing.Geometry>
                        <GeometryGroup>
                            <RectangleGeometry Rect="0,0,6,5" />
                            <RectangleGeometry Rect="6,6,6,5" />
                        </GeometryGroup>
                    </GeometryDrawing.Geometry>
                </GeometryDrawing>
                <GeometryDrawing Brush="#e7e7e2" Geometry="{RectangleGeometry Rect=0,5,12,1}" />
            </DrawingGroup>
        </DrawingBrush.Drawing>
    </DrawingBrush>
    <Style x:Key="CoverFlowBaseStyle" TargetType="{x:Type hc:CoverFlow}">
        <Setter Property="Focusable" Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type hc:CoverFlow}">
                    <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}">
                        <Viewport3D Name="PART_Viewport3D">
                            <Viewport3D.Camera>
                                <PerspectiveCamera x:Name="PART_Camera" Position="0,0,3" UpDirection="0,1,0" LookDirection="0,0,-1" FieldOfView="90" />
                            </Viewport3D.Camera>
                            <Viewport3D.Children>
                                <ModelVisual3D Content="{DirectionalLight Color=White, Direction=1,0,-4}" />
                                <ModelVisual3D Content="{DirectionalLight Color=White, Direction=-1,0,-4}" />
                                <ModelVisual3D x:Name="PART_VisualParent" />
                            </Viewport3D.Children>
                        </Viewport3D>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="CoverViewItemBaseStyle" TargetType="{x:Type hc:CoverViewItem}">
        <Setter Property="Focusable" Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type hc:CoverViewItem}">
                    <Border BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}">
                        <ContentPresenter ContentSource="Header" ContentTemplate="{TemplateBinding HeaderTemplate}" Margin="{TemplateBinding Padding}" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="GridViewColumnHeaderGripper" TargetType="{x:Type Thumb}">
        <Setter Property="Canvas.Right" Value="-9" />
        <Setter Property="Width" Value="18" />
        <Setter Property="Height" Value="{Binding ActualHeight , RelativeSource={RelativeSource TemplatedParent}}" />
        <Setter Property="Padding" Value="0" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Border Background="Transparent" Padding="{TemplateBinding Padding}">
                        <Rectangle Fill="{TemplateBinding Background}" HorizontalAlignment="Center" Width="1" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <DrawingBrush x:Key="SortByCategoryDrawingBrush" PresentationOptions:Freeze="True">
        <DrawingBrush.Drawing>
            <DrawingGroup PresentationOptions:Freeze="True">
                <GeometryDrawing PresentationOptions:Freeze="True" Brush="#00FFFFFF" Geometry="F1 M 16,16 L 0,16 0,0 16,0 Z" />
                <GeometryDrawing PresentationOptions:Freeze="True" Brush="#FFF6F6F6" Geometry="F1 M 0,9999,-0,000199999999999534 L 0,9999,15,9998 10,9999,15,9998 10,9999,13,4148 11,9999,14,4138 15,9999,10,4138 15,9999,5,5858 14,0009,7,5858 14,0009,3,0008 10,9999,3,0008 10,9999,-0,000199999999999534 Z" />
                <GeometryDrawing PresentationOptions:Freeze="True" Brush="#FF424242" Geometry="F1 M 10,12,4141 L 10,15,0001 2,15,0001 2,1,0001 10,1,0001 10,3,0001 10,7,5861 8,414,6,0001 9,6,0001 9,3,0001 3,3,0001 3,6,0001 8,6,0001 8,7,0001 3,7,0001 3,10,0001 8,10,0001 8,10,4141 8,586,11,0001 3,11,0001 3,14,0001 9,14,0001 9,11,4141 Z" />
                <GeometryDrawing PresentationOptions:Freeze="True" Brush="#FFEFEFF0" Geometry="F1 M 8,5859,11 L 2,9999,11 2,9999,14 8,9999,14 8,9999,11,414 M 7,9999,7 L 2,9999,7 2,9999,10 7,9999,10 M 7,9999,6 L 2,9999,6 2,9999,3 8,9999,3 8,9999,6 8,4139,6 7,9999,5,586 Z" />
                <GeometryDrawing PresentationOptions:Freeze="True" Brush="#FF00529C" Geometry="F1 M 13,10 L 13,4 11,4 11,10 9,8 9,10 12,13 15,10 15,8 Z" />
            </DrawingGroup>
        </DrawingBrush.Drawing>
    </DrawingBrush>
    <DrawingBrush x:Key="SortByNameDrawingBrush" PresentationOptions:Freeze="True">
        <DrawingBrush.Drawing>
            <DrawingGroup PresentationOptions:Freeze="True">
                <GeometryDrawing PresentationOptions:Freeze="True" Brush="#00FFFFFF" Geometry="F1 M 16,16 L 0,16 0,0 16,0 Z" />
                <GeometryDrawing PresentationOptions:Freeze="True" Brush="#FFF6F6F6" Geometry="F1 M 0,-0,000199999999999534 L 0,8,9998 1,8,9998 1,12,0008 2,586,12,0008 1,13,5858 1,15,9998 8,15,9998 8,13,0008 6,449,13,0008 8,12,0008 8,10,9998 12,14,9998 16,10,9998 16,4,9998 14,6,9998 14,3,0008 10,3,0008 10,6,9998 9,5,9998 9,-0,000199999999999534 Z" />
                <GeometryDrawing PresentationOptions:Freeze="True" Brush="#FF424242" Geometry="F1 M 7,7 L 5,2 4,2 2,7 3,7 3,399,6 5,601,6 6,7 M 8,8 L 1,8 1,1 8,1 M 4,5,3,25 L 5,2,5 3,8,5 M 2,11 L 5,11 2,14 2,15 7,15 7,14 4,013,14 7,11,051 6,952,11 7,11 7,10 2,10 Z" />
                <GeometryDrawing PresentationOptions:Freeze="True" Brush="#FFEFEFF0" Geometry="F1 M 3,7998,5 L 4,4998,3,25 5,1998,5 M 5,9998,7 L 6,9998,7 4,9998,2 3,9998,2 1,9998,7 2,9998,7 3,3998,6 5,6008,6 Z" />
                <GeometryDrawing PresentationOptions:Freeze="True" Brush="#FF00529C" Geometry="F1 M 15,8 L 15,10 12,13 9,10 9,8 11,10 11,4 13,4 13,10 Z" />
            </DrawingGroup>
        </DrawingBrush.Drawing>
    </DrawingBrush>
    <ItemsPanelTemplate x:Key="StepBarHorizontalItemsPanelTemplate">
        <UniformGrid Rows="1" />
    </ItemsPanelTemplate>
    <ItemsPanelTemplate x:Key="StepBarVerticalItemsPanelTemplate">
        <UniformGrid Columns="1" />
    </ItemsPanelTemplate>
    <ContextMenu x:Key="TabItemMenu">
        <MenuItem Command="interactivity:ControlCommands.Close" Header="{x:Static langs:Lang.Close}" />
        <MenuItem Command="interactivity:ControlCommands.CloseAll" Header="{x:Static langs:Lang.CloseAll}" />
        <MenuItem Command="interactivity:ControlCommands.CloseOther" Header="{x:Static langs:Lang.CloseOther}" />
    </ContextMenu>
    <Style x:Key="ToolBarTrayBaseStyle" TargetType="{x:Type ToolBarTray}">
        <Setter Property="ToolBarTray.Background" Value="Transparent" />
    </Style>
    <PathGeometry x:Key="TreeArrow" Figures="M508.893248 762.931659a65.039498 65.039498 0 0 1-46.420659-19.485839L97.125746 371.004022c-25.143018-25.634319-24.752868-66.816849 0.881451-91.959868 25.648769-25.164693 66.809624-24.745643 91.959867 0.881451l318.933409 325.125238 318.933408-325.125238a65.025048 65.025048 0 0 1 92.841318 91.078417L555.313907 743.44582a65.025048 65.025048 0 0 1-46.420659 19.485839z" />
    <Style x:Key="RowHeaderGripperStyle" TargetType="{x:Type Thumb}">
        <Setter Property="Height" Value="8" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="FrameworkElement.Cursor" Value="SizeNS" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Border Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ColumnHeaderGripperStyle" TargetType="{x:Type Thumb}">
        <Setter Property="Width" Value="8" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="FrameworkElement.Cursor" Value="SizeWE" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Border Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="TextBlockComboBoxStyle" TargetType="{x:Type ComboBox}">
        <Setter Property="Focusable" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBox}">
                    <TextBlock IsHitTestVisible="False" Text="{TemplateBinding Text}" TextTrimming="CharacterEllipsis" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="DataGridTextColumnStyle" TargetType="{x:Type TextBlock}">
        <Setter Property="TextTrimming" Value="CharacterEllipsis" />
    </Style>
    <Style x:Key="CarouselItemBaseStyle" TargetType="{x:Type hc:CarouselItem}">
        <Setter Property="Focusable" Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type hc:CarouselItem}">
                    <Border BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}">
                        <ContentPresenter Margin="{TemplateBinding Padding}" ContentTemplate="{Binding ItemTemplate , RelativeSource={RelativeSource AncestorType=hc:Carousel}}" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="{x:Type hc:GrowlWindow}" TargetType="{x:Type hc:GrowlWindow}">
        <Setter Property="hc:WindowAttach.IgnoreAltF4" Value="True" />
        <Setter Property="hc:WindowAttach.ShowInTaskManager" Value="False" />
        <Setter Property="Width" Value="340" />
        <Setter Property="MaxWidth" Value="340" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Window.ShowActivated" Value="False" />
        <Setter Property="Window.ShowInTaskbar" Value="False" />
        <Setter Property="Window.Topmost" Value="True" />
    </Style>
    <Style x:Key="ListBoxItemCustom" TargetType="{x:Type ListBoxItem}">
        <Setter Property="UIElement.SnapsToDevicePixels" Value="True" />
        <Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="Padding" Value="0" />
        <Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment , RelativeSource={RelativeSource AncestorType=ItemsControl}}" />
        <Setter Property="VerticalContentAlignment" Value="Top" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListBoxItem}">
                    <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <ItemsPanelTemplate x:Key="WrapPanelHorizontalItemsPanelTemplate">
        <WrapPanel HorizontalAlignment="Center" VerticalAlignment="Center" FocusVisualStyle="{x:Null}" />
    </ItemsPanelTemplate>
    <ItemsPanelTemplate x:Key="WrapPanelVerticalItemsPanelTemplate">
        <WrapPanel Orientation="Vertical" HorizontalAlignment="Center" VerticalAlignment="Center" FocusVisualStyle="{x:Null}" />
    </ItemsPanelTemplate>
    <ItemsPanelTemplate x:Key="StackPanelHorizontalItemsPanelTemplate">
        <StackPanel Orientation="Horizontal" FocusVisualStyle="{x:Null}" />
    </ItemsPanelTemplate>
    <ItemsPanelTemplate x:Key="StackPanelVerticalItemsPanelTemplate">
        <StackPanel HorizontalAlignment="Stretch" FocusVisualStyle="{x:Null}" />
    </ItemsPanelTemplate>
    <ItemsPanelTemplate x:Key="ComboBoxCapsuleItemsPanelTemplate">
        <UniformGrid Rows="1" FocusVisualStyle="{x:Null}" />
    </ItemsPanelTemplate>
    <tools:ComboBoxItemCapsuleStyleSelector x:Key="ComboBoxItemCapsuleStyleSelector" />
    <hc:HorizontalAlignmentPathTemplateSelector x:Key="HorizontalAlignmentPathTemplateSelector" />
    <hc:VerticalAlignmentPathTemplateSelector x:Key="VerticalAlignmentPathTemplateSelector" />
    <converter:ProgressBarWidthConverter x:Key="ProgressBarWidthConverter" />
    <DropShadowEffect x:Key="EffectShadow1" PresentationOptions:Freeze="True" BlurRadius="5" ShadowDepth="1" Direction="270" Color="{StaticResource EffectShadowColor}" Opacity=".2" RenderingBias="Performance" />
    <DropShadowEffect x:Key="EffectShadow2" PresentationOptions:Freeze="True" BlurRadius="8" ShadowDepth="1.5" Direction="270" Color="{StaticResource EffectShadowColor}" Opacity=".2" RenderingBias="Performance" />
    <DropShadowEffect x:Key="EffectShadow3" PresentationOptions:Freeze="True" BlurRadius="14" ShadowDepth="4.5" Direction="270" Color="{StaticResource EffectShadowColor}" Opacity=".2" RenderingBias="Performance" />
    <DropShadowEffect x:Key="EffectShadow4" PresentationOptions:Freeze="True" BlurRadius="25" ShadowDepth="8" Direction="270" Color="{StaticResource EffectShadowColor}" Opacity=".2" RenderingBias="Performance" />
    <DropShadowEffect x:Key="EffectShadow5" PresentationOptions:Freeze="True" BlurRadius="35" ShadowDepth="13" Direction="270" Color="{StaticResource EffectShadowColor}" Opacity=".2" RenderingBias="Performance" />
    <Style x:Key="SearchPathStyle" BasedOn="{StaticResource PathBaseStyle}" TargetType="{x:Type Path}">
        <Setter Property="Data" Value="{StaticResource SearchGeometry}" />
    </Style>
    <Style x:Key="FullScreenReturnPathStyle" BasedOn="{StaticResource PathBaseStyle}" TargetType="{x:Type Path}">
        <Setter Property="Data" Value="{StaticResource FullScreenReturnGeometry}" />
    </Style>
    <Style x:Key="FullScreenPathStyle" BasedOn="{StaticResource PathBaseStyle}" TargetType="{x:Type Path}">
        <Setter Property="Data" Value="{StaticResource FullScreenGeometry}" />
    </Style>
    <Style x:Key="WindowsPathStyle" BasedOn="{StaticResource PathBaseStyle}" TargetType="{x:Type Path}">
        <Setter Property="Data" Value="{StaticResource WindowsGeometry}" />
    </Style>
    <Style x:Key="SavePathStyle" BasedOn="{StaticResource PathBaseStyle}" TargetType="{x:Type Path}">
        <Setter Property="Data" Value="{StaticResource SaveGeometry}" />
    </Style>
    <Style x:Key="DownloadPathStyle" BasedOn="{StaticResource PathBaseStyle}" TargetType="{x:Type Path}">
        <Setter Property="Data" Value="{StaticResource DownloadGeometry}" />
    </Style>
    <Style x:Key="EnlargePathStyle" BasedOn="{StaticResource PathBaseStyle}" TargetType="{x:Type Path}">
        <Setter Property="Data" Value="{StaticResource EnlargeGeometry}" />
    </Style>
    <Style x:Key="ReducePathStyle" BasedOn="{StaticResource PathBaseStyle}" TargetType="{x:Type Path}">
        <Setter Property="Data" Value="{StaticResource ReduceGeometry}" />
    </Style>
    <Style x:Key="RotatePathStyle" BasedOn="{StaticResource PathBaseStyle}" TargetType="{x:Type Path}">
        <Setter Property="Data" Value="{StaticResource RotateLeftGeometry}" />
    </Style>
    <Style x:Key="CalendarPathStyle" BasedOn="{StaticResource PathBaseStyle}" TargetType="{x:Type Path}">
        <Setter Property="Data" Value="{StaticResource CalendarGeometry}" />
    </Style>
    <Style x:Key="DeletePathStyle" BasedOn="{StaticResource PathBaseStyle}" TargetType="{x:Type Path}">
        <Setter Property="Data" Value="{StaticResource DeleteGeometry}" />
    </Style>
    <Style x:Key="ClosePathStyle" BasedOn="{StaticResource PathBaseStyle}" TargetType="{x:Type Path}">
        <Setter Property="Data" Value="{StaticResource CloseGeometry}" />
    </Style>
    <Style x:Key="DownPathStyle" BasedOn="{StaticResource PathBaseStyle}" TargetType="{x:Type Path}">
        <Setter Property="Data" Value="{StaticResource DownGeometry}" />
    </Style>
    <Style x:Key="ClockPathStyle" BasedOn="{StaticResource PathBaseStyle}" TargetType="{x:Type Path}">
        <Setter Property="Data" Value="{StaticResource ClockGeometry}" />
    </Style>
    <Style x:Key="LeftPathStyle" BasedOn="{StaticResource PathBaseStyle}" TargetType="{x:Type Path}">
        <Setter Property="Data" Value="{StaticResource LeftGeometry}" />
    </Style>
    <Style x:Key="RightPathStyle" BasedOn="{StaticResource PathBaseStyle}" TargetType="{x:Type Path}">
        <Setter Property="UIElement.RenderTransformOrigin" Value="0.5, 0.5" />
        <Setter Property="RenderTransform">
            <Setter.Value>
                <TransformGroup>
                    <ScaleTransform ScaleY="1" ScaleX="-1" />
                    <SkewTransform AngleY="0" AngleX="0" />
                    <RotateTransform Angle="0" />
                    <TranslateTransform />
                </TransformGroup>
            </Setter.Value>
        </Setter>
        <Setter Property="Data" Value="{StaticResource LeftGeometry}" />
    </Style>
    <Style x:Key="UpDownPathStyle" BasedOn="{StaticResource PathBaseStyle}" TargetType="{x:Type Path}">
        <Setter Property="Data" Value="{StaticResource UpDownGeometry}" />
    </Style>
    <Style x:Key="BorderRegion" TargetType="{x:Type Border}">
        <Setter Property="Border.CornerRadius" Value="{StaticResource DefaultCornerRadius}" />
        <Setter Property="Border.Padding" Value="10" />
        <Setter Property="Background" Value="{DynamicResource RegionBrush}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
    </Style>
    <Style x:Key="BorderTipBaseStyle" TargetType="{x:Type Border}">
        <Setter Property="Border.CornerRadius" Value="{StaticResource DefaultCornerRadius}" />
        <Setter Property="Border.Padding" Value="10" />
        <Setter Property="BorderThickness" Value="5,0,0,0" />
    </Style>
    <Style x:Key="BorderTipPrimary" BasedOn="{StaticResource BorderTipBaseStyle}" TargetType="{x:Type Border}">
        <Setter Property="Background" Value="{DynamicResource LightPrimaryBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource PrimaryBrush}" />
    </Style>
    <Style x:Key="BorderTipDanger" BasedOn="{StaticResource BorderTipBaseStyle}" TargetType="{x:Type Border}">
        <Setter Property="Background" Value="{DynamicResource LightDangerBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource DangerBrush}" />
    </Style>
    <Style x:Key="BorderTipWarning" BasedOn="{StaticResource BorderTipBaseStyle}" TargetType="{x:Type Border}">
        <Setter Property="Background" Value="{DynamicResource LightWarningBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource WarningBrush}" />
    </Style>
    <Style x:Key="BorderTipInfo" BasedOn="{StaticResource BorderTipBaseStyle}" TargetType="{x:Type Border}">
        <Setter Property="Background" Value="{DynamicResource LightInfoBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource InfoBrush}" />
    </Style>
    <Style x:Key="BorderTipSuccess" BasedOn="{StaticResource BorderTipBaseStyle}" TargetType="{x:Type Border}">
        <Setter Property="Background" Value="{DynamicResource LightSuccessBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource SuccessBrush}" />
    </Style>
    <Style x:Key="BorderVerticallySplitter" TargetType="{x:Type Border}">
        <Setter Property="Width" Value="1" />
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="Background" Value="{DynamicResource ThirdlyTextBrush}" />
    </Style>
    <Style x:Key="BorderHorizontallySplitter" TargetType="{x:Type Border}">
        <Setter Property="Height" Value="1" />
        <Setter Property="VerticalAlignment" Value="Top" />
        <Setter Property="Background" Value="{DynamicResource ThirdlyTextBrush}" />
    </Style>
    <Style x:Key="BorderClip" TargetType="{x:Type Border}">
        <Setter Property="UIElement.Clip">
            <Setter.Value>
                <MultiBinding Converter="{StaticResource BorderClipConverter}">
                    <Binding Path="ActualWidth" RelativeSource="{RelativeSource Self}" />
                    <Binding Path="ActualHeight" RelativeSource="{RelativeSource Self}" />
                    <Binding Path="CornerRadius" RelativeSource="{RelativeSource Self}" />
                </MultiBinding>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="BorderCircularClip" BasedOn="{StaticResource BorderCircular}" TargetType="{x:Type Border}">
        <Setter Property="UIElement.Clip">
            <Setter.Value>
                <MultiBinding Converter="{StaticResource BorderCircularClipConverter}">
                    <Binding Path="ActualWidth" RelativeSource="{RelativeSource Self}" />
                    <Binding Path="ActualHeight" RelativeSource="{RelativeSource Self}" />
                    <Binding Path="CornerRadius" RelativeSource="{RelativeSource Self}" />
                </MultiBinding>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="{x:Type hc:FlipNumber}" TargetType="{x:Type hc:FlipNumber}">
        <Setter Property="hc:FlipNumber.FontSize" Value="70" />
        <Setter Property="hc:FlipNumber.Foreground" Value="{DynamicResource TextIconBrush}" />
        <Setter Property="hc:FlipNumber.Background" Value="{DynamicResource TitleBrush}" />
        <Setter Property="Width" Value="120" />
        <Setter Property="Height" Value="180" />
        <Setter Property="Viewport3D.Camera" Value="{PerspectiveCamera Position=0 0 120, LookDirection=0 0 -1}" />
    </Style>
    <Style x:Key="RectangleFocusVisual" TargetType="{x:Type Rectangle}">
        <Setter Property="Margin" Value="-2" />
        <Setter Property="UIElement.Opacity" Value=".6" />
        <Setter Property="UIElement.SnapsToDevicePixels" Value="True" />
        <Setter Property="Stroke" Value="{DynamicResource SecondaryBorderBrush}" />
        <Setter Property="StrokeThickness" Value="2" />
        <Setter Property="Shape.StrokeDashArray" Value="1 1" />
    </Style>
    <Style x:Key="RectangleFocusVisualCircular" BasedOn="{StaticResource RectangleFocusVisual}" TargetType="{x:Type Rectangle}">
        <Setter Property="hc:RectangleAttach.Circular" Value="True" />
    </Style>
    <Style x:Key="TextBoxBaseBaseStyle" TargetType="{x:Type TextBoxBase}">
        <Setter Property="Background" Value="{DynamicResource RegionBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource PrimaryTextBrush}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="TextBoxBase.CaretBrush" Value="{DynamicResource PrimaryTextBrush}" />
        <Setter Property="hc:BorderElement.CornerRadius" Value="{StaticResource DefaultCornerRadius}" />
        <Setter Property="KeyboardNavigation.TabNavigation" Value="None" />
        <Setter Property="HorizontalContentAlignment" Value="Left" />
        <Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="UIElement.AllowDrop" Value="true" />
        <Setter Property="Padding" Value="2,7" />
        <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst" />
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Hidden" />
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Hidden" />
        <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBoxBase}">
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter TargetName="border" Property="UIElement.Opacity" Value="0.4" />
                        </Trigger>
                        <Trigger Property="UIElement.IsMouseOver" Value="true">
                            <Setter TargetName="border" Value="{DynamicResource SecondaryBorderBrush}" Property="BorderBrush" />
                        </Trigger>
                        <Trigger Property="UIElement.IsFocused" Value="true">
                            <Setter TargetName="border" Value="{DynamicResource PrimaryBrush}" Property="BorderBrush" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                    <Border Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}">
                        <ScrollViewer Name="PART_ContentHost" Padding="{TemplateBinding Padding}" Focusable="false" ScrollViewer.HorizontalScrollBarVisibility="{Binding Path=(ScrollViewer.HorizontalScrollBarVisibility), RelativeSource={RelativeSource TemplatedParent}}" ScrollViewer.VerticalScrollBarVisibility="{Binding Path=(ScrollViewer.VerticalScrollBarVisibility), RelativeSource={RelativeSource TemplatedParent}}" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="RichTextBoxBaseStyle" BasedOn="{StaticResource TextBoxBaseBaseStyle}" TargetType="{x:Type RichTextBox}">
        <Setter Property="MinWidth" Value="10" />
    </Style>
    <Style x:Key="{x:Type RichTextBox}" BasedOn="{StaticResource RichTextBoxBaseStyle}" TargetType="{x:Type RichTextBox}" />
    <Style x:Key="MaskRect4ScreenshotStyle" TargetType="{x:Type Rectangle}">
        <Setter Property="UIElement.IsHitTestVisible" Value="False" />
        <Setter Property="Fill" Value="{DynamicResource DarkOpacityBrush}" />
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="VerticalAlignment" Value="Top" />
    </Style>
    <Style x:Key="Window4ScreenshotStyle" TargetType="{x:Type hc:ScreenshotWindow}">
        <Setter Property="FrameworkElement.UseLayoutRounding" Value="True" />
        <Setter Property="Window.WindowStyle" Value="None" />
        <Setter Property="Window.WindowState" Value="Maximized" />
        <Setter Property="Window.Topmost" Value="True" />
        <Setter Property="Window.ResizeMode" Value="NoResize" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="hc:WindowAttach.IgnoreAltF4" Value="True" />
        <Setter Property="hc:WindowAttach.ShowInTaskManager" Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type hc:ScreenshotWindow}">
                    <AdornerDecorator>
                        <hc:SimplePanel>
                            <InkCanvas Name="PART_Canvas" EditingMode="None" Background="Transparent" />
                            <Rectangle Name="PART_MaskAreaLeft" Style="{StaticResource MaskRect4ScreenshotStyle}" />
                            <Rectangle Name="PART_MaskAreaTop" Style="{StaticResource MaskRect4ScreenshotStyle}" />
                            <Rectangle Name="PART_MaskAreaRight" Style="{StaticResource MaskRect4ScreenshotStyle}" />
                            <Rectangle Name="PART_MaskAreaBottom" Style="{StaticResource MaskRect4ScreenshotStyle}" />
                            <Border Name="PART_TargetArea" Style="{StaticResource TargetArea4ScreenshotStyle}">
                                <hc:SimplePanel>
                                    <Rectangle Placement="LeftTop" Style="{StaticResource SnapRect4ScreenshotStyle}" />
                                    <Rectangle Placement="Top" Style="{StaticResource SnapRect4ScreenshotStyle}" />
                                    <Rectangle Placement="RightTop" Style="{StaticResource SnapRect4ScreenshotStyle}" />
                                    <Rectangle Placement="Right" Style="{StaticResource SnapRect4ScreenshotStyle}" />
                                    <Rectangle Placement="RightBottom" Style="{StaticResource SnapRect4ScreenshotStyle}" />
                                    <Rectangle Placement="Bottom" Style="{StaticResource SnapRect4ScreenshotStyle}" />
                                    <Rectangle Placement="LeftBottom" Style="{StaticResource SnapRect4ScreenshotStyle}" />
                                    <Rectangle Placement="Left" Style="{StaticResource SnapRect4ScreenshotStyle}" />
                                    <TextBlock Text="{TemplateBinding SizeStr}" Background="#CC212121" Foreground="White" HorizontalAlignment="Left" VerticalAlignment="Top" Padding="8,2" />
                                </hc:SimplePanel>
                            </Border>
                            <Border Name="PART_Magnifier" IsHitTestVisible="False" Visibility="Collapsed" HorizontalAlignment="Left" VerticalAlignment="Top" Width="122" Height="122" BorderThickness="1" BorderBrush="#FF333333" CornerRadius="1" Effect="{DropShadowEffect BlurRadius=2, Opacity=.2, Direction=-45, RenderingBias=Performance, ShadowDepth=3}">
                                <hc:SimplePanel>
                                    <Border Margin="0,0,0,32" Background="{TemplateBinding PreviewBrush}" BorderThickness="2" BorderBrush="White">
                                        <hc:SimplePanel>
                                            <Path Data="F0 M 56,0 L 60,0 60,40 116,40 116,44 60,44 60,84 56,84 56,44 0,44 0,40 56,40 Z" Fill="#CC4CC6FF" />
                                        </hc:SimplePanel>
                                    </Border>
                                    <Border Height="32" VerticalAlignment="Bottom" Background="#CC000000">
                                        <StackPanel VerticalAlignment="Center" Margin="5,0,0,0">
                                            <TextBlock Foreground="White" Text="{TemplateBinding SizeStr}" />
                                        </StackPanel>
                                    </Border>
                                </hc:SimplePanel>
                            </Border>
                        </hc:SimplePanel>
                    </AdornerDecorator>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="FocusVisual">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle Style="{StaticResource RectangleFocusVisual}" RadiusX="4" RadiusY="4" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="FocusVisualRadius0">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle Style="{StaticResource RectangleFocusVisual}" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="FocusVisualMargin0">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle Opacity=".6" SnapsToDevicePixels="true" Stroke="{DynamicResource SecondaryBorderBrush}" StrokeThickness="2" StrokeDashArray="1 1" RadiusX="4" RadiusY="4" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="FocusVisualRadius0Margin0">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle Opacity=".6" SnapsToDevicePixels="true" Stroke="{DynamicResource SecondaryBorderBrush}" StrokeThickness="2" StrokeDashArray="1 1" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="BaseStyle" TargetType="{x:Type Control}">
        <Setter Property="Foreground" Value="{DynamicResource PrimaryTextBrush}" />
        <Setter Property="FontSize" Value="{StaticResource TextFontSize}" />
        <Setter Property="FrameworkElement.FocusVisualStyle" Value="{StaticResource FocusVisual}" />
    </Style>
    <Style x:Key="ButtonBaseBaseStyle" BasedOn="{StaticResource BaseStyle}" TargetType="{x:Type ButtonBase}">
        <Setter Property="Height" Value="{StaticResource DefaultControlHeight}" />
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
        <Setter Property="Padding" Value="{StaticResource DefaultControlPadding}" />
        <Setter Property="Foreground" Value="{DynamicResource TextIconBrush}" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
    </Style>
    <Style x:Key="ButtonBaseStyle" BasedOn="{StaticResource ButtonBaseBaseStyle}" TargetType="{x:Type Button}">
        <Style.Triggers>
            <Trigger Property="UIElement.IsMouseOver" Value="True">
                <Setter Property="UIElement.Opacity" Value=".9" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="UIElement.Opacity" Value=".6" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="UIElement.Opacity" Value="0.4" />
            </Trigger>
        </Style.Triggers>
        <Setter Property="Background" Value="{DynamicResource RegionBrush}" />
        <Setter Property="hc:BorderElement.CornerRadius" Value="{StaticResource DefaultCornerRadius}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <ControlTemplate.Triggers>
                        <Trigger Value="{x:Null}" Property="Content">
                            <Setter TargetName="ContentPresenterMain" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                        <Trigger Value="{x:Null}" Property="hc:IconElement.Geometry">
                            <Setter TargetName="PathMain" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="ContentPresenterMain" Property="Margin" Value="0" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                    <hc:SimplePanel>
                        <Border Background="{TemplateBinding Background}" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}" />
                        <Border BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}">
                            <StackPanel Orientation="Horizontal" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Margin="{TemplateBinding Padding}">
                                <Path Name="PathMain" Width="{TemplateBinding Width}" Height="{TemplateBinding Height}" Fill="{TemplateBinding Foreground}" SnapsToDevicePixels="True" Stretch="Uniform" Data="{TemplateBinding Geometry}" />
                                <ContentPresenter Name="ContentPresenterMain" RecognizesAccessKey="True" VerticalAlignment="Center" Margin="6,0,0,0" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                            </StackPanel>
                        </Border>
                    </hc:SimplePanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ButtonDashedBaseStyle" BasedOn="{StaticResource ButtonBaseStyle}" TargetType="{x:Type Button}">
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <ControlTemplate.Triggers>
                        <Trigger Value="{x:Null}" Property="Content">
                            <Setter TargetName="ContentPresenterMain" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                        <Trigger Value="{x:Null}" Property="hc:IconElement.Geometry">
                            <Setter TargetName="PathMain" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="ContentPresenterMain" Property="Margin" Value="0" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                    <hc:DashedBorder BorderDashArray="3,2" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" Background="Transparent" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}">
                        <StackPanel Orientation="Horizontal" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Margin="{TemplateBinding Padding}">
                            <Path Name="PathMain" Width="{TemplateBinding Width}" Height="{TemplateBinding Height}" Fill="{TemplateBinding Foreground}" SnapsToDevicePixels="True" Stretch="Uniform" Data="{TemplateBinding Geometry}" />
                            <ContentPresenter Name="ContentPresenterMain" RecognizesAccessKey="True" VerticalAlignment="Center" Margin="6,0,0,0" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        </StackPanel>
                    </hc:DashedBorder>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ButtonGroupItemBaseStyle" BasedOn="{StaticResource BaseStyle}" TargetType="{x:Type Button}">
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="UIElement.Opacity" Value="0.4" />
            </Trigger>
            <DataTrigger Binding="{Binding Orientation , RelativeSource={RelativeSource AncestorType=hc:ButtonGroup}}" Value="Vertical">
                <Setter Property="Margin" Value="0,-1,0,0" />
            </DataTrigger>
            <Trigger Property="UIElement.IsMouseOver" Value="True">
                <Setter Property="Background" Value="{DynamicResource SecondaryRegionBrush}" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background" Value="{DynamicResource BorderBrush}" />
            </Trigger>
        </Style.Triggers>
        <Setter Property="Background" Value="{DynamicResource RegionBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="hc:BorderElement.CornerRadius" Value="0" />
        <Setter Property="Height" Value="{StaticResource DefaultControlHeight}" />
        <Setter Property="Padding" Value="10,0" />
        <Setter Property="Margin" Value="-1,0,0,0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <ControlTemplate.Triggers>
                        <Trigger Property="UIElement.IsMouseOver" Value="True">
                            <Setter Value="{DynamicResource PrimaryBrush}" TargetName="contentPresenter" Property="Foreground" />
                        </Trigger>
                        <Trigger Value="{x:Null}" Property="Content">
                            <Setter TargetName="contentPresenter" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                        <Trigger Value="{x:Null}" Property="hc:IconElement.Geometry">
                            <Setter TargetName="PathMain" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="contentPresenter" Property="Margin" Value="0" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                    <Border Name="BorderRoot" Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}">
                        <StackPanel Orientation="Horizontal" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Margin="{TemplateBinding Padding}">
                            <Path Name="PathMain" Width="{TemplateBinding Width}" Height="{TemplateBinding Height}" Fill="{TemplateBinding Foreground}" SnapsToDevicePixels="True" Stretch="Uniform" Data="{TemplateBinding Geometry}" />
                            <ContentPresenter Name="contentPresenter" RecognizesAccessKey="True" VerticalAlignment="Center" Margin="6,0,0,0" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        </StackPanel>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="TextBlockBaseStyle" TargetType="{x:Type TextBlock}">
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="Foreground" Value="{DynamicResource PrimaryTextBrush}" />
    </Style>
    <Style x:Key="TextBlockBoldBaseStyle" BasedOn="{StaticResource TextBlockBaseStyle}" TargetType="{x:Type TextBlock}">
        <Setter Property="TextBlock.FontWeight" Value="Bold" />
    </Style>
    <Style x:Key="HighlightTextBlockBaseStyle" TargetType="{x:Type hc:HighlightTextBlock}">
        <Setter Property="hc:HighlightTextBlock.HighlightBrush" Value="{DynamicResource PrimaryBrush}" />
        <Setter Property="hc:HighlightTextBlock.HighlightTextBrush" Value="{DynamicResource TextIconBrush}" />
    </Style>
    <Style x:Key="LabelBaseStyle" TargetType="{x:Type Label}">
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="UIElement.Opacity" Value="0.4" />
            </Trigger>
        </Style.Triggers>
        <Setter Property="Foreground" Value="{DynamicResource TextIconBrush}" />
        <Setter Property="Background" Value="{DynamicResource RegionBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
        <Setter Property="hc:BorderElement.CornerRadius" Value="{StaticResource DefaultCornerRadius}" />
        <Setter Property="Padding" Value="{StaticResource DefaultControlPadding}" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Label}">
                    <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="true" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}">
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <ControlTemplate x:Key="SliderThumb" TargetType="{x:Type Thumb}">
        <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsMouseOver" Value="True">
                <Setter Value="{StaticResource EffectShadow2}" Property="UIElement.Effect" />
            </Trigger>
            <EventTrigger RoutedEvent="PreviewMouseLeftButtonDown">
                <EventTrigger.Actions>
                    <BeginStoryboard>
                        <Storyboard>
                            <ThicknessAnimation To="2" Duration="0:0:.1" TargetName="BorderDot" TargetProperty="BorderThickness" />
                        </Storyboard>
                    </BeginStoryboard>
                </EventTrigger.Actions>
            </EventTrigger>
            <EventTrigger RoutedEvent="PreviewMouseLeftButtonUp">
                <EventTrigger.Actions>
                    <BeginStoryboard>
                        <Storyboard>
                            <ThicknessAnimation To="0" Duration="0:0:.1" TargetName="BorderDot" TargetProperty="BorderThickness" />
                        </Storyboard>
                    </BeginStoryboard>
                </EventTrigger.Actions>
            </EventTrigger>
        </ControlTemplate.Triggers>
        <hc:AxleCanvas>
            <Border Name="BorderDot" Bottom="0" Effect="{StaticResource EffectShadow1}" BorderThickness="0" BorderBrush="{DynamicResource PrimaryBrush}" Width="18" Height="18" Background="White" CornerRadius="9" />
        </hc:AxleCanvas>
    </ControlTemplate>
    <ControlTemplate x:Key="CompareSliderThumbHorizontal" TargetType="{x:Type Thumb}">
        <ControlTemplate.Resources>
            <Storyboard Name="Storyboard1">
                <DoubleAnimationUsingKeyFrames TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(TranslateTransform.X)" TargetName="PathLeft">
                    <EasingDoubleKeyFrame KeyTime="0" Value="-2" />
                </DoubleAnimationUsingKeyFrames>
                <DoubleAnimationUsingKeyFrames TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(TranslateTransform.X)" TargetName="PathRight">
                    <EasingDoubleKeyFrame KeyTime="0" Value="2" />
                </DoubleAnimationUsingKeyFrames>
            </Storyboard>
            <Storyboard Name="Storyboard2">
                <DoubleAnimationUsingKeyFrames TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(TranslateTransform.X)" TargetName="PathLeft">
                    <EasingDoubleKeyFrame KeyTime="0" Value="0" />
                </DoubleAnimationUsingKeyFrames>
                <DoubleAnimationUsingKeyFrames TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(TranslateTransform.X)" TargetName="PathRight">
                    <EasingDoubleKeyFrame KeyTime="0" Value="0" />
                </DoubleAnimationUsingKeyFrames>
            </Storyboard>
        </ControlTemplate.Resources>
        <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsMouseOver" Value="true">
                <Setter TargetName="grip" Value="{DynamicResource PrimaryBrush}" Property="Background" />
                <Setter TargetName="PathLeft" Property="Stroke" Value="White" />
                <Setter TargetName="PathRight" Property="Stroke" Value="White" />
            </Trigger>
            <Trigger Property="Thumb.IsDragging" Value="true">
                <Trigger.EnterActions>
                    <BeginStoryboard Storyboard="{StaticResource Storyboard1}" />
                </Trigger.EnterActions>
                <Trigger.ExitActions>
                    <BeginStoryboard Storyboard="{StaticResource Storyboard2}" />
                </Trigger.ExitActions>
            </Trigger>
        </ControlTemplate.Triggers>
        <hc:SimplePanel>
            <Border Width="1" HorizontalAlignment="Center">
                <Border.Background>
                    <DrawingBrush CachingHint="Cache" Viewport="0,0,1,8" ViewportUnits="Absolute" Stretch="None" TileMode="Tile">
                        <DrawingBrush.Drawing>
                            <DrawingGroup>
                                <GeometryDrawing Brush="{DynamicResource BorderBrush}">
                                    <GeometryDrawing.Geometry>
                                        <GeometryGroup>
                                            <RectangleGeometry Rect="0,0,1,4" />
                                        </GeometryGroup>
                                    </GeometryDrawing.Geometry>
                                </GeometryDrawing>
                            </DrawingGroup>
                        </DrawingBrush.Drawing>
                    </DrawingBrush>
                </Border.Background>
            </Border>
            <Border Name="grip" Width="30" Height="30" CornerRadius="15" BorderThickness="1" BorderBrush="{DynamicResource BorderBrush}" Background="White">
                <hc:SimplePanel Width="30" Height="30" Margin="-1,-1,0,0">
                    <Path Name="PathLeft" Data="{StaticResource LeftGeometry}" StrokeThickness="1" Stroke="{DynamicResource PrimaryBrush}" Margin="6,8" HorizontalAlignment="Left" Stretch="Uniform" Width="12" Height="12" RenderTransformOrigin="0.5,0.5">
                        <Path.RenderTransform>
                            <TransformGroup>
                                <TranslateTransform />
                            </TransformGroup>
                        </Path.RenderTransform>
                    </Path>
                    <Path Name="PathRight" Data="{StaticResource RightGeometry}" StrokeThickness="1" Stroke="{DynamicResource PrimaryBrush}" Margin="6,8" HorizontalAlignment="Right" Stretch="Uniform" Width="12" Height="12" RenderTransformOrigin="0.5,0.5">
                        <Path.RenderTransform>
                            <TransformGroup>
                                <TranslateTransform />
                            </TransformGroup>
                        </Path.RenderTransform>
                    </Path>
                </hc:SimplePanel>
            </Border>
        </hc:SimplePanel>
    </ControlTemplate>
    <ControlTemplate x:Key="CompareSliderHorizontal" TargetType="{x:Type hc:CompareSlider}">
        <Border Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
            <hc:CompareTrack Name="PART_Track" Thumb="{Thumb Name=Thumb, Focusable=False, OverridesDefaultStyle=True, Template={StaticResource CompareSliderThumbHorizontal}, Width=30, Margin=-15,0}">
                <hc:CompareTrack.DecreaseRepeatButton>
                    <RepeatButton Command="{x:Static Slider.DecreaseLarge}" Style="{StaticResource CompareSliderRepeatButtonTransparent}">
                        <ContentPresenter ContentSource="TargetContent" HorizontalAlignment="Left" Width="{TemplateBinding ActualWidth}" />
                    </RepeatButton>
                </hc:CompareTrack.DecreaseRepeatButton>
                <hc:CompareTrack.IncreaseRepeatButton>
                    <RepeatButton Command="{x:Static Slider.IncreaseLarge}" Style="{StaticResource CompareSliderRepeatButtonTransparent}">
                        <ContentPresenter ContentSource="SourceContent" HorizontalAlignment="Right" Width="{TemplateBinding ActualWidth}" />
                    </RepeatButton>
                </hc:CompareTrack.IncreaseRepeatButton>
            </hc:CompareTrack>
        </Border>
    </ControlTemplate>
    <ControlTemplate x:Key="CompareSliderThumbVertical" TargetType="{x:Type Thumb}">
        <ControlTemplate.Resources>
            <Storyboard Name="Storyboard1">
                <DoubleAnimationUsingKeyFrames TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(TranslateTransform.Y)" TargetName="PathUp">
                    <EasingDoubleKeyFrame KeyTime="0" Value="-2" />
                </DoubleAnimationUsingKeyFrames>
                <DoubleAnimationUsingKeyFrames TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(TranslateTransform.Y)" TargetName="PathDown">
                    <EasingDoubleKeyFrame KeyTime="0" Value="2" />
                </DoubleAnimationUsingKeyFrames>
            </Storyboard>
            <Storyboard Name="Storyboard2">
                <DoubleAnimationUsingKeyFrames TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(TranslateTransform.Y)" TargetName="PathUp">
                    <EasingDoubleKeyFrame KeyTime="0" Value="0" />
                </DoubleAnimationUsingKeyFrames>
                <DoubleAnimationUsingKeyFrames TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(TranslateTransform.Y)" TargetName="PathDown">
                    <EasingDoubleKeyFrame KeyTime="0" Value="0" />
                </DoubleAnimationUsingKeyFrames>
            </Storyboard>
        </ControlTemplate.Resources>
        <ControlTemplate.Triggers>
            <Trigger SourceName="grip" Property="UIElement.IsMouseOver" Value="true">
                <Setter TargetName="grip" Value="{DynamicResource PrimaryBrush}" Property="Background" />
                <Setter TargetName="PathUp" Property="Stroke" Value="White" />
                <Setter TargetName="PathDown" Property="Stroke" Value="White" />
            </Trigger>
            <Trigger Property="Thumb.IsDragging" Value="true">
                <Trigger.EnterActions>
                    <BeginStoryboard Storyboard="{StaticResource Storyboard1}" />
                </Trigger.EnterActions>
                <Trigger.ExitActions>
                    <BeginStoryboard Storyboard="{StaticResource Storyboard2}" />
                </Trigger.ExitActions>
                <Setter TargetName="grip" Value="{DynamicResource PrimaryBrush}" Property="Background" />
                <Setter TargetName="PathUp" Property="Stroke" Value="White" />
                <Setter TargetName="PathDown" Property="Stroke" Value="White" />
            </Trigger>
        </ControlTemplate.Triggers>
        <hc:SimplePanel>
            <Border Height="1" VerticalAlignment="Center">
                <Border.Background>
                    <DrawingBrush CachingHint="Cache" Viewport="0,0,8,1" ViewportUnits="Absolute" Stretch="None" TileMode="Tile">
                        <DrawingBrush.Drawing>
                            <DrawingGroup>
                                <GeometryDrawing Brush="{DynamicResource BorderBrush}">
                                    <GeometryDrawing.Geometry>
                                        <GeometryGroup>
                                            <RectangleGeometry Rect="0,0,4,1" />
                                        </GeometryGroup>
                                    </GeometryDrawing.Geometry>
                                </GeometryDrawing>
                            </DrawingGroup>
                        </DrawingBrush.Drawing>
                    </DrawingBrush>
                </Border.Background>
            </Border>
            <Border Name="grip" Width="30" Height="30" CornerRadius="15" BorderThickness="1" BorderBrush="{DynamicResource BorderBrush}" Background="White">
                <hc:SimplePanel Width="30" Height="30" Margin="-1,-1,0,0">
                    <Path Name="PathUp" Data="{StaticResource UpGeometry}" StrokeThickness="1" Stroke="{DynamicResource PrimaryBrush}" Margin="9,6" VerticalAlignment="Top" Stretch="Uniform" Width="12" Height="12" RenderTransformOrigin="0.5,0.5">
                        <Path.RenderTransform>
                            <TransformGroup>
                                <TranslateTransform />
                            </TransformGroup>
                        </Path.RenderTransform>
                    </Path>
                    <Path Name="PathDown" Data="{StaticResource DownGeometry}" StrokeThickness="1" Stroke="{DynamicResource PrimaryBrush}" Margin="9,6" VerticalAlignment="Bottom" Stretch="Uniform" Width="12" Height="12" RenderTransformOrigin="0.5,0.5">
                        <Path.RenderTransform>
                            <TransformGroup>
                                <TranslateTransform />
                            </TransformGroup>
                        </Path.RenderTransform>
                    </Path>
                </hc:SimplePanel>
            </Border>
        </hc:SimplePanel>
    </ControlTemplate>
    <ControlTemplate x:Key="CompareSliderVertical" TargetType="{x:Type hc:CompareSlider}">
        <Border Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
            <hc:CompareTrack Name="PART_Track" Thumb="{Thumb Name=Thumb, Focusable=False, OverridesDefaultStyle=True, Template={StaticResource CompareSliderThumbVertical}, Height=30, Margin=0,-15}">
                <hc:CompareTrack.DecreaseRepeatButton>
                    <RepeatButton Command="{x:Static Slider.DecreaseLarge}" Style="{StaticResource CompareSliderRepeatButtonTransparent}">
                        <ContentPresenter ContentSource="TargetContent" VerticalAlignment="Bottom" Height="{TemplateBinding ActualHeight}" />
                    </RepeatButton>
                </hc:CompareTrack.DecreaseRepeatButton>
                <hc:CompareTrack.IncreaseRepeatButton>
                    <RepeatButton Command="{x:Static Slider.IncreaseLarge}" Style="{StaticResource CompareSliderRepeatButtonTransparent}">
                        <ContentPresenter ContentSource="SourceContent" VerticalAlignment="Top" Height="{TemplateBinding ActualHeight}" />
                    </RepeatButton>
                </hc:CompareTrack.IncreaseRepeatButton>
            </hc:CompareTrack>
        </Border>
    </ControlTemplate>
    <Style x:Key="CompareSliderBaseStyle" TargetType="{x:Type hc:CompareSlider}">
        <Style.Triggers>
            <Trigger Property="Slider.Orientation" Value="Vertical">
                <Setter Property="Template" Value="{StaticResource CompareSliderVertical}" />
            </Trigger>
        </Style.Triggers>
        <Setter Property="Focusable" Value="False" />
        <Setter Property="Stylus.IsPressAndHoldEnabled" Value="false" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
        <Setter Property="MinWidth" Value="30" />
        <Setter Property="MinHeight" Value="30" />
        <Setter Property="Template" Value="{StaticResource CompareSliderHorizontal}" />
    </Style>
    <ControlTemplate x:Key="PreviewSliderThumb" TargetType="{x:Type Thumb}">
        <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsMouseOver" Value="True">
                <Setter Value="{StaticResource EffectShadow2}" Property="UIElement.Effect" />
            </Trigger>
            <EventTrigger RoutedEvent="PreviewMouseLeftButtonDown">
                <EventTrigger.Actions>
                    <BeginStoryboard>
                        <Storyboard>
                            <ThicknessAnimation To="2" Duration="0:0:.1" TargetName="BorderDot" TargetProperty="BorderThickness" />
                        </Storyboard>
                    </BeginStoryboard>
                </EventTrigger.Actions>
            </EventTrigger>
            <EventTrigger RoutedEvent="PreviewMouseLeftButtonUp">
                <EventTrigger.Actions>
                    <BeginStoryboard>
                        <Storyboard>
                            <ThicknessAnimation To="0" Duration="0:0:.1" TargetName="BorderDot" TargetProperty="BorderThickness" />
                        </Storyboard>
                    </BeginStoryboard>
                </EventTrigger.Actions>
            </EventTrigger>
        </ControlTemplate.Triggers>
        <Border Name="BorderDot" Effect="{StaticResource EffectShadow1}" BorderThickness="0" BorderBrush="{DynamicResource PrimaryBrush}" Width="18" Height="18" Background="White" CornerRadius="9" />
    </ControlTemplate>
    <ControlTemplate x:Key="PreviewSliderHorizontal" TargetType="{x:Type hc:PreviewSlider}">
        <hc:SimplePanel>
            <Border Name="TrackBackground" Background="{TemplateBinding Background}" Height="2" VerticalAlignment="center" Margin="9,0" />
            <Track Name="PART_Track" VerticalAlignment="center" Margin="9,0" DecreaseRepeatButton="{RepeatButton Command={x:Static Slider.DecreaseLarge}, Background={DynamicResource PrimaryBrush}, Style={StaticResource PreviewSliderRepeatButtonHorizontalStyle}}" IncreaseRepeatButton="{RepeatButton Command={x:Static Slider.IncreaseLarge}, Style={StaticResource PreviewSliderRepeatButtonHorizontalStyle}}" Thumb="{Thumb Name=PART_Thumb, Margin=-9,0, Focusable=False, Height=18, OverridesDefaultStyle=True, Template={StaticResource PreviewSliderThumb}, VerticalAlignment=Center, Width=18}" />
        </hc:SimplePanel>
    </ControlTemplate>
    <ControlTemplate x:Key="PreviewSliderVertical" TargetType="{x:Type hc:PreviewSlider}">
        <hc:SimplePanel>
            <Border Name="TrackBackground" Background="{TemplateBinding Background}" Width="2" HorizontalAlignment="center" Margin="0,9" />
            <Track Name="PART_Track" HorizontalAlignment="center" Margin="0,9" DecreaseRepeatButton="{RepeatButton Command={x:Static Slider.DecreaseLarge}, Background={DynamicResource PrimaryBrush}, Style={StaticResource PreviewSliderRepeatButtonVerticalStyle}}" IncreaseRepeatButton="{RepeatButton Command={x:Static Slider.IncreaseLarge}, Style={StaticResource PreviewSliderRepeatButtonVerticalStyle}}" Thumb="{Thumb Name=PART_Thumb, Margin=0,-9, Focusable=False, Height=18, OverridesDefaultStyle=True, Template={StaticResource PreviewSliderThumb}, HorizontalAlignment=Center, Width=18}" />
        </hc:SimplePanel>
    </ControlTemplate>
    <Style x:Key="PreviewSliderBaseStyle" TargetType="{x:Type hc:PreviewSlider}">
        <Style.Triggers>
            <Trigger Property="Slider.Orientation" Value="Vertical">
                <Setter Property="Template" Value="{StaticResource PreviewSliderVertical}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="UIElement.Opacity" Value=".4" />
            </Trigger>
        </Style.Triggers>
        <Setter Property="Stylus.IsPressAndHoldEnabled" Value="false" />
        <Setter Property="Slider.IsMoveToPointEnabled" Value="True" />
        <Setter Property="Background" Value="{DynamicResource SecondaryRegionBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
        <Setter Property="Template" Value="{StaticResource PreviewSliderHorizontal}" />
    </Style>
    <ControlTemplate x:Key="RangeSliderThumb" TargetType="{x:Type hc:RangeThumb}">
        <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsMouseOver" Value="True">
                <Setter Value="{StaticResource EffectShadow2}" Property="UIElement.Effect" />
            </Trigger>
            <EventTrigger RoutedEvent="PreviewMouseLeftButtonDown">
                <EventTrigger.Actions>
                    <BeginStoryboard>
                        <Storyboard>
                            <ThicknessAnimation To="2" Duration="0:0:.1" TargetName="BorderDot" TargetProperty="BorderThickness" />
                        </Storyboard>
                    </BeginStoryboard>
                </EventTrigger.Actions>
            </EventTrigger>
            <EventTrigger RoutedEvent="PreviewMouseLeftButtonUp">
                <EventTrigger.Actions>
                    <BeginStoryboard>
                        <Storyboard>
                            <ThicknessAnimation To="0" Duration="0:0:.1" TargetName="BorderDot" TargetProperty="BorderThickness" />
                        </Storyboard>
                    </BeginStoryboard>
                </EventTrigger.Actions>
            </EventTrigger>
        </ControlTemplate.Triggers>
        <Border Name="BorderDot" Effect="{StaticResource EffectShadow1}" BorderThickness="0" BorderBrush="{DynamicResource PrimaryBrush}" Width="18" Height="18" Background="White" CornerRadius="9" />
    </ControlTemplate>
    <Style x:Key="ToggleButtonBaseStyle" BasedOn="{StaticResource ButtonBaseBaseStyle}" TargetType="{x:Type ToggleButton}">
        <Style.Triggers>
            <Trigger Property="UIElement.IsMouseOver" Value="True">
                <Setter Property="UIElement.Opacity" Value=".9" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="UIElement.Opacity" Value=".6" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="UIElement.Opacity" Value="0.4" />
            </Trigger>
        </Style.Triggers>
        <Setter Property="hc:BorderElement.CornerRadius" Value="{StaticResource DefaultCornerRadius}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <ControlTemplate.Triggers>
                        <Trigger Property="ToggleButton.IsChecked" Value="true">
                            <Setter TargetName="BorderChecked" Property="Visibility" Value="Visible" />
                        </Trigger>
                        <Trigger Value="{x:Null}" Property="Content">
                            <Setter TargetName="ContentPresenterMain" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                        <Trigger Value="{x:Null}" Property="hc:IconElement.Geometry">
                            <Setter TargetName="PathMain" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="ContentPresenterMain" Property="Margin" Value="0" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                    <hc:SimplePanel>
                        <Border Background="{TemplateBinding Background}" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}" />
                        <Border BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}">
                            <StackPanel Orientation="Horizontal" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Margin="{TemplateBinding Padding}">
                                <Path Name="PathMain" Width="{TemplateBinding Width}" Height="{TemplateBinding Height}" Fill="{TemplateBinding Foreground}" SnapsToDevicePixels="True" Stretch="Uniform" Data="{TemplateBinding Geometry}" />
                                <ContentPresenter Name="ContentPresenterMain" RecognizesAccessKey="True" VerticalAlignment="Center" Margin="6,0,0,0" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                            </StackPanel>
                        </Border>
                        <Border Name="BorderChecked" Margin="-1" Visibility="Collapsed" BorderThickness="4" BorderBrush="{DynamicResource DarkMaskBrush}" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}" />
                    </hc:SimplePanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ToggleButtonSwitchBaseStyle" BasedOn="{StaticResource BaseStyle}" TargetType="{x:Type ToggleButton}">
        <Setter Property="FrameworkElement.FocusVisualStyle">
            <Setter.Value>
                <Style>
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate>
                                <Rectangle Style="{StaticResource RectangleFocusVisualCircular}" />
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </Setter.Value>
        </Setter>
        <Setter Property="Background" Value="{DynamicResource SecondaryRegionBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Padding" Value="6,0,0,0" />
        <Setter Property="MinWidth" Value="36" />
        <Setter Property="Height" Value="22" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <ControlTemplate.Resources>
                        <Storyboard Name="StoryboardChecked">
                            <DoubleAnimationUsingKeyFrames TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(TranslateTransform.X)" TargetName="thumb">
                                <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="14" EasingFunction="{PowerEase EasingMode=EaseOut}" />
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames TargetProperty="Opacity" TargetName="lightBorder">
                                <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="1" />
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)" TargetName="innerBorder">
                                <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="0" EasingFunction="{PowerEase EasingMode=EaseOut}" />
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)" TargetName="innerBorder">
                                <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="0" EasingFunction="{PowerEase EasingMode=EaseOut}" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard Name="StoryboardUnChecked">
                            <DoubleAnimationUsingKeyFrames TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(TranslateTransform.X)" TargetName="thumb">
                                <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="0" EasingFunction="{PowerEase EasingMode=EaseOut}" />
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames TargetProperty="Opacity" TargetName="lightBorder">
                                <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="0" />
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)" TargetName="innerBorder">
                                <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="1" EasingFunction="{PowerEase EasingMode=EaseOut}" />
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)" TargetName="innerBorder">
                                <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="1" EasingFunction="{PowerEase EasingMode=EaseOut}" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </ControlTemplate.Resources>
                    <ControlTemplate.Triggers>
                        <Trigger Property="HasContent" Value="true">
                            <Setter TargetName="contentPresenter" Property="Visibility" Value="Visible" />
                        </Trigger>
                        <Trigger Property="ToggleButton.IsChecked" Value="true">
                            <Trigger.EnterActions>
                                <BeginStoryboard Storyboard="{StaticResource StoryboardChecked}" />
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard Storyboard="{StaticResource StoryboardUnChecked}" />
                            </Trigger.ExitActions>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="UIElement.Opacity" Value="0.4" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                    <Viewbox>
                        <Grid Name="templateRoot" Background="Transparent" SnapsToDevicePixels="True">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition Width="*" />
                            </Grid.ColumnDefinitions>
                            <Border Name="backBorder" Height="22" Width="36" Background="{DynamicResource BorderBrush}" CornerRadius="11" />
                            <Border Name="lightBorder" Grid.Column="0" Height="22" Width="36" Opacity="0" Background="{DynamicResource PrimaryBrush}" CornerRadius="11" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" />
                            <Border Name="innerBorder" Grid.Column="0" Height="20" Margin="1" Background="{TemplateBinding Background}" CornerRadius="11" RenderTransformOrigin=".8,0.5">
                                <Border.RenderTransform>
                                    <TransformGroup>
                                        <ScaleTransform />
                                    </TransformGroup>
                                </Border.RenderTransform>
                            </Border>
                            <hc:SimplePanel Grid.Column="0" Margin="1">
                                <Border Name="thumb" HorizontalAlignment="Left" CornerRadius="10" Effect="{StaticResource EffectShadow2}" Background="White" Width="20" Height="20" RenderTransformOrigin="0.5,0.5">
                                    <Border.RenderTransform>
                                        <TransformGroup>
                                            <TranslateTransform />
                                        </TransformGroup>
                                    </Border.RenderTransform>
                                </Border>
                            </hc:SimplePanel>
                            <ContentPresenter Name="contentPresenter" Visibility="Collapsed" Grid.Column="1" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                        </Grid>
                    </Viewbox>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ToggleButtonIconBaseStyle" BasedOn="{StaticResource BaseStyle}" TargetType="{x:Type ToggleButton}">
        <Style.Triggers>
            <Trigger Property="UIElement.IsMouseOver" Value="True">
                <Setter Property="UIElement.Opacity" Value=".9" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="UIElement.Opacity" Value=".6" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="UIElement.Opacity" Value="0.4" />
            </Trigger>
        </Style.Triggers>
        <Setter Property="Foreground" Value="{DynamicResource TextIconBrush}" />
        <Setter Property="Width" Value="{StaticResource DefaultControlHeight}" />
        <Setter Property="Height" Value="{StaticResource DefaultControlHeight}" />
        <Setter Property="Padding" Value="8" />
        <Setter Property="hc:IconElement.Geometry" Value="{x:Null}" />
        <Setter Property="hc:IconSwitchElement.GeometrySelected" Value="{x:Null}" />
        <Setter Property="hc:BorderElement.CornerRadius" Value="{StaticResource DefaultCornerRadius}" />
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <ControlTemplate.Triggers>
                        <Trigger Property="ToggleButton.IsChecked" Value="True">
                            <Setter TargetName="PathIcon" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(hc:IconSwitchElement.GeometrySelected)}" Property="Data" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                    <hc:SimplePanel>
                        <Border Background="{TemplateBinding Background}" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}" />
                        <Border BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}">
                            <ContentControl HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Margin="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
                                <Path Name="PathIcon" Width="{TemplateBinding Width}" Height="{TemplateBinding Height}" Fill="{TemplateBinding Foreground}" SnapsToDevicePixels="True" Stretch="Uniform" Data="{TemplateBinding Geometry}" />
                            </ContentControl>
                        </Border>
                        <Border Name="BorderChecked" Visibility="Collapsed" BorderThickness="4" BorderBrush="{TemplateBinding BorderBrush}" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}" />
                    </hc:SimplePanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ToggleButtonGroupItemBaseStyle" BasedOn="{StaticResource BaseStyle}" TargetType="{x:Type ToggleButton}">
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="UIElement.Opacity" Value="0.4" />
            </Trigger>
            <Trigger Property="ToggleButton.IsChecked" Value="True">
                <Setter Property="Panel.ZIndex" Value="{x:Static system:Int32.MaxValue}" />
            </Trigger>
            <DataTrigger Binding="{Binding Orientation , RelativeSource={RelativeSource AncestorType=hc:ButtonGroup}}" Value="Vertical">
                <Setter Property="Margin" Value="0,-1,0,0" />
            </DataTrigger>
            <Trigger Property="UIElement.IsMouseOver" Value="True">
                <Setter Property="Background" Value="{DynamicResource SecondaryRegionBrush}" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background" Value="{DynamicResource BorderBrush}" />
            </Trigger>
        </Style.Triggers>
        <Setter Property="Background" Value="{DynamicResource RegionBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="hc:BorderElement.CornerRadius" Value="0" />
        <Setter Property="Height" Value="{StaticResource DefaultControlHeight}" />
        <Setter Property="Padding" Value="10,0" />
        <Setter Property="Margin" Value="-1,0,0,0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <ControlTemplate.Triggers>
                        <Trigger Property="UIElement.IsMouseOver" Value="True">
                            <Setter Value="{DynamicResource PrimaryBrush}" TargetName="contentPresenter" Property="Foreground" />
                        </Trigger>
                        <Trigger Property="ToggleButton.IsChecked" Value="true">
                            <Setter TargetName="BorderRoot" Value="{Binding Path=(hc:VisualElement.HighlightBorderBrush), RelativeSource={RelativeSource TemplatedParent}}" Property="BorderBrush" />
                            <Setter TargetName="BorderRoot" Value="{Binding Path=(hc:VisualElement.HighlightBackground), RelativeSource={RelativeSource TemplatedParent}}" Property="Background" />
                            <Setter TargetName="contentPresenter" Value="{Binding Path=(hc:VisualElement.HighlightForeground), RelativeSource={RelativeSource TemplatedParent}}" Property="Foreground" />
                        </Trigger>
                        <Trigger Value="{x:Null}" Property="Content">
                            <Setter TargetName="contentPresenter" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                        <Trigger Value="{x:Null}" Property="hc:IconElement.Geometry">
                            <Setter TargetName="PathMain" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="contentPresenter" Property="Margin" Value="0" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                    <Border Name="BorderRoot" Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}">
                        <StackPanel Orientation="Horizontal" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Margin="{TemplateBinding Padding}">
                            <Path Name="PathMain" Width="{TemplateBinding Width}" Height="{TemplateBinding Height}" Fill="{TemplateBinding Foreground}" SnapsToDevicePixels="True" Stretch="Uniform" Data="{TemplateBinding Geometry}" />
                            <ContentPresenter Name="contentPresenter" RecognizesAccessKey="True" VerticalAlignment="Center" Margin="6,0,0,0" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        </StackPanel>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ScrollBarBaseThumbVertical" TargetType="{x:Type Thumb}">
        <Setter Property="FrameworkElement.OverridesDefaultStyle" Value="true" />
        <Setter Property="IsTabStop" Value="false" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <ControlTemplate.Resources>
                        <Storyboard Name="StoryboardMouseEnter">
                            <DoubleAnimationUsingKeyFrames TargetProperty="Width" TargetName="rectangle">
                                <EasingDoubleKeyFrame KeyTime="0:0:.1" Value="8" />
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames TargetProperty="(Rectangle.RadiusX)" TargetName="rectangle">
                                <EasingDoubleKeyFrame KeyTime="0:0:.1" Value="4" />
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames TargetProperty="(Rectangle.RadiusY)" TargetName="rectangle">
                                <EasingDoubleKeyFrame KeyTime="0:0:.1" Value="4" />
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(TranslateTransform.X)" TargetName="rectangle">
                                <EasingDoubleKeyFrame KeyTime="0:0:.1" Value="0" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard Name="StoryboardMouseLeave">
                            <DoubleAnimationUsingKeyFrames TargetProperty="Width" TargetName="rectangle">
                                <EasingDoubleKeyFrame KeyTime="0:0:.2" Value="2" />
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames TargetProperty="(Rectangle.RadiusX)" TargetName="rectangle">
                                <EasingDoubleKeyFrame KeyTime="0:0:.2" Value="1" />
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames TargetProperty="(Rectangle.RadiusY)" TargetName="rectangle">
                                <EasingDoubleKeyFrame KeyTime="0:0:.2" Value="1" />
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(TranslateTransform.X)" TargetName="rectangle">
                                <EasingDoubleKeyFrame KeyTime="0:0:.2" Value="-2" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </ControlTemplate.Resources>
                    <ControlTemplate.Triggers>
                        <Trigger Property="UIElement.IsMouseOver" Value="true">
                            <Setter TargetName="rectangle" Value="{DynamicResource SecondaryTextBrush}" Property="Fill" />
                        </Trigger>
                        <Trigger Property="Thumb.IsDragging" Value="true">
                            <Setter TargetName="rectangle" Value="{DynamicResource PrimaryTextBrush}" Property="Fill" />
                        </Trigger>
                        <EventTrigger RoutedEvent="MouseEnter">
                            <BeginStoryboard Storyboard="{StaticResource StoryboardMouseEnter}" />
                        </EventTrigger>
                        <EventTrigger RoutedEvent="MouseLeave">
                            <BeginStoryboard Storyboard="{StaticResource StoryboardMouseLeave}" />
                        </EventTrigger>
                    </ControlTemplate.Triggers>
                    <Border Width="{TemplateBinding Width}" Background="Transparent">
                        <Rectangle Name="rectangle" RadiusX="1" RadiusY="1" HorizontalAlignment="Right" Height="{TemplateBinding Height}" SnapsToDevicePixels="True" Width="2" Fill="{TemplateBinding Background}">
                            <Rectangle.RenderTransform>
                                <TransformGroup>
                                    <TranslateTransform X="-2" />
                                </TransformGroup>
                            </Rectangle.RenderTransform>
                        </Rectangle>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ScrollBarBaseThumbHorizontal" TargetType="{x:Type Thumb}">
        <Setter Property="FrameworkElement.OverridesDefaultStyle" Value="true" />
        <Setter Property="IsTabStop" Value="false" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <ControlTemplate.Resources>
                        <Storyboard Name="StoryboardMouseEnter">
                            <DoubleAnimationUsingKeyFrames TargetProperty="Height" TargetName="rectangle">
                                <EasingDoubleKeyFrame KeyTime="0:0:.1" Value="8" />
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames TargetProperty="(Rectangle.RadiusX)" TargetName="rectangle">
                                <EasingDoubleKeyFrame KeyTime="0:0:.1" Value="4" />
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames TargetProperty="(Rectangle.RadiusY)" TargetName="rectangle">
                                <EasingDoubleKeyFrame KeyTime="0:0:.1" Value="4" />
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(TranslateTransform.Y)" TargetName="rectangle">
                                <EasingDoubleKeyFrame KeyTime="0:0:.1" Value="0" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard Name="StoryboardMouseLeave">
                            <DoubleAnimationUsingKeyFrames TargetProperty="Height" TargetName="rectangle">
                                <EasingDoubleKeyFrame KeyTime="0:0:.2" Value="2" />
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames TargetProperty="(Rectangle.RadiusX)" TargetName="rectangle">
                                <EasingDoubleKeyFrame KeyTime="0:0:.2" Value="1" />
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames TargetProperty="(Rectangle.RadiusY)" TargetName="rectangle">
                                <EasingDoubleKeyFrame KeyTime="0:0:.2" Value="1" />
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(TranslateTransform.Y)" TargetName="rectangle">
                                <EasingDoubleKeyFrame KeyTime="0:0:.2" Value="-2" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </ControlTemplate.Resources>
                    <ControlTemplate.Triggers>
                        <Trigger Property="UIElement.IsMouseOver" Value="true">
                            <Setter TargetName="rectangle" Value="{DynamicResource SecondaryTextBrush}" Property="Fill" />
                        </Trigger>
                        <Trigger Property="Thumb.IsDragging" Value="true">
                            <Setter TargetName="rectangle" Value="{DynamicResource PrimaryTextBrush}" Property="Fill" />
                        </Trigger>
                        <EventTrigger RoutedEvent="MouseEnter">
                            <BeginStoryboard Storyboard="{StaticResource StoryboardMouseEnter}" />
                        </EventTrigger>
                        <EventTrigger RoutedEvent="MouseLeave">
                            <BeginStoryboard Storyboard="{StaticResource StoryboardMouseLeave}" />
                        </EventTrigger>
                    </ControlTemplate.Triggers>
                    <Border Height="{TemplateBinding Height}" Background="Transparent">
                        <Rectangle Name="rectangle" RadiusX="1" RadiusY="1" VerticalAlignment="Bottom" Height="2" SnapsToDevicePixels="True" Width="{TemplateBinding Width}" Fill="{TemplateBinding Background}">
                            <Rectangle.RenderTransform>
                                <TransformGroup>
                                    <TranslateTransform Y="-2" />
                                </TransformGroup>
                            </Rectangle.RenderTransform>
                        </Rectangle>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ScrollBarBaseStyle" TargetType="{x:Type ScrollBar}">
        <Style.Triggers>
            <Trigger Property="ScrollBar.Orientation" Value="Horizontal">
                <Setter Property="Width" Value="Auto" />
                <Setter Property="MinWidth" Value="0" />
                <Setter Property="Height" Value="8" />
                <Setter Property="MinHeight" Value="8" />
                <Setter Property="BorderThickness" Value="0,1" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ScrollBar}">
                            <hc:SimplePanel Name="Bg" SnapsToDevicePixels="true">
                                <Border Background="{TemplateBinding Background}" />
                                <Track Name="PART_Track" IsEnabled="{TemplateBinding IsMouseOver}" DecreaseRepeatButton="{RepeatButton Command={x:Static ScrollBar.PageLeftCommand}, Style={StaticResource ScrollBarBaseRepeatButton}}" IncreaseRepeatButton="{RepeatButton Command={x:Static ScrollBar.PageRightCommand}, Style={StaticResource ScrollBarBaseRepeatButton}}" Thumb="{Thumb Background={TemplateBinding Foreground}, Style={StaticResource ScrollBarBaseThumbHorizontal}}" />
                            </hc:SimplePanel>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
        <Setter Property="Stylus.IsPressAndHoldEnabled" Value="false" />
        <Setter Property="Stylus.IsFlicksEnabled" Value="false" />
        <Setter Property="Foreground" Value="{DynamicResource PrimaryTextBrush}" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Focusable" Value="False" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Width" Value="8" />
        <Setter Property="MinWidth" Value="8" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ScrollBar}">
                    <hc:SimplePanel Name="Bg" SnapsToDevicePixels="true">
                        <Border Background="{TemplateBinding Background}" />
                        <Track Name="PART_Track" IsDirectionReversed="true" IsEnabled="{TemplateBinding IsMouseOver}" DecreaseRepeatButton="{RepeatButton Command={x:Static ScrollBar.PageUpCommand}, Style={StaticResource ScrollBarBaseRepeatButton}}" IncreaseRepeatButton="{RepeatButton Command={x:Static ScrollBar.PageDownCommand}, Style={StaticResource ScrollBarBaseRepeatButton}}" Thumb="{Thumb Background={TemplateBinding Foreground}, Style={StaticResource ScrollBarBaseThumbVertical}}" />
                    </hc:SimplePanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <ControlTemplate x:Key="ScrollViewerNativeBaseControlTemplate" TargetType="{x:Type ScrollViewer}">
        <ControlTemplate.Resources>
            <Storyboard Name="StoryboardMouseOver">
                <DoubleAnimationUsingKeyFrames TargetProperty="Opacity" TargetName="PART_VerticalScrollBar">
                    <EasingDoubleKeyFrame KeyTime="0:0:.1" Value=".8" />
                </DoubleAnimationUsingKeyFrames>
                <DoubleAnimationUsingKeyFrames TargetProperty="Opacity" TargetName="PART_HorizontalScrollBar">
                    <EasingDoubleKeyFrame KeyTime="0:0:.1" Value=".8" />
                </DoubleAnimationUsingKeyFrames>
            </Storyboard>
            <Storyboard Name="StoryboardCommon">
                <DoubleAnimationUsingKeyFrames TargetProperty="Opacity" TargetName="PART_VerticalScrollBar">
                    <EasingDoubleKeyFrame KeyTime="0:0:.2" Value=".3" />
                </DoubleAnimationUsingKeyFrames>
                <DoubleAnimationUsingKeyFrames TargetProperty="Opacity" TargetName="PART_HorizontalScrollBar">
                    <EasingDoubleKeyFrame KeyTime="0:0:.2" Value=".3" />
                </DoubleAnimationUsingKeyFrames>
            </Storyboard>
        </ControlTemplate.Resources>
        <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsMouseOver" Value="True">
                <Trigger.EnterActions>
                    <BeginStoryboard Storyboard="{StaticResource StoryboardMouseOver}" />
                </Trigger.EnterActions>
                <Trigger.ExitActions>
                    <BeginStoryboard Storyboard="{StaticResource StoryboardCommon}" />
                </Trigger.ExitActions>
            </Trigger>
        </ControlTemplate.Triggers>
        <Grid Name="Grid" Background="{TemplateBinding Background}">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="Auto" />
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
                <RowDefinition Height="*" />
                <RowDefinition Height="Auto" />
            </Grid.RowDefinitions>
            <ScrollContentPresenter Name="PART_ScrollContentPresenter" Grid.RowSpan="2" Grid.ColumnSpan="2" CanContentScroll="{TemplateBinding CanContentScroll}" CanHorizontallyScroll="False" CanVerticallyScroll="False" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" Grid.Column="0" Margin="{TemplateBinding Padding}" Grid.Row="0" />
            <ScrollBar Name="PART_VerticalScrollBar" Opacity=".3" Style="{StaticResource ScrollBarBaseStyle}" AutomationId="VerticalScrollBar" Cursor="Arrow" Grid.Column="1" Maximum="{TemplateBinding ScrollableHeight}" Minimum="0" Grid.Row="0" Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}" ViewportSize="{TemplateBinding ViewportHeight}" Value="{Binding VerticalOffset , Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" />
            <ScrollBar Name="PART_HorizontalScrollBar" Opacity=".3" Style="{StaticResource ScrollBarBaseStyle}" AutomationId="HorizontalScrollBar" Cursor="Arrow" Grid.Column="0" Maximum="{TemplateBinding ScrollableWidth}" Minimum="0" Orientation="Horizontal" Grid.Row="1" Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}" ViewportSize="{TemplateBinding ViewportWidth}" Value="{Binding HorizontalOffset , Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" />
        </Grid>
    </ControlTemplate>
    <ControlTemplate x:Key="ScrollViewerNativeAutoHideBaseControlTemplate" TargetType="{x:Type ScrollViewer}">
        <ControlTemplate.Resources>
            <Storyboard Name="StoryboardMouseOver">
                <DoubleAnimationUsingKeyFrames TargetProperty="Opacity" TargetName="PART_VerticalScrollBar">
                    <EasingDoubleKeyFrame KeyTime="0:0:.1" Value=".8" />
                </DoubleAnimationUsingKeyFrames>
                <DoubleAnimationUsingKeyFrames TargetProperty="Opacity" TargetName="PART_HorizontalScrollBar">
                    <EasingDoubleKeyFrame KeyTime="0:0:.1" Value=".8" />
                </DoubleAnimationUsingKeyFrames>
            </Storyboard>
            <Storyboard Name="StoryboardCommon">
                <DoubleAnimationUsingKeyFrames TargetProperty="Opacity" TargetName="PART_VerticalScrollBar">
                    <EasingDoubleKeyFrame KeyTime="0:0:.2" Value="0" />
                </DoubleAnimationUsingKeyFrames>
                <DoubleAnimationUsingKeyFrames TargetProperty="Opacity" TargetName="PART_HorizontalScrollBar">
                    <EasingDoubleKeyFrame KeyTime="0:0:.2" Value="0" />
                </DoubleAnimationUsingKeyFrames>
            </Storyboard>
        </ControlTemplate.Resources>
        <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsMouseOver" Value="True">
                <Trigger.EnterActions>
                    <BeginStoryboard Storyboard="{StaticResource StoryboardMouseOver}" />
                </Trigger.EnterActions>
                <Trigger.ExitActions>
                    <BeginStoryboard Storyboard="{StaticResource StoryboardCommon}" />
                </Trigger.ExitActions>
            </Trigger>
        </ControlTemplate.Triggers>
        <Grid Name="Grid" Background="{TemplateBinding Background}">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="Auto" />
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
                <RowDefinition Height="*" />
                <RowDefinition Height="Auto" />
            </Grid.RowDefinitions>
            <ScrollContentPresenter Name="PART_ScrollContentPresenter" Grid.RowSpan="2" Grid.ColumnSpan="2" CanContentScroll="{TemplateBinding CanContentScroll}" CanHorizontallyScroll="False" CanVerticallyScroll="False" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" Grid.Column="0" Margin="{TemplateBinding Padding}" Grid.Row="0" />
            <ScrollBar Name="PART_VerticalScrollBar" Opacity="0" Style="{StaticResource ScrollBarBaseStyle}" AutomationId="VerticalScrollBar" Cursor="Arrow" Grid.Column="1" Maximum="{TemplateBinding ScrollableHeight}" Minimum="0" Grid.Row="0" Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}" ViewportSize="{TemplateBinding ViewportHeight}" Value="{Binding VerticalOffset , Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" />
            <ScrollBar Name="PART_HorizontalScrollBar" Opacity="0" Style="{StaticResource ScrollBarBaseStyle}" AutomationId="HorizontalScrollBar" Cursor="Arrow" Grid.Column="0" Maximum="{TemplateBinding ScrollableWidth}" Minimum="0" Orientation="Horizontal" Grid.Row="1" Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}" ViewportSize="{TemplateBinding ViewportWidth}" Value="{Binding HorizontalOffset , Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" />
        </Grid>
    </ControlTemplate>
    <Style x:Key="ScrollViewerNativeBaseStyle" TargetType="{x:Type ScrollViewer}">
        <Style.Triggers>
            <Trigger Property="hc:ScrollViewerAttach.AutoHide" Value="False">
                <Setter Property="Template" Value="{StaticResource ScrollViewerNativeBaseControlTemplate}" />
            </Trigger>
        </Style.Triggers>
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
        <Setter Property="Focusable" Value="False" />
        <Setter Property="Template" Value="{StaticResource ScrollViewerNativeAutoHideBaseControlTemplate}" />
    </Style>
    <ControlTemplate x:Key="ScrollViewerBaseControlTemplate" TargetType="{x:Type hc:ScrollViewer}">
        <ControlTemplate.Resources>
            <Storyboard Name="StoryboardMouseOver">
                <DoubleAnimationUsingKeyFrames TargetProperty="Opacity" TargetName="PART_VerticalScrollBar">
                    <EasingDoubleKeyFrame KeyTime="0:0:.1" Value=".8" />
                </DoubleAnimationUsingKeyFrames>
                <DoubleAnimationUsingKeyFrames TargetProperty="Opacity" TargetName="PART_HorizontalScrollBar">
                    <EasingDoubleKeyFrame KeyTime="0:0:.1" Value=".8" />
                </DoubleAnimationUsingKeyFrames>
            </Storyboard>
            <Storyboard Name="StoryboardCommon">
                <DoubleAnimationUsingKeyFrames TargetProperty="Opacity" TargetName="PART_VerticalScrollBar">
                    <EasingDoubleKeyFrame KeyTime="0:0:.2" Value=".3" />
                </DoubleAnimationUsingKeyFrames>
                <DoubleAnimationUsingKeyFrames TargetProperty="Opacity" TargetName="PART_HorizontalScrollBar">
                    <EasingDoubleKeyFrame KeyTime="0:0:.2" Value=".3" />
                </DoubleAnimationUsingKeyFrames>
            </Storyboard>
        </ControlTemplate.Resources>
        <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsMouseOver" Value="True">
                <Trigger.EnterActions>
                    <BeginStoryboard Storyboard="{StaticResource StoryboardMouseOver}" />
                </Trigger.EnterActions>
                <Trigger.ExitActions>
                    <BeginStoryboard Storyboard="{StaticResource StoryboardCommon}" />
                </Trigger.ExitActions>
            </Trigger>
        </ControlTemplate.Triggers>
        <Grid Name="Grid" Background="{TemplateBinding Background}">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="Auto" />
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
                <RowDefinition Height="*" />
                <RowDefinition Height="Auto" />
            </Grid.RowDefinitions>
            <ScrollContentPresenter Name="PART_ScrollContentPresenter" Grid.RowSpan="2" Grid.ColumnSpan="2" CanContentScroll="{TemplateBinding CanContentScroll}" CanHorizontallyScroll="False" CanVerticallyScroll="False" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" Grid.Column="0" Margin="{TemplateBinding Padding}" Grid.Row="0" />
            <ScrollBar Name="PART_VerticalScrollBar" Style="{StaticResource ScrollBarBaseStyle}" AutomationId="VerticalScrollBar" Cursor="Arrow" Grid.Column="1" Maximum="{TemplateBinding ScrollableHeight}" Minimum="0" Grid.Row="0" Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}" ViewportSize="{TemplateBinding ViewportHeight}" Value="{Binding VerticalOffset , Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" />
            <ScrollBar Name="PART_HorizontalScrollBar" Style="{StaticResource ScrollBarBaseStyle}" AutomationId="HorizontalScrollBar" Cursor="Arrow" Grid.Column="0" Maximum="{TemplateBinding ScrollableWidth}" Minimum="0" Orientation="Horizontal" Grid.Row="1" Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}" ViewportSize="{TemplateBinding ViewportWidth}" Value="{Binding HorizontalOffset , Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" />
        </Grid>
    </ControlTemplate>
    <ControlTemplate x:Key="ScrollViewerAutoHideBaseControlTemplate" TargetType="{x:Type hc:ScrollViewer}">
        <ControlTemplate.Resources>
            <Storyboard Name="StoryboardMouseOver">
                <DoubleAnimationUsingKeyFrames TargetProperty="Opacity" TargetName="PART_VerticalScrollBar">
                    <EasingDoubleKeyFrame KeyTime="0:0:.1" Value=".8" />
                </DoubleAnimationUsingKeyFrames>
                <DoubleAnimationUsingKeyFrames TargetProperty="Opacity" TargetName="PART_HorizontalScrollBar">
                    <EasingDoubleKeyFrame KeyTime="0:0:.1" Value=".8" />
                </DoubleAnimationUsingKeyFrames>
            </Storyboard>
            <Storyboard Name="StoryboardCommon">
                <DoubleAnimationUsingKeyFrames TargetProperty="Opacity" TargetName="PART_VerticalScrollBar">
                    <EasingDoubleKeyFrame KeyTime="0:0:.2" Value="0" />
                </DoubleAnimationUsingKeyFrames>
                <DoubleAnimationUsingKeyFrames TargetProperty="Opacity" TargetName="PART_HorizontalScrollBar">
                    <EasingDoubleKeyFrame KeyTime="0:0:.2" Value="0" />
                </DoubleAnimationUsingKeyFrames>
            </Storyboard>
        </ControlTemplate.Resources>
        <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsMouseOver" Value="True">
                <Trigger.EnterActions>
                    <BeginStoryboard Storyboard="{StaticResource StoryboardMouseOver}" />
                </Trigger.EnterActions>
                <Trigger.ExitActions>
                    <BeginStoryboard Storyboard="{StaticResource StoryboardCommon}" />
                </Trigger.ExitActions>
            </Trigger>
        </ControlTemplate.Triggers>
        <Grid Name="Grid" Background="{TemplateBinding Background}">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="Auto" />
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
                <RowDefinition Height="*" />
                <RowDefinition Height="Auto" />
            </Grid.RowDefinitions>
            <ScrollContentPresenter Name="PART_ScrollContentPresenter" Grid.RowSpan="2" Grid.ColumnSpan="2" CanContentScroll="{TemplateBinding CanContentScroll}" CanHorizontallyScroll="False" CanVerticallyScroll="False" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" Grid.Column="0" Margin="{TemplateBinding Padding}" Grid.Row="0" />
            <ScrollBar Name="PART_VerticalScrollBar" Opacity="0" Style="{StaticResource ScrollBarBaseStyle}" AutomationId="VerticalScrollBar" Cursor="Arrow" Grid.Column="1" Maximum="{TemplateBinding ScrollableHeight}" Minimum="0" Grid.Row="0" Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}" ViewportSize="{TemplateBinding ViewportHeight}" Value="{Binding VerticalOffset , Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" />
            <ScrollBar Name="PART_HorizontalScrollBar" Opacity="0" Style="{StaticResource ScrollBarBaseStyle}" AutomationId="HorizontalScrollBar" Cursor="Arrow" Grid.Column="0" Maximum="{TemplateBinding ScrollableWidth}" Minimum="0" Orientation="Horizontal" Grid.Row="1" Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}" ViewportSize="{TemplateBinding ViewportWidth}" Value="{Binding HorizontalOffset , Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" />
        </Grid>
    </ControlTemplate>
    <Style x:Key="ScrollViewerBaseStyle" TargetType="{x:Type hc:ScrollViewer}">
        <Style.Triggers>
            <Trigger Property="hc:ScrollViewerAttach.AutoHide" Value="False">
                <Setter Property="Template" Value="{StaticResource ScrollViewerBaseControlTemplate}" />
            </Trigger>
        </Style.Triggers>
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
        <Setter Property="Focusable" Value="False" />
        <Setter Property="Template" Value="{StaticResource ScrollViewerAutoHideBaseControlTemplate}" />
    </Style>
    <Style x:Key="RepeatButtonBaseStyle" BasedOn="{StaticResource ButtonBaseBaseStyle}" TargetType="{x:Type RepeatButton}">
        <Style.Triggers>
            <Trigger Property="UIElement.IsMouseOver" Value="True">
                <Setter Property="UIElement.Opacity" Value=".9" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="UIElement.Opacity" Value=".6" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="UIElement.Opacity" Value="0.4" />
            </Trigger>
        </Style.Triggers>
        <Setter Property="Background" Value="{DynamicResource RegionBrush}" />
        <Setter Property="hc:BorderElement.CornerRadius" Value="{StaticResource DefaultCornerRadius}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <ControlTemplate.Triggers>
                        <Trigger Value="{x:Null}" Property="Content">
                            <Setter TargetName="ContentPresenterMain" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                        <Trigger Value="{x:Null}" Property="hc:IconElement.Geometry">
                            <Setter TargetName="PathMain" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="ContentPresenterMain" Property="Margin" Value="0" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                    <hc:SimplePanel>
                        <Border Background="{TemplateBinding Background}" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}" />
                        <Border BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}">
                            <StackPanel Orientation="Horizontal" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Margin="{TemplateBinding Padding}">
                                <Path Name="PathMain" Width="{TemplateBinding Width}" Height="{TemplateBinding Height}" Fill="{TemplateBinding Foreground}" SnapsToDevicePixels="True" Stretch="Uniform" Data="{TemplateBinding Geometry}" />
                                <ContentPresenter Name="ContentPresenterMain" RecognizesAccessKey="True" VerticalAlignment="Center" Margin="6,0,0,0" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                            </StackPanel>
                        </Border>
                    </hc:SimplePanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="RepeatButtonDashedBaseStyle" BasedOn="{StaticResource RepeatButtonBaseStyle}" TargetType="{x:Type RepeatButton}">
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <ControlTemplate.Triggers>
                        <Trigger Value="{x:Null}" Property="Content">
                            <Setter TargetName="ContentPresenterMain" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                        <Trigger Value="{x:Null}" Property="hc:IconElement.Geometry">
                            <Setter TargetName="PathMain" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="ContentPresenterMain" Property="Margin" Value="0" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                    <hc:DashedBorder BorderDashArray="3,2" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" Background="Transparent" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}">
                        <StackPanel Orientation="Horizontal" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Margin="{TemplateBinding Padding}">
                            <Path Name="PathMain" Width="{TemplateBinding Width}" Height="{TemplateBinding Height}" Fill="{TemplateBinding Foreground}" SnapsToDevicePixels="True" Stretch="Uniform" Data="{TemplateBinding Geometry}" />
                            <ContentPresenter Name="ContentPresenterMain" RecognizesAccessKey="True" VerticalAlignment="Center" Margin="6,0,0,0" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        </StackPanel>
                    </hc:DashedBorder>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="GroupBoxBaseStyle" TargetType="{x:Type GroupBox}">
        <Style.Triggers>
            <Trigger Property="hc:TitleElement.TitlePlacement" Value="Left">
                <Setter Property="Template" Value="{StaticResource GroupBoxBaseLeftTemplate}" />
            </Trigger>
        </Style.Triggers>
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
        <Setter Property="Background" Value="{DynamicResource SecondaryRegionBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource PrimaryTextBrush}" />
        <Setter Property="hc:TitleElement.Background" Value="{DynamicResource SecondaryRegionBrush}" />
        <Setter Property="hc:TitleElement.TitlePlacement" Value="Top" />
        <Setter Property="hc:BorderElement.CornerRadius" Value="{StaticResource DefaultCornerRadius}" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Padding" Value="4" />
        <Setter Property="Template" Value="{StaticResource GroupBoxBaseTopTemplate}" />
    </Style>
    <ControlTemplate x:Key="GroupBoxOriginalTopTemplate" TargetType="{x:Type GroupBox}">
        <Grid>
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition />
            </Grid.RowDefinitions>
            <StackPanel Orientation="Horizontal" Margin="8,6">
                <ContentPresenter Foreground="{TemplateBinding Foreground}" Margin="1,0,0,0" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" ContentSource="Header" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                <ContentPresenter Foreground="{DynamicResource DangerBrush}" Margin="4,0,0,0" Content="{Binding Path=(hc:InfoElement.Symbol), RelativeSource={RelativeSource TemplatedParent}}" Visibility="{Binding Path=(hc:InfoElement.Necessary), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource Boolean2VisibilityConverter}}" />
            </StackPanel>
            <Border Grid.Row="1" Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}">
                <ContentPresenter Margin="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
            </Border>
        </Grid>
    </ControlTemplate>
    <ControlTemplate x:Key="GroupBoxOriginalLeftTemplate" TargetType="{x:Type GroupBox}">
        <Grid>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="{Binding Path=(hc:InfoElement.TitleWidth), RelativeSource={RelativeSource TemplatedParent}}" />
                <ColumnDefinition />
            </Grid.ColumnDefinitions>
            <StackPanel Orientation="Horizontal" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Margin="0,8,6,8">
                <ContentPresenter Foreground="{TemplateBinding Foreground}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" ContentSource="Header" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                <ContentPresenter Foreground="{DynamicResource DangerBrush}" Margin="4,0,0,0" Content="{Binding Path=(hc:InfoElement.Symbol), RelativeSource={RelativeSource TemplatedParent}}" Visibility="{Binding Path=(hc:InfoElement.Necessary), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource Boolean2VisibilityConverter}}" />
            </StackPanel>
            <Border Grid.Column="1" Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}">
                <ContentPresenter Margin="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
            </Border>
        </Grid>
    </ControlTemplate>
    <Style x:Key="GroupBoxOriginalBaseStyle" BasedOn="{StaticResource GroupBoxBaseStyle}" TargetType="{x:Type GroupBox}">
        <Style.Triggers>
            <Trigger Property="hc:TitleElement.TitlePlacement" Value="Left">
                <Setter Property="Template" Value="{StaticResource GroupBoxOriginalLeftTemplate}" />
            </Trigger>
        </Style.Triggers>
        <Setter Property="hc:BorderElement.CornerRadius" Value="0" />
        <Setter Property="VerticalContentAlignment" Value="Top" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Padding" Value="0" />
        <Setter Property="Template" Value="{StaticResource GroupBoxOriginalTopTemplate}" />
    </Style>
    <Style x:Key="GroupBoxTabBaseStyle" BasedOn="{StaticResource GroupBoxBaseStyle}" TargetType="{x:Type GroupBox}">
        <Style.Triggers>
            <Trigger Property="hc:TitleElement.TitlePlacement" Value="Left">
                <Setter Property="Template" Value="{StaticResource GroupBoxTabLeftTemplate}" />
            </Trigger>
        </Style.Triggers>
        <Setter Property="Template" Value="{StaticResource GroupBoxTabTopTemplate}" />
    </Style>
    <Style x:Key="ButtonGroupBaseStyle" TargetType="{x:Type hc:ButtonGroup}">
        <Style.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="hc:ButtonGroup.Layout" Value="Uniform" />
                    <Condition Property="hc:ButtonGroup.Orientation" Value="Vertical" />
                </MultiTrigger.Conditions>
                <Setter Property="ItemsPanel" Value="{StaticResource ButtonGroupVerticalUniformItemsPanelTemplate}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="hc:ButtonGroup.Layout" Value="Stack" />
                    <Condition Property="hc:ButtonGroup.Orientation" Value="Horizontal" />
                </MultiTrigger.Conditions>
                <Setter Property="ItemsPanel" Value="{StaticResource ButtonGroupHorizontalStackItemsPanelTemplate}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="hc:ButtonGroup.Layout" Value="Stack" />
                    <Condition Property="hc:ButtonGroup.Orientation" Value="Vertical" />
                </MultiTrigger.Conditions>
                <Setter Property="ItemsPanel" Value="{StaticResource ButtonGroupVerticalStackItemsPanelTemplate}" />
            </MultiTrigger>
        </Style.Triggers>
        <Setter Property="ItemContainerStyleSelector" Value="{StaticResource ButtonGroupItemStyleSelector}" />
        <Setter Property="VerticalAlignment" Value="Top" />
        <Setter Property="hc:ButtonGroup.Layout" Value="Uniform" />
        <Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="Focusable" Value="False" />
        <Setter Property="ItemsPanel" Value="{StaticResource ButtonGroupHorizontalUniformItemsPanelTemplate}" />
        <Setter Property="hc:VisualElement.HighlightBorderBrush" Value="{DynamicResource PrimaryBrush}" />
        <Setter Property="hc:VisualElement.HighlightBackground" Value="{DynamicResource RegionBrush}" />
        <Setter Property="hc:VisualElement.HighlightForeground" Value="{DynamicResource PrimaryBrush}" />
    </Style>
    <Style x:Key="ProgressBarBaseStyle" TargetType="{x:Type ProgressBar}">
        <Setter Property="hc:VisualElement.Text">
            <Setter.Value>
                <MultiBinding Converter="{StaticResource Number2PercentageConverter}" StringFormat="{0:F0} %">
                    <Binding Path="Value" RelativeSource="{RelativeSource Self}" />
                    <Binding Path="Maximum" RelativeSource="{RelativeSource Self}" />
                </MultiBinding>
            </Setter.Value>
        </Setter>
        <Setter Property="Height" Value="20" />
        <Setter Property="hc:BorderElement.CornerRadius" Value="{StaticResource DefaultCornerRadius}" />
        <Setter Property="Background" Value="{DynamicResource SecondaryRegionBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ProgressBar}">
                    <ControlTemplate.Resources>
                        <Storyboard Name="IsIndeterminate" RepeatBehavior="Forever">
                            <DoubleAnimationUsingKeyFrames TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)" TargetName="Animation">
                                <EasingDoubleKeyFrame KeyTime="0" Value="0.25" />
                                <EasingDoubleKeyFrame KeyTime="0:0:1" Value="0.25" />
                                <EasingDoubleKeyFrame KeyTime="0:0:2" Value="0.25" />
                            </DoubleAnimationUsingKeyFrames>
                            <PointAnimationUsingKeyFrames TargetProperty="(UIElement.RenderTransformOrigin)" TargetName="Animation">
                                <EasingPointKeyFrame KeyTime="0" Value="-0.5,0.5" />
                                <EasingPointKeyFrame KeyTime="0:0:1" Value="0.5,0.5" />
                                <EasingPointKeyFrame KeyTime="0:0:2" Value="1.5,0.5" />
                            </PointAnimationUsingKeyFrames>
                        </Storyboard>
                    </ControlTemplate.Resources>
                    <ControlTemplate.Triggers>
                        <Trigger Property="ProgressBar.Orientation" Value="Vertical">
                            <Setter Value="{x:Static system:Double.NaN}" Property="Height" />
                            <Setter TargetName="TemplateRoot" Property="FrameworkElement.LayoutTransform" Value="{RotateTransform Angle=-90}" />
                        </Trigger>
                        <Trigger Property="ProgressBar.IsIndeterminate" Value="true">
                            <Trigger.EnterActions>
                                <BeginStoryboard Storyboard="{StaticResource IsIndeterminate}" />
                            </Trigger.EnterActions>
                            <Setter TargetName="Indicator" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="PART_GlowRect" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="Animation" Property="Visibility" Value="Visible" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                    <Border Name="TemplateRoot" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}">
                        <hc:SimplePanel>
                            <Rectangle Name="PART_Track" />
                            <TextBlock HorizontalAlignment="Center" VerticalAlignment="Center" Foreground="{TemplateBinding Foreground}" Visibility="{Binding Visibility , ElementName=PART_GlowRect}" Text="{Binding Path=(hc:VisualElement.Text), RelativeSource={RelativeSource TemplatedParent}}" />
                            <Border Name="PART_Indicator" Style="{StaticResource BorderClip}" HorizontalAlignment="Left" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}">
                                <hc:SimplePanel>
                                    <Border Name="Indicator" Background="{TemplateBinding Foreground}">
                                        <Border Width="{Binding ActualWidth , ElementName=TemplateRoot}">
                                            <TextBlock HorizontalAlignment="Center" VerticalAlignment="Center" Foreground="{DynamicResource TextIconBrush}" Text="{Binding Path=(hc:VisualElement.Text), RelativeSource={RelativeSource TemplatedParent}}" />
                                        </Border>
                                    </Border>
                                    <Rectangle Name="PART_GlowRect" Fill="{StaticResource ProgressBarIndicatorAnimatedFill}" HorizontalAlignment="Left" Margin="-100,0,0,0" Width="100" />
                                    <Rectangle Name="Animation" Visibility="Collapsed" Fill="{TemplateBinding Foreground}" RenderTransformOrigin="0.5,0.5">
                                        <Rectangle.RenderTransform>
                                            <TransformGroup>
                                                <ScaleTransform />
                                            </TransformGroup>
                                        </Rectangle.RenderTransform>
                                    </Rectangle>
                                </hc:SimplePanel>
                            </Border>
                        </hc:SimplePanel>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ProgressBarStripeBaseStyle" TargetType="{x:Type ProgressBar}">
        <Setter Property="Height" Value="20" />
        <Setter Property="hc:BorderElement.CornerRadius" Value="{StaticResource DefaultCornerRadius}" />
        <Setter Property="Background" Value="{DynamicResource SecondaryRegionBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ProgressBar}">
                    <ControlTemplate.Resources>
                        <Storyboard Name="OnLoaded">
                            <DoubleAnimationUsingKeyFrames RepeatBehavior="Forever" TargetProperty="(Border.Background).(Brush.Transform).(TransformGroup.Children)[1].(TranslateTransform.X)" TargetName="Indicator">
                                <LinearDoubleKeyFrame KeyTime="0" Value="0" />
                                <LinearDoubleKeyFrame KeyTime="0:0:.25" Value="21" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </ControlTemplate.Resources>
                    <ControlTemplate.Triggers>
                        <Trigger Property="ProgressBar.Orientation" Value="Vertical">
                            <Setter Value="{x:Static system:Double.NaN}" Property="Height" />
                            <Setter TargetName="TemplateRoot" Property="FrameworkElement.LayoutTransform" Value="{RotateTransform Angle=-90}" />
                        </Trigger>
                        <EventTrigger RoutedEvent="FrameworkElement.Loaded" SourceName="Indicator">
                            <BeginStoryboard Storyboard="{StaticResource OnLoaded}" />
                        </EventTrigger>
                    </ControlTemplate.Triggers>
                    <hc:SimplePanel Name="TemplateRoot" SnapsToDevicePixels="true">
                        <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}" />
                        <Rectangle Name="PART_Track" />
                        <Decorator Name="PART_Indicator" HorizontalAlignment="Left">
                            <Border Name="Indicator" Background="{TemplateBinding Foreground}" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}" />
                        </Decorator>
                    </hc:SimplePanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <ControlTemplate x:Key="CircleProgressBarIndeterminateTemplate" TargetType="{x:Type hc:CircleProgressBar}">
        <ControlTemplate.Resources>
            <Storyboard Name="IsIndeterminate" RepeatBehavior="Forever">
                <DoubleAnimationUsingKeyFrames RepeatBehavior="Forever" TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(RotateTransform.Angle)" TargetName="TemplateRoot">
                    <LinearDoubleKeyFrame KeyTime="0:0:1.568" Value="360" />
                </DoubleAnimationUsingKeyFrames>
                <DoubleAnimationUsingKeyFrames RepeatBehavior="Forever" TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(RotateTransform.Angle)" TargetName="arc">
                    <SplineDoubleKeyFrame KeyTime="0" Value="0" />
                    <SplineDoubleKeyFrame KeySpline="0.4,0.0,0.2,1" KeyTime="0:0:0.666" Value="135" />
                    <SplineDoubleKeyFrame KeySpline="0.4,0.0,0.2,1" KeyTime="0:0:1.333" Value="270" />
                    <SplineDoubleKeyFrame KeySpline="0.4,0.0,0.2,1" KeyTime="0:0:1.999" Value="405" />
                    <SplineDoubleKeyFrame KeySpline="0.4,0.0,0.2,1" KeyTime="0:0:2.666" Value="540" />
                    <SplineDoubleKeyFrame KeySpline="0.4,0.0,0.2,1" KeyTime="0:0:3.333" Value="675" />
                    <SplineDoubleKeyFrame KeySpline="0.4,0.0,0.2,1" KeyTime="0:0:3.999" Value="810" />
                    <SplineDoubleKeyFrame KeySpline="0.4,0.0,0.2,1" KeyTime="0:0:4.666" Value="945" />
                    <SplineDoubleKeyFrame KeySpline="0.4,0.0,0.2,1" KeyTime="0:0:5.332" Value="1080" />
                </DoubleAnimationUsingKeyFrames>
                <DoubleAnimationUsingKeyFrames RepeatBehavior="Forever" TargetProperty="(shapes:Arc.StartAngle)" TargetName="arc">
                    <SplineDoubleKeyFrame KeyTime="0" Value="-5" />
                    <SplineDoubleKeyFrame KeySpline="0.4,0.0,0.2,1" KeyTime="0:0:0.666" Value="-130" />
                    <SplineDoubleKeyFrame KeySpline="0.4,0.0,0.2,1" KeyTime="0:0:1.333" Value="-5" />
                </DoubleAnimationUsingKeyFrames>
                <DoubleAnimationUsingKeyFrames RepeatBehavior="Forever" TargetProperty="(shapes:Arc.EndAngle)" TargetName="arc">
                    <SplineDoubleKeyFrame KeyTime="0" Value="5" />
                    <SplineDoubleKeyFrame KeySpline="0.4,0.0,0.2,1" KeyTime="0:0:0.666" Value="130" />
                    <SplineDoubleKeyFrame KeySpline="0.4,0.0,0.2,1" KeyTime="0:0:1.333" Value="5" />
                </DoubleAnimationUsingKeyFrames>
            </Storyboard>
        </ControlTemplate.Resources>
        <ControlTemplate.Triggers>
            <Trigger Property="hc:CircleProgressBar.IsIndeterminate" Value="true">
                <Trigger.EnterActions>
                    <BeginStoryboard Storyboard="{StaticResource IsIndeterminate}" />
                </Trigger.EnterActions>
            </Trigger>
        </ControlTemplate.Triggers>
        <hc:SimplePanel Name="TemplateRoot" RenderTransformOrigin="0.5,0.5">
            <hc:SimplePanel.RenderTransform>
                <TransformGroup>
                    <RotateTransform />
                </TransformGroup>
            </hc:SimplePanel.RenderTransform>
            <shapes:Arc ArcThickness="{TemplateBinding ArcThickness}" Stretch="None" EndAngle="360" Width="{TemplateBinding ActualWidth}" Height="{TemplateBinding ActualHeight}" Stroke="{TemplateBinding BorderBrush}" Fill="{TemplateBinding Background}" StrokeThickness="0" />
            <shapes:Arc Name="arc" RenderTransformOrigin="0.5,0.5" StartAngle="-5" EndAngle="5" ArcThickness="{TemplateBinding ArcThickness}" Stretch="None" Width="{TemplateBinding ActualWidth}" StrokeThickness="0" Height="{TemplateBinding ActualHeight}" Fill="{TemplateBinding Foreground}">
                <shapes:Arc.RenderTransform>
                    <TransformGroup>
                        <RotateTransform />
                    </TransformGroup>
                </shapes:Arc.RenderTransform>
            </shapes:Arc>
        </hc:SimplePanel>
    </ControlTemplate>
    <Style x:Key="ProgressBarCircleBaseStyle" TargetType="{x:Type hc:CircleProgressBar}">
        <Style.Triggers>
            <Trigger Property="hc:CircleProgressBar.IsIndeterminate" Value="True">
                <Setter Property="Template" Value="{StaticResource CircleProgressBarIndeterminateTemplate}" />
            </Trigger>
        </Style.Triggers>
        <Setter Property="Background" Value="{DynamicResource SecondaryRegionBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
        <Setter Property="Height" Value="100" />
        <Setter Property="Width" Value="100" />
        <Setter Property="hc:CircleProgressBar.ArcThickness" Value="4" />
        <Setter Property="hc:CircleProgressBar.Text" Value="{Binding Value , RelativeSource={RelativeSource Self}, StringFormat={0:F0} %}" />
        <Setter Property="Template" Value="{StaticResource CircleProgressBarTemplate}" />
    </Style>
    <Style x:Key="ProgressBarWaveBaseStyle" TargetType="{x:Type hc:WaveProgressBar}">
        <Setter Property="Background" Value="{DynamicResource SecondaryRegionBrush}" />
        <Setter Property="Width" Value="100" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
        <Setter Property="hc:WaveProgressBar.Text" Value="{Binding Value , RelativeSource={RelativeSource Self}, StringFormat={0:F0} %}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type hc:WaveProgressBar}">
                    <ControlTemplate.Resources>
                        <Storyboard Name="StoryboardOnLoaded" RepeatBehavior="Forever">
                            <DoubleAnimationUsingKeyFrames TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(TranslateTransform.X)" TargetName="PART_Wave">
                                <EasingDoubleKeyFrame KeyTime="0:0:2" Value="-400" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </ControlTemplate.Resources>
                    <ControlTemplate.Triggers>
                        <EventTrigger RoutedEvent="FrameworkElement.Loaded" SourceName="PART_Wave">
                            <BeginStoryboard Name="BeginStoryboardWave" Storyboard="{StaticResource StoryboardOnLoaded}" />
                        </EventTrigger>
                        <EventTrigger RoutedEvent="FrameworkElement.Unloaded" SourceName="PART_Wave">
                            <StopStoryboard BeginStoryboardName="BeginStoryboardWave" />
                        </EventTrigger>
                    </ControlTemplate.Triggers>
                    <StackPanel>
                        <Border Style="{StaticResource BorderCircular}" Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}">
                            <Viewbox>
                                <Border Name="PART_Clip" Style="{StaticResource BorderCircularClip}" CornerRadius="100" Width="200" Height="200">
                                    <Path Name="PART_Wave" Stroke="{TemplateBinding WaveStroke}" StrokeThickness="{TemplateBinding WaveThickness}" HorizontalAlignment="Left" VerticalAlignment="Top" Width="600" Height="250" Fill="{TemplateBinding WaveFill}" Stretch="Fill" RenderTransformOrigin="0.5,0.5" UseLayoutRounding="False" Margin="0,0,-400,-20">
                                        <Path.Data>
                                            <PathGeometry>
                                                <PathFigure StartPoint="0,1">
                                                    <PolyBezierSegment Points="0,5,1 0,5,0 1,0" />
                                                    <PolyBezierSegment Points="1,5,0 1,5,1 2,1" />
                                                    <PolyBezierSegment Points="2,5,1 2,5,0 3,0" />
                                                    <PolyLineSegment Points="3,0 3,10 0,10 0,1" />
                                                </PathFigure>
                                            </PathGeometry>
                                        </Path.Data>
                                    </Path>
                                </Border>
                            </Viewbox>
                        </Border>
                        <TextBlock Margin="0,10,0,0" HorizontalAlignment="Center" VerticalAlignment="Center" Foreground="{TemplateBinding Foreground}" Text="{TemplateBinding Text}" Visibility="{Binding ShowText , RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource Boolean2VisibilityConverter}}" />
                    </StackPanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="CheckBoxBaseStyle" BasedOn="{StaticResource BaseStyle}" TargetType="{x:Type CheckBox}">
        <Setter Property="FrameworkElement.FocusVisualStyle">
            <Setter.Value>
                <Style>
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate>
                                <Rectangle Margin="-4" Opacity=".6" SnapsToDevicePixels="true" Stroke="{DynamicResource SecondaryBorderBrush}" StrokeThickness="2" StrokeDashArray="1 1" RadiusX="4" RadiusY="4" />
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </Setter.Value>
        </Setter>
        <Setter Property="Background" Value="White" />
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Padding" Value="6,0,0,0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type CheckBox}">
                    <ControlTemplate.Resources>
                        <Storyboard Name="StoryboardCheckedTrue">
                            <DoubleAnimationUsingKeyFrames TargetProperty="(Shape.StrokeDashOffset)" TargetName="path">
                                <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="0" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard Name="StoryboardCheckedFalse">
                            <DoubleAnimationUsingKeyFrames TargetProperty="(Shape.StrokeDashOffset)" TargetName="path">
                                <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="8" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </ControlTemplate.Resources>
                    <ControlTemplate.Triggers>
                        <Trigger Property="HasContent" Value="true">
                            <Setter TargetName="contentPresenter" Property="Visibility" Value="Visible" />
                        </Trigger>
                        <Trigger Property="UIElement.IsMouseOver" Value="true">
                            <Setter Value="{DynamicResource SecondaryBorderBrush}" Property="BorderBrush" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="ToggleButton.IsChecked" Value="true" />
                                <Condition Property="IsPressed" Value="true" />
                            </MultiTrigger.Conditions>
                            <Setter Property="UIElement.Opacity" Value=".8" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="ToggleButton.IsChecked" Value="false" />
                                <Condition Property="IsPressed" Value="true" />
                            </MultiTrigger.Conditions>
                            <Setter Value="{DynamicResource PrimaryBrush}" Property="BorderBrush" />
                        </MultiTrigger>
                        <Trigger Property="ToggleButton.IsChecked" Value="true">
                            <Trigger.EnterActions>
                                <BeginStoryboard Storyboard="{StaticResource StoryboardCheckedTrue}" />
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard Storyboard="{StaticResource StoryboardCheckedFalse}" />
                            </Trigger.ExitActions>
                            <Setter TargetName="indeterminateMark" Property="UIElement.Opacity" Value="0" />
                            <Setter Value="{DynamicResource PrimaryBrush}" Property="Background" />
                            <Setter Value="{DynamicResource DarkPrimaryBrush}" Property="BorderBrush" />
                        </Trigger>
                        <Trigger Property="ToggleButton.IsChecked" Value="false">
                            <Setter Value="{DynamicResource BorderBrush}" TargetName="path" Property="Stroke" />
                        </Trigger>
                        <Trigger Value="{x:Null}" Property="ToggleButton.IsChecked">
                            <Setter TargetName="indeterminateMark" Property="UIElement.Opacity" Value="1" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="UIElement.Opacity" Value="0.4" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                    <Grid Name="templateRoot" Background="Transparent" SnapsToDevicePixels="True">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="*" />
                        </Grid.ColumnDefinitions>
                        <Border Name="checkBoxBorder" Height="16" Width="16" Background="{TemplateBinding Background}" CornerRadius="2" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" />
                        <hc:SimplePanel Name="markGrid" Grid.Column="0" Height="16" Width="16">
                            <Path Name="path" FlowDirection="LeftToRight" UseLayoutRounding="True" StrokeDashOffset="8" StrokeDashArray="8,8" Width="12" Height="12" Data="{StaticResource CheckedGeometry}" StrokeThickness="2" Stretch="Uniform" Stroke="{DynamicResource TextIconBrush}" />
                            <Rectangle Name="indeterminateMark" RadiusX="2" RadiusY="2" Fill="{DynamicResource PrimaryBrush}" Margin="2" Opacity="0" />
                        </hc:SimplePanel>
                        <ContentPresenter Name="contentPresenter" Visibility="Collapsed" Grid.Column="1" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="RadioButtonBaseStyle" BasedOn="{StaticResource BaseStyle}" TargetType="{x:Type RadioButton}">
        <Setter Property="FrameworkElement.FocusVisualStyle">
            <Setter.Value>
                <Style>
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate>
                                <Rectangle Margin="-4" Opacity=".6" SnapsToDevicePixels="true" Stroke="{DynamicResource SecondaryBorderBrush}" StrokeThickness="2" StrokeDashArray="1 1" RadiusX="4" RadiusY="4" />
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </Setter.Value>
        </Setter>
        <Setter Property="Background" Value="{DynamicResource SecondaryRegionBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Padding" Value="6,0,0,0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RadioButton}">
                    <ControlTemplate.Resources>
                        <Storyboard Name="StoryboardCheckedTrue">
                            <DoubleAnimationUsingKeyFrames TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)" TargetName="optionMark">
                                <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="0.5" />
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)" TargetName="optionMark">
                                <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="0.5" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard Name="StoryboardCheckedFalse">
                            <DoubleAnimationUsingKeyFrames TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)" TargetName="optionMark">
                                <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="1" />
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)" TargetName="optionMark">
                                <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="1" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </ControlTemplate.Resources>
                    <ControlTemplate.Triggers>
                        <Trigger Property="HasContent" Value="true">
                            <Setter TargetName="contentPresenter" Property="Visibility" Value="Visible" />
                        </Trigger>
                        <Trigger Property="UIElement.IsMouseOver" Value="true">
                            <Setter Value="{DynamicResource SecondaryBorderBrush}" Property="BorderBrush" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="ToggleButton.IsChecked" Value="true" />
                                <Condition Property="IsPressed" Value="true" />
                            </MultiTrigger.Conditions>
                            <Setter Property="UIElement.Opacity" Value=".8" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="ToggleButton.IsChecked" Value="false" />
                                <Condition Property="IsPressed" Value="true" />
                            </MultiTrigger.Conditions>
                            <Setter Value="{DynamicResource PrimaryBrush}" Property="BorderBrush" />
                        </MultiTrigger>
                        <Trigger Property="ToggleButton.IsChecked" Value="true">
                            <Trigger.EnterActions>
                                <BeginStoryboard Storyboard="{StaticResource StoryboardCheckedTrue}" />
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard Storyboard="{StaticResource StoryboardCheckedFalse}" />
                            </Trigger.ExitActions>
                            <Setter Value="{DynamicResource PrimaryBrush}" Property="Background" />
                            <Setter Value="{DynamicResource DarkPrimaryBrush}" Property="BorderBrush" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="UIElement.Opacity" Value="0.4" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                    <Grid Name="templateRoot" Background="Transparent" SnapsToDevicePixels="True">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="*" />
                        </Grid.ColumnDefinitions>
                        <Border Name="radioButtonBorder" Height="18" Width="18" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" CornerRadius="100" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                            <Ellipse Name="optionMark" Fill="White" MinWidth="6" MinHeight="6" RenderTransformOrigin="0.5,0.5">
                                <Ellipse.RenderTransform>
                                    <TransformGroup>
                                        <ScaleTransform />
                                    </TransformGroup>
                                </Ellipse.RenderTransform>
                            </Ellipse>
                        </Border>
                        <ContentPresenter Name="contentPresenter" Visibility="Collapsed" Grid.Column="1" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="RadioButtonSameAsButtonBaseStyle" BasedOn="{StaticResource ButtonBaseBaseStyle}" TargetType="{x:Type RadioButton}">
        <Style.Triggers>
            <Trigger Property="UIElement.IsMouseOver" Value="True">
                <Setter Property="UIElement.Opacity" Value=".9" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="UIElement.Opacity" Value=".6" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="UIElement.Opacity" Value="0.4" />
            </Trigger>
        </Style.Triggers>
        <Setter Property="hc:BorderElement.CornerRadius" Value="{StaticResource DefaultCornerRadius}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RadioButton}">
                    <ControlTemplate.Triggers>
                        <Trigger Property="ToggleButton.IsChecked" Value="true">
                            <Setter TargetName="BorderChecked" Property="Visibility" Value="Visible" />
                        </Trigger>
                        <Trigger Value="{x:Null}" Property="Content">
                            <Setter TargetName="ContentPresenterMain" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                        <Trigger Value="{x:Null}" Property="hc:IconElement.Geometry">
                            <Setter TargetName="PathMain" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="ContentPresenterMain" Property="Margin" Value="0" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                    <hc:SimplePanel>
                        <Border Background="{TemplateBinding Background}" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}" />
                        <Border BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}">
                            <StackPanel Orientation="Horizontal" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Margin="{TemplateBinding Padding}">
                                <Path Name="PathMain" Width="{TemplateBinding Width}" Height="{TemplateBinding Height}" Fill="{TemplateBinding Foreground}" SnapsToDevicePixels="True" Stretch="Uniform" Data="{TemplateBinding Geometry}" />
                                <ContentPresenter Name="ContentPresenterMain" RecognizesAccessKey="True" VerticalAlignment="Center" Margin="6,0,0,0" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                            </StackPanel>
                        </Border>
                        <Border Name="BorderChecked" Margin="-1" Visibility="Collapsed" BorderThickness="4" BorderBrush="{DynamicResource DarkMaskBrush}" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}" />
                    </hc:SimplePanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="RadioButtonIconBaseStyle" BasedOn="{StaticResource BaseStyle}" TargetType="{x:Type RadioButton}">
        <Style.Triggers>
            <Trigger Property="UIElement.IsMouseOver" Value="True">
                <Setter Property="UIElement.Opacity" Value=".9" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="UIElement.Opacity" Value=".6" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="UIElement.Opacity" Value="0.4" />
            </Trigger>
        </Style.Triggers>
        <Setter Property="Height" Value="{StaticResource DefaultControlHeight}" />
        <Setter Property="FrameworkElement.FocusVisualStyle" Value="{StaticResource FocusVisualRadius0}" />
        <Setter Property="Background" Value="{DynamicResource RegionBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="hc:BorderElement.CornerRadius" Value="0" />
        <Setter Property="Padding" Value="10,0" />
        <Setter Property="hc:VisualElement.HighlightBrush" Value="{DynamicResource PrimaryBrush}" />
        <Setter Property="hc:IconElement.Width" Value="16" />
        <Setter Property="hc:IconElement.Height" Value="16" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RadioButton}">
                    <ControlTemplate.Triggers>
                        <Trigger Value="{x:Null}" Property="Content">
                            <Setter TargetName="ContentPresenterMain" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                        <Trigger Value="{x:Null}" Property="hc:IconElement.Geometry">
                            <Setter TargetName="PathMain" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="ContentPresenterMain" Property="Margin" Value="0" />
                        </Trigger>
                        <Trigger Property="ToggleButton.IsChecked" Value="True">
                            <Setter TargetName="BorderHighlight" Value="{Binding Path=(hc:VisualElement.HighlightBrush), RelativeSource={RelativeSource TemplatedParent}}" Property="BorderBrush" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                    <Border Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}">
                        <Border Name="BorderHighlight" BorderThickness="3,0,0,0" BorderBrush="Transparent">
                            <StackPanel Orientation="Horizontal" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Margin="{TemplateBinding Padding}">
                                <Path Name="PathMain" Fill="{TemplateBinding Foreground}" SnapsToDevicePixels="True" Stretch="Uniform" Data="{TemplateBinding Geometry}" Height="{Binding Path=(hc:IconElement.Height), RelativeSource={RelativeSource TemplatedParent}}" Width="{Binding Path=(hc:IconElement.Width), RelativeSource={RelativeSource TemplatedParent}}" />
                                <ContentPresenter Name="ContentPresenterMain" RecognizesAccessKey="True" VerticalAlignment="Center" Margin="6,0,0,0" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                            </StackPanel>
                        </Border>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="RadioGroupItemBaseStyle" BasedOn="{StaticResource BaseStyle}" TargetType="{x:Type RadioButton}">
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="UIElement.Opacity" Value="0.4" />
            </Trigger>
            <Trigger Property="ToggleButton.IsChecked" Value="True">
                <Setter Property="Panel.ZIndex" Value="{x:Static system:Int32.MaxValue}" />
            </Trigger>
            <DataTrigger Binding="{Binding Orientation , RelativeSource={RelativeSource AncestorType=hc:ButtonGroup}}" Value="Vertical">
                <Setter Property="Margin" Value="0,-1,0,0" />
            </DataTrigger>
            <Trigger Property="UIElement.IsMouseOver" Value="True">
                <Setter Property="Background" Value="{DynamicResource SecondaryRegionBrush}" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background" Value="{DynamicResource BorderBrush}" />
            </Trigger>
        </Style.Triggers>
        <Setter Property="Background" Value="{DynamicResource RegionBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="hc:BorderElement.CornerRadius" Value="0" />
        <Setter Property="Height" Value="{StaticResource DefaultControlHeight}" />
        <Setter Property="Padding" Value="10,0" />
        <Setter Property="Margin" Value="-1,0,0,0" />
        <Setter Property="hc:IconElement.Width" Value="16" />
        <Setter Property="hc:IconElement.Height" Value="16" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RadioButton}">
                    <ControlTemplate.Triggers>
                        <Trigger Property="UIElement.IsMouseOver" Value="True">
                            <Setter Value="{DynamicResource PrimaryBrush}" TargetName="contentPresenter" Property="Foreground" />
                        </Trigger>
                        <Trigger Property="ToggleButton.IsChecked" Value="true">
                            <Setter TargetName="BorderRoot" Value="{Binding Path=(hc:VisualElement.HighlightBorderBrush), RelativeSource={RelativeSource TemplatedParent}}" Property="BorderBrush" />
                            <Setter TargetName="BorderRoot" Value="{Binding Path=(hc:VisualElement.HighlightBackground), RelativeSource={RelativeSource TemplatedParent}}" Property="Background" />
                            <Setter TargetName="contentPresenter" Value="{Binding Path=(hc:VisualElement.HighlightForeground), RelativeSource={RelativeSource TemplatedParent}}" Property="Foreground" />
                        </Trigger>
                        <Trigger Value="{x:Null}" Property="Content">
                            <Setter TargetName="contentPresenter" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                        <Trigger Value="{x:Null}" Property="hc:IconElement.Geometry">
                            <Setter TargetName="PathMain" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="contentPresenter" Property="Margin" Value="0" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                    <Border Name="BorderRoot" Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}">
                        <StackPanel Orientation="Horizontal" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Margin="{TemplateBinding Padding}">
                            <Path Name="PathMain" SnapsToDevicePixels="True" Stretch="Uniform" Data="{TemplateBinding Geometry}" Height="{Binding Path=(hc:IconElement.Height), RelativeSource={RelativeSource TemplatedParent}}" Width="{Binding Path=(hc:IconElement.Width), RelativeSource={RelativeSource TemplatedParent}}" Fill="{Binding Path=(TextElement.Foreground), ElementName=contentPresenter}" />
                            <ContentPresenter Name="contentPresenter" RecognizesAccessKey="True" VerticalAlignment="Center" Margin="6,0,0,0" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        </StackPanel>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ButtonDefault" BasedOn="{StaticResource ButtonBaseStyle}" TargetType="{x:Type Button}">
        <Style.Triggers>
            <Trigger Property="UIElement.IsMouseOver" Value="True">
                <Setter Property="Background" Value="{DynamicResource SecondaryRegionBrush}" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background" Value="{DynamicResource BorderBrush}" />
            </Trigger>
        </Style.Triggers>
        <Setter Property="Foreground" Value="{DynamicResource PrimaryTextBrush}" />
        <Setter Property="BorderThickness" Value="1" />
    </Style>
    <Style x:Key="ButtonDefault.Small" BasedOn="{StaticResource ButtonDefault}" TargetType="{x:Type Button}">
        <Setter Property="Height" Value="20" />
        <Setter Property="Padding" Value="6,1" />
    </Style>
    <Style x:Key="{x:Type Button}" BasedOn="{StaticResource ButtonDefault}" TargetType="{x:Type Button}" />
    <Style x:Key="ButtonPrimary" BasedOn="{StaticResource ButtonBaseStyle}" TargetType="{x:Type Button}">
        <Setter Property="Background" Value="{DynamicResource PrimaryBrush}" />
    </Style>
    <Style x:Key="ButtonPrimary.Small" BasedOn="{StaticResource ButtonPrimary}" TargetType="{x:Type Button}">
        <Setter Property="Height" Value="20" />
        <Setter Property="Padding" Value="6,2" />
    </Style>
    <Style x:Key="ButtonSuccess" BasedOn="{StaticResource ButtonBaseStyle}" TargetType="{x:Type Button}">
        <Setter Property="Background" Value="{DynamicResource SuccessBrush}" />
    </Style>
    <Style x:Key="ButtonSuccess.Small" BasedOn="{StaticResource ButtonSuccess}" TargetType="{x:Type Button}">
        <Setter Property="Height" Value="20" />
        <Setter Property="Padding" Value="6,2" />
    </Style>
    <Style x:Key="ButtonInfo" BasedOn="{StaticResource ButtonBaseStyle}" TargetType="{x:Type Button}">
        <Setter Property="Background" Value="{DynamicResource InfoBrush}" />
    </Style>
    <Style x:Key="ButtonInfo.Small" BasedOn="{StaticResource ButtonInfo}" TargetType="{x:Type Button}">
        <Setter Property="Height" Value="20" />
        <Setter Property="Padding" Value="6,2" />
    </Style>
    <Style x:Key="ButtonWarning" BasedOn="{StaticResource ButtonBaseStyle}" TargetType="{x:Type Button}">
        <Setter Property="Background" Value="{DynamicResource WarningBrush}" />
    </Style>
    <Style x:Key="ButtonWarning.Small" BasedOn="{StaticResource ButtonWarning}" TargetType="{x:Type Button}">
        <Setter Property="Height" Value="20" />
        <Setter Property="Padding" Value="6,2" />
    </Style>
    <Style x:Key="ButtonDanger" BasedOn="{StaticResource ButtonBaseStyle}" TargetType="{x:Type Button}">
        <Setter Property="Background" Value="{DynamicResource DangerBrush}" />
    </Style>
    <Style x:Key="ButtonDanger.Small" BasedOn="{StaticResource ButtonDanger}" TargetType="{x:Type Button}">
        <Setter Property="Height" Value="20" />
        <Setter Property="Padding" Value="6,2" />
    </Style>
    <Style x:Key="ButtonIcon" BasedOn="{StaticResource ButtonBaseStyle}" TargetType="{x:Type Button}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="Foreground" Value="{DynamicResource PrimaryTextBrush}" />
        <Setter Property="hc:BorderElement.CornerRadius" Value="0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}">
                        <ContentControl HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Margin="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
                            <Path Fill="{TemplateBinding Foreground}" SnapsToDevicePixels="True" Stretch="Uniform" Width="{TemplateBinding Width}" Height="{TemplateBinding Height}" Data="{TemplateBinding Geometry}" />
                        </ContentControl>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ButtonIcon.Small" BasedOn="{StaticResource ButtonIcon}" TargetType="{x:Type Button}">
        <Setter Property="Height" Value="20" />
        <Setter Property="Padding" Value="6,2" />
    </Style>
    <Style x:Key="ButtonIconCircular" BasedOn="{StaticResource ButtonBaseStyle}" TargetType="{x:Type Button}">
        <Setter Property="Width" Value="{StaticResource DefaultControlHeight}" />
        <Setter Property="Foreground" Value="{DynamicResource PrimaryTextBrush}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="hc:BorderElement.CornerRadius" Value="0" />
        <Setter Property="Padding" Value="6" />
        <Setter Property="FrameworkElement.FocusVisualStyle">
            <Setter.Value>
                <Style>
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate>
                                <Rectangle Style="{StaticResource RectangleFocusVisualCircular}" />
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Style="{StaticResource BorderCircular}" Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}">
                        <ContentControl HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Margin="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
                            <Path Fill="{TemplateBinding Foreground}" SnapsToDevicePixels="True" Stretch="Uniform" Width="{TemplateBinding Width}" Height="{TemplateBinding Height}" Data="{TemplateBinding Geometry}" />
                        </ContentControl>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ButtonIconCircular.Small" BasedOn="{StaticResource ButtonIconCircular}" TargetType="{x:Type Button}">
        <Setter Property="Width" Value="20" />
        <Setter Property="Height" Value="20" />
        <Setter Property="Padding" Value="1" />
    </Style>
    <Style x:Key="ButtonDashed" BasedOn="{StaticResource ButtonDashedBaseStyle}" TargetType="{x:Type Button}">
        <Style.Triggers>
            <Trigger Property="UIElement.IsMouseOver" Value="True">
                <Setter Property="Foreground" Value="{DynamicResource PrimaryBrush}" />
                <Setter Property="BorderBrush" Value="{DynamicResource PrimaryBrush}" />
            </Trigger>
        </Style.Triggers>
        <Setter Property="Foreground" Value="{DynamicResource PrimaryTextBrush}" />
    </Style>
    <Style x:Key="ButtonDashed.Small" BasedOn="{StaticResource ButtonDashed}" TargetType="{x:Type Button}">
        <Setter Property="Height" Value="20" />
        <Setter Property="Padding" Value="6,1" />
    </Style>
    <Style x:Key="ButtonDashedPrimary" BasedOn="{StaticResource ButtonDashedBaseStyle}" TargetType="{x:Type Button}">
        <Setter Property="Foreground" Value="{DynamicResource PrimaryBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource PrimaryBrush}" />
    </Style>
    <Style x:Key="ButtonDashedPrimary.Small" BasedOn="{StaticResource ButtonDashedPrimary}" TargetType="{x:Type Button}">
        <Setter Property="Height" Value="20" />
        <Setter Property="Padding" Value="6,1" />
    </Style>
    <Style x:Key="ButtonDashedSuccess" BasedOn="{StaticResource ButtonDashedBaseStyle}" TargetType="{x:Type Button}">
        <Setter Property="Foreground" Value="{DynamicResource SuccessBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource SuccessBrush}" />
    </Style>
    <Style x:Key="ButtonDashedSuccess.Small" BasedOn="{StaticResource ButtonDashedSuccess}" TargetType="{x:Type Button}">
        <Setter Property="Height" Value="20" />
        <Setter Property="Padding" Value="6,1" />
    </Style>
    <Style x:Key="ButtonDashedInfo" BasedOn="{StaticResource ButtonDashedBaseStyle}" TargetType="{x:Type Button}">
        <Setter Property="Foreground" Value="{DynamicResource InfoBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource InfoBrush}" />
    </Style>
    <Style x:Key="ButtonDashedInfo.Small" BasedOn="{StaticResource ButtonDashedInfo}" TargetType="{x:Type Button}">
        <Setter Property="Height" Value="20" />
        <Setter Property="Padding" Value="6,1" />
    </Style>
    <Style x:Key="ButtonDashedWarning" BasedOn="{StaticResource ButtonDashedBaseStyle}" TargetType="{x:Type Button}">
        <Setter Property="Foreground" Value="{DynamicResource WarningBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource WarningBrush}" />
    </Style>
    <Style x:Key="ButtonDashedWarning.Small" BasedOn="{StaticResource ButtonDashedWarning}" TargetType="{x:Type Button}">
        <Setter Property="Height" Value="20" />
        <Setter Property="Padding" Value="6,1" />
    </Style>
    <Style x:Key="ButtonDashedDanger" BasedOn="{StaticResource ButtonDashedBaseStyle}" TargetType="{x:Type Button}">
        <Setter Property="Foreground" Value="{DynamicResource DangerBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource DangerBrush}" />
    </Style>
    <Style x:Key="ButtonDashedDanger.Small" BasedOn="{StaticResource ButtonDashedDanger}" TargetType="{x:Type Button}">
        <Setter Property="Height" Value="20" />
        <Setter Property="Padding" Value="6,1" />
    </Style>
    <Style x:Key="ButtonCustom" BasedOn="{StaticResource BaseStyle}" TargetType="{x:Type Button}">
        <Setter Property="Background" Value="{x:Null}" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Padding" Value="0" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <ControlTemplate.Triggers>
                        <Trigger Property="UIElement.IsMouseOver" Value="True">
                            <Setter Property="UIElement.Opacity" Value=".9" />
                            <Setter TargetName="Chrome" Value="{Binding Path=(hc:BackgroundSwitchElement.MouseHoverBackground), RelativeSource={RelativeSource TemplatedParent}}" Property="Background" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="UIElement.Opacity" Value=".6" />
                            <Setter TargetName="Chrome" Value="{Binding Path=(hc:BackgroundSwitchElement.MouseDownBackground), RelativeSource={RelativeSource TemplatedParent}}" Property="Background" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="UIElement.Opacity" Value="0.4" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                    <Border Name="Chrome" SnapsToDevicePixels="true" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}">
                        <ContentPresenter Margin="{TemplateBinding Padding}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ButtonGroupItemDefault" BasedOn="{StaticResource ButtonGroupItemBaseStyle}" TargetType="{x:Type Button}" />
    <Style x:Key="ButtonGroupItemHorizontalFirst" BasedOn="{StaticResource ButtonGroupItemBaseStyle}" TargetType="{x:Type Button}">
        <Setter Property="hc:BorderElement.CornerRadius" Value="4,0,0,4" />
        <Setter Property="Margin" Value="0" />
    </Style>
    <Style x:Key="ButtonGroupItemHorizontalLast" BasedOn="{StaticResource ButtonGroupItemBaseStyle}" TargetType="{x:Type Button}">
        <Setter Property="hc:BorderElement.CornerRadius" Value="0,4,4,0" />
    </Style>
    <Style x:Key="ButtonGroupItemSingle" BasedOn="{StaticResource ButtonGroupItemBaseStyle}" TargetType="{x:Type Button}">
        <Setter Property="hc:BorderElement.CornerRadius" Value="{StaticResource DefaultCornerRadius}" />
    </Style>
    <Style x:Key="ButtonGroupItemVerticalFirst" BasedOn="{StaticResource ButtonGroupItemBaseStyle}" TargetType="{x:Type Button}">
        <Setter Property="hc:BorderElement.CornerRadius" Value="4,4,0,0" />
        <Setter Property="Margin" Value="0" />
    </Style>
    <Style x:Key="ButtonGroupItemVerticalLast" BasedOn="{StaticResource ButtonGroupItemBaseStyle}" TargetType="{x:Type Button}">
        <Setter Property="hc:BorderElement.CornerRadius" Value="0,0,4,4" />
    </Style>
    <Style x:Key="TextBlockDefault" BasedOn="{StaticResource TextBlockBaseStyle}" TargetType="{x:Type TextBlock}" />
    <Style x:Key="TextBlockDefaultAccent" BasedOn="{StaticResource TextBlockBaseStyle}" TargetType="{x:Type TextBlock}">
        <Setter Property="Foreground" Value="{DynamicResource AccentBrush}" />
    </Style>
    <Style x:Key="TextBlockDefaultPrimary" BasedOn="{StaticResource TextBlockBaseStyle}" TargetType="{x:Type TextBlock}">
        <Setter Property="Foreground" Value="{DynamicResource PrimaryBrush}" />
    </Style>
    <Style x:Key="TextBlockDefaultDanger" BasedOn="{StaticResource TextBlockBaseStyle}" TargetType="{x:Type TextBlock}">
        <Setter Property="Foreground" Value="{DynamicResource DangerBrush}" />
    </Style>
    <Style x:Key="TextBlockDefaultWarning" BasedOn="{StaticResource TextBlockBaseStyle}" TargetType="{x:Type TextBlock}">
        <Setter Property="Foreground" Value="{DynamicResource WarningBrush}" />
    </Style>
    <Style x:Key="TextBlockDefaultInfo" BasedOn="{StaticResource TextBlockBaseStyle}" TargetType="{x:Type TextBlock}">
        <Setter Property="Foreground" Value="{DynamicResource InfoBrush}" />
    </Style>
    <Style x:Key="TextBlockDefaultSuccess" BasedOn="{StaticResource TextBlockBaseStyle}" TargetType="{x:Type TextBlock}">
        <Setter Property="Foreground" Value="{DynamicResource SuccessBrush}" />
    </Style>
    <Style x:Key="TextBlockDefaultSecLight" BasedOn="{StaticResource TextBlockBaseStyle}" TargetType="{x:Type TextBlock}">
        <Setter Property="Foreground" Value="{DynamicResource SecondaryTextBrush}" />
    </Style>
    <Style x:Key="TextBlockDefaultThiLight" BasedOn="{StaticResource TextBlockBaseStyle}" TargetType="{x:Type TextBlock}">
        <Setter Property="Foreground" Value="{DynamicResource ThirdlyTextBrush}" />
    </Style>
    <Style x:Key="TextBlockLarge" BasedOn="{StaticResource TextBlockBaseStyle}" TargetType="{x:Type TextBlock}">
        <Setter Property="TextBlock.FontSize" Value="{StaticResource LargeFontSize}" />
    </Style>
    <Style x:Key="TextBlockTitle" BasedOn="{StaticResource TextBlockBaseStyle}" TargetType="{x:Type TextBlock}">
        <Setter Property="TextBlock.FontSize" Value="{StaticResource HeadFontSize}" />
    </Style>
    <Style x:Key="TextBlockSubTitle" BasedOn="{StaticResource TextBlockBaseStyle}" TargetType="{x:Type TextBlock}">
        <Setter Property="TextBlock.FontSize" Value="{StaticResource SubHeadFontSize}" />
    </Style>
    <Style x:Key="TextBlockLargeBold" BasedOn="{StaticResource TextBlockBoldBaseStyle}" TargetType="{x:Type TextBlock}">
        <Setter Property="TextBlock.FontSize" Value="{StaticResource LargeFontSize}" />
    </Style>
    <Style x:Key="TextBlockTitleBold" BasedOn="{StaticResource TextBlockBoldBaseStyle}" TargetType="{x:Type TextBlock}">
        <Setter Property="TextBlock.FontSize" Value="{StaticResource HeadFontSize}" />
    </Style>
    <Style x:Key="TextBlockSubTitleBold" BasedOn="{StaticResource TextBlockBoldBaseStyle}" TargetType="{x:Type TextBlock}">
        <Setter Property="TextBlock.FontSize" Value="{StaticResource SubHeadFontSize}" />
    </Style>
    <Style x:Key="TextBlockDefaultBold" BasedOn="{StaticResource TextBlockBoldBaseStyle}" TargetType="{x:Type TextBlock}" />
    <Style x:Key="{x:Type hc:HighlightTextBlock}" BasedOn="{StaticResource HighlightTextBlockBaseStyle}" TargetType="{x:Type hc:HighlightTextBlock}" />
    <Style x:Key="{x:Type Label}" BasedOn="{StaticResource LabelBaseStyle}" TargetType="{x:Type Label}">
        <Setter Property="Foreground" Value="{DynamicResource PrimaryTextBrush}" />
        <Setter Property="BorderThickness" Value="1" />
    </Style>
    <Style x:Key="LabelPrimary" BasedOn="{StaticResource LabelBaseStyle}" TargetType="{x:Type Label}">
        <Setter Property="Background" Value="{DynamicResource PrimaryBrush}" />
    </Style>
    <Style x:Key="LabelSuccess" BasedOn="{StaticResource LabelBaseStyle}" TargetType="{x:Type Label}">
        <Setter Property="Background" Value="{DynamicResource SuccessBrush}" />
    </Style>
    <Style x:Key="LabelInfo" BasedOn="{StaticResource LabelBaseStyle}" TargetType="{x:Type Label}">
        <Setter Property="Background" Value="{DynamicResource InfoBrush}" />
    </Style>
    <Style x:Key="LabelWarning" BasedOn="{StaticResource LabelBaseStyle}" TargetType="{x:Type Label}">
        <Setter Property="Background" Value="{DynamicResource WarningBrush}" />
    </Style>
    <Style x:Key="LabelDanger" BasedOn="{StaticResource LabelBaseStyle}" TargetType="{x:Type Label}">
        <Setter Property="Background" Value="{DynamicResource DangerBrush}" />
    </Style>
    <Style x:Key="{x:Type hc:CompareSlider}" BasedOn="{StaticResource CompareSliderBaseStyle}" TargetType="{x:Type hc:CompareSlider}" />
    <Style x:Key="{x:Type hc:PreviewSlider}" BasedOn="{StaticResource PreviewSliderBaseStyle}" TargetType="{x:Type hc:PreviewSlider}" />
    <Style x:Key="ToggleButtonDefault" BasedOn="{StaticResource ToggleButtonBaseStyle}" TargetType="{x:Type ToggleButton}">
        <Style.Triggers>
            <Trigger Property="UIElement.IsMouseOver" Value="True">
                <Setter Property="Background" Value="{DynamicResource SecondaryRegionBrush}" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background" Value="{DynamicResource BorderBrush}" />
            </Trigger>
        </Style.Triggers>
        <Setter Property="Background" Value="{DynamicResource RegionBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource PrimaryTextBrush}" />
        <Setter Property="BorderThickness" Value="1" />
    </Style>
    <Style x:Key="{x:Type ToggleButton}" BasedOn="{StaticResource ToggleButtonDefault}" TargetType="{x:Type ToggleButton}" />
    <Style x:Key="ToggleButtonPrimary" BasedOn="{StaticResource ToggleButtonBaseStyle}" TargetType="{x:Type ToggleButton}">
        <Setter Property="Background" Value="{DynamicResource PrimaryBrush}" />
    </Style>
    <Style x:Key="ToggleButtonSuccess" BasedOn="{StaticResource ToggleButtonBaseStyle}" TargetType="{x:Type ToggleButton}">
        <Setter Property="Background" Value="{DynamicResource SuccessBrush}" />
    </Style>
    <Style x:Key="ToggleButtonInfo" BasedOn="{StaticResource ToggleButtonBaseStyle}" TargetType="{x:Type ToggleButton}">
        <Setter Property="Background" Value="{DynamicResource InfoBrush}" />
    </Style>
    <Style x:Key="ToggleButtonWarning" BasedOn="{StaticResource ToggleButtonBaseStyle}" TargetType="{x:Type ToggleButton}">
        <Setter Property="Background" Value="{DynamicResource WarningBrush}" />
    </Style>
    <Style x:Key="ToggleButtonDanger" BasedOn="{StaticResource ToggleButtonBaseStyle}" TargetType="{x:Type ToggleButton}">
        <Setter Property="Background" Value="{DynamicResource DangerBrush}" />
    </Style>
    <Style x:Key="ToggleButtonIcon" BasedOn="{StaticResource ToggleButtonIconBaseStyle}" TargetType="{x:Type ToggleButton}">
        <Style.Triggers>
            <Trigger Property="UIElement.IsMouseOver" Value="True">
                <Setter Property="Background" Value="{DynamicResource SecondaryRegionBrush}" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background" Value="{DynamicResource BorderBrush}" />
            </Trigger>
        </Style.Triggers>
        <Setter Property="Background" Value="{DynamicResource RegionBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource PrimaryTextBrush}" />
        <Setter Property="BorderThickness" Value="1" />
    </Style>
    <Style x:Key="ToggleButtonIconPrimary" BasedOn="{StaticResource ToggleButtonIconBaseStyle}" TargetType="{x:Type ToggleButton}">
        <Setter Property="Background" Value="{DynamicResource PrimaryBrush}" />
    </Style>
    <Style x:Key="ToggleButtonIconSuccess" BasedOn="{StaticResource ToggleButtonIconBaseStyle}" TargetType="{x:Type ToggleButton}">
        <Setter Property="Background" Value="{DynamicResource SuccessBrush}" />
    </Style>
    <Style x:Key="ToggleButtonIconInfo" BasedOn="{StaticResource ToggleButtonIconBaseStyle}" TargetType="{x:Type ToggleButton}">
        <Setter Property="Background" Value="{DynamicResource InfoBrush}" />
    </Style>
    <Style x:Key="ToggleButtonIconWarning" BasedOn="{StaticResource ToggleButtonIconBaseStyle}" TargetType="{x:Type ToggleButton}">
        <Setter Property="Background" Value="{DynamicResource WarningBrush}" />
    </Style>
    <Style x:Key="ToggleButtonIconDanger" BasedOn="{StaticResource ToggleButtonIconBaseStyle}" TargetType="{x:Type ToggleButton}">
        <Setter Property="Background" Value="{DynamicResource DangerBrush}" />
    </Style>
    <Style x:Key="ToggleButtonIconTransparent" BasedOn="{StaticResource ToggleButtonIconBaseStyle}" TargetType="{x:Type ToggleButton}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="Foreground" Value="{DynamicResource PrimaryTextBrush}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <ControlTemplate.Triggers>
                        <Trigger Property="ToggleButton.IsChecked" Value="True">
                            <Setter TargetName="PathIcon" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(hc:IconSwitchElement.GeometrySelected)}" Property="Data" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                    <Border Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}">
                        <ContentControl Margin="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
                            <Path Name="PathIcon" Width="{TemplateBinding Width}" Height="{TemplateBinding Height}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Fill="{TemplateBinding Foreground}" SnapsToDevicePixels="True" Stretch="Uniform" Data="{TemplateBinding Geometry}" />
                        </ContentControl>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ToggleButtonSwitch" BasedOn="{StaticResource ToggleButtonSwitchBaseStyle}" TargetType="{x:Type ToggleButton}" />
    <Style x:Key="ToggleButtonFlip" BasedOn="{StaticResource BaseStyle}" TargetType="{x:Type ToggleButton}">
        <Setter Property="Background" Value="{DynamicResource RegionBrush}" />
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="Padding" Value="0" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Height" Value="30" />
        <Setter Property="Width" Value="30" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <ControlTemplate.Resources>
                        <Storyboard Name="StoryboardChecked">
                            <DoubleAnimationUsingKeyFrames TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)" TargetName="CheckedElement">
                                <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="1" EasingFunction="{PowerEase EasingMode=EaseOut}" />
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)" TargetName="UnCheckedElement">
                                <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="0" EasingFunction="{PowerEase EasingMode=EaseOut}" />
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames TargetProperty="Opacity" TargetName="CheckedElement">
                                <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="1" EasingFunction="{PowerEase EasingMode=EaseOut}" />
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames TargetProperty="Opacity" TargetName="UnCheckedElement">
                                <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="0" EasingFunction="{PowerEase EasingMode=EaseOut}" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard Name="StoryboardUnChecked">
                            <DoubleAnimationUsingKeyFrames TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)" TargetName="CheckedElement">
                                <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="0" EasingFunction="{PowerEase EasingMode=EaseOut}" />
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)" TargetName="UnCheckedElement">
                                <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="1" EasingFunction="{PowerEase EasingMode=EaseOut}" />
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames TargetProperty="Opacity" TargetName="CheckedElement">
                                <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="0" EasingFunction="{PowerEase EasingMode=EaseOut}" />
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames TargetProperty="Opacity" TargetName="UnCheckedElement">
                                <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="1" EasingFunction="{PowerEase EasingMode=EaseOut}" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </ControlTemplate.Resources>
                    <ControlTemplate.Triggers>
                        <Trigger Property="UIElement.IsMouseOver" Value="True">
                            <Setter Property="UIElement.Opacity" Value=".9" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="UIElement.Opacity" Value=".6" />
                        </Trigger>
                        <Trigger Property="ToggleButton.IsChecked" Value="true">
                            <Trigger.EnterActions>
                                <BeginStoryboard Storyboard="{StaticResource StoryboardChecked}" />
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard Storyboard="{StaticResource StoryboardUnChecked}" />
                            </Trigger.ExitActions>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="UIElement.Opacity" Value="0.4" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                    <Viewbox>
                        <hc:SimplePanel Height="28" Width="28">
                            <Border Name="UnCheckedElement" Style="{StaticResource BorderCircularClip}" RenderTransformOrigin="0.5,0.5" SnapsToDevicePixels="true" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}">
                                <Border.RenderTransform>
                                    <TransformGroup>
                                        <ScaleTransform ScaleX="1" />
                                    </TransformGroup>
                                </Border.RenderTransform>
                                <ContentPresenter Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                            </Border>
                            <Border Name="CheckedElement" Style="{StaticResource BorderCircularClip}" RenderTransformOrigin="0.5,0.5" SnapsToDevicePixels="true" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}">
                                <Border.RenderTransform>
                                    <TransformGroup>
                                        <ScaleTransform ScaleX="0" />
                                    </TransformGroup>
                                </Border.RenderTransform>
                                <ContentPresenter Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" Content="{Binding Path=(hc:StatusSwitchElement.CheckedElement), RelativeSource={RelativeSource TemplatedParent}}" />
                            </Border>
                        </hc:SimplePanel>
                    </Viewbox>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ToggleButtonCustom" BasedOn="{StaticResource BaseStyle}" TargetType="{x:Type ToggleButton}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Padding" Value="0" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <ControlTemplate.Triggers>
                        <Trigger Property="UIElement.IsMouseOver" Value="True">
                            <Setter Property="UIElement.Opacity" Value=".9" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="UIElement.Opacity" Value=".6" />
                        </Trigger>
                        <Trigger Property="ToggleButton.IsChecked" Value="True">
                            <Setter TargetName="CheckedElement" Property="Visibility" Value="Visible" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="hc:StatusSwitchElement.HideUncheckedElement" Value="True" />
                                <Condition Property="ToggleButton.IsChecked" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="UnCheckedElement" Property="Visibility" Value="Collapsed" />
                        </MultiTrigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="UIElement.Opacity" Value="0.4" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                    <Border Name="Chrome" SnapsToDevicePixels="true" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}">
                        <hc:SimplePanel>
                            <ContentPresenter Name="UnCheckedElement" Margin="{TemplateBinding Padding}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                            <ContentPresenter Name="CheckedElement" Margin="{TemplateBinding Padding}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" Visibility="Collapsed" Content="{Binding Path=(hc:StatusSwitchElement.CheckedElement), RelativeSource={RelativeSource TemplatedParent}}" />
                        </hc:SimplePanel>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ToggleButtonGroupItemDefault" BasedOn="{StaticResource ToggleButtonGroupItemBaseStyle}" TargetType="{x:Type ToggleButton}" />
    <Style x:Key="ToggleButtonGroupItemHorizontalFirst" BasedOn="{StaticResource ToggleButtonGroupItemBaseStyle}" TargetType="{x:Type ToggleButton}">
        <Setter Property="hc:BorderElement.CornerRadius" Value="4,0,0,4" />
        <Setter Property="Margin" Value="0" />
    </Style>
    <Style x:Key="ToggleButtonGroupItemHorizontalLast" BasedOn="{StaticResource ToggleButtonGroupItemBaseStyle}" TargetType="{x:Type ToggleButton}">
        <Setter Property="hc:BorderElement.CornerRadius" Value="0,4,4,0" />
    </Style>
    <Style x:Key="ToggleButtonGroupItemSingle" BasedOn="{StaticResource ToggleButtonGroupItemBaseStyle}" TargetType="{x:Type ToggleButton}">
        <Setter Property="hc:BorderElement.CornerRadius" Value="{StaticResource DefaultCornerRadius}" />
    </Style>
    <Style x:Key="ToggleButtonGroupItemVerticalFirst" BasedOn="{StaticResource ToggleButtonGroupItemBaseStyle}" TargetType="{x:Type ToggleButton}">
        <Setter Property="hc:BorderElement.CornerRadius" Value="4,4,0,0" />
        <Setter Property="Margin" Value="0" />
    </Style>
    <Style x:Key="ToggleButtonGroupItemVerticalLast" BasedOn="{StaticResource ToggleButtonGroupItemBaseStyle}" TargetType="{x:Type ToggleButton}">
        <Setter Property="hc:BorderElement.CornerRadius" Value="0,0,4,4" />
    </Style>
    <Style x:Key="ToggleButtonLoadingPrimary" BasedOn="{StaticResource ToggleButtonBaseStyle}" TargetType="{x:Type ToggleButton}">
        <Setter Property="Background" Value="{DynamicResource PrimaryBrush}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <ControlTemplate.Triggers>
                        <Trigger Property="UIElement.IsMouseOver" Value="True">
                            <Setter Property="UIElement.Opacity" Value=".9" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="UIElement.Opacity" Value=".6" />
                        </Trigger>
                        <Trigger Property="ToggleButton.IsChecked" Value="True">
                            <Setter TargetName="Loading" Property="Visibility" Value="Visible" />
                            <Setter TargetName="CheckedElement" Property="Visibility" Value="Visible" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="hc:StatusSwitchElement.HideUncheckedElement" Value="True" />
                                <Condition Property="ToggleButton.IsChecked" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="UnCheckedElement" Property="Visibility" Value="Collapsed" />
                        </MultiTrigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="UIElement.Opacity" Value="0.4" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                    <Border Name="Chrome" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}">
                        <StackPanel Orientation="Horizontal" HorizontalAlignment="Center">
                            <hc:SimplePanel>
                                <ContentPresenter Name="UnCheckedElement" Margin="{TemplateBinding Padding}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                                <ContentPresenter Name="CheckedElement" Margin="{TemplateBinding Padding}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" Visibility="Collapsed" Content="{Binding Path=(hc:StatusSwitchElement.CheckedElement), RelativeSource={RelativeSource TemplatedParent}}" />
                            </hc:SimplePanel>
                            <Viewbox Margin="0,4">
                                <hc:LoadingCircle Name="Loading" Width="22" Height="22" Foreground="{TemplateBinding Foreground}" DotDiameter="3" IsRunning="{TemplateBinding IsChecked}" Visibility="Collapsed" />
                            </Viewbox>
                        </StackPanel>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ToggleButtonLoading" BasedOn="{StaticResource ToggleButtonLoadingPrimary}" TargetType="{x:Type ToggleButton}">
        <Style.Triggers>
            <Trigger Property="UIElement.IsMouseOver" Value="True">
                <Setter Property="Background" Value="{DynamicResource SecondaryRegionBrush}" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background" Value="{DynamicResource BorderBrush}" />
            </Trigger>
        </Style.Triggers>
        <Setter Property="Background" Value="{DynamicResource RegionBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource PrimaryTextBrush}" />
        <Setter Property="BorderThickness" Value="1" />
    </Style>
    <Style x:Key="ToggleButtonLoadingSuccess" BasedOn="{StaticResource ToggleButtonLoadingPrimary}" TargetType="{x:Type ToggleButton}">
        <Setter Property="Background" Value="{DynamicResource SuccessBrush}" />
    </Style>
    <Style x:Key="ToggleButtonLoadingInfo" BasedOn="{StaticResource ToggleButtonLoadingPrimary}" TargetType="{x:Type ToggleButton}">
        <Setter Property="Background" Value="{DynamicResource InfoBrush}" />
    </Style>
    <Style x:Key="ToggleButtonLoadingWarning" BasedOn="{StaticResource ToggleButtonLoadingPrimary}" TargetType="{x:Type ToggleButton}">
        <Setter Property="Background" Value="{DynamicResource WarningBrush}" />
    </Style>
    <Style x:Key="ToggleButtonLoadingDanger" BasedOn="{StaticResource ToggleButtonLoadingPrimary}" TargetType="{x:Type ToggleButton}">
        <Setter Property="Background" Value="{DynamicResource DangerBrush}" />
    </Style>
    <Style x:Key="RepeatButtonDefault" BasedOn="{StaticResource RepeatButtonBaseStyle}" TargetType="{x:Type RepeatButton}">
        <Style.Triggers>
            <Trigger Property="UIElement.IsMouseOver" Value="True">
                <Setter Property="Background" Value="{DynamicResource SecondaryRegionBrush}" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background" Value="{DynamicResource BorderBrush}" />
            </Trigger>
        </Style.Triggers>
        <Setter Property="Foreground" Value="{DynamicResource PrimaryTextBrush}" />
        <Setter Property="BorderThickness" Value="1" />
    </Style>
    <Style x:Key="RepeatButtonDefault.Small" BasedOn="{StaticResource RepeatButtonDefault}" TargetType="{x:Type RepeatButton}">
        <Setter Property="Height" Value="20" />
        <Setter Property="Padding" Value="6,1" />
    </Style>
    <Style x:Key="{x:Type RepeatButton}" BasedOn="{StaticResource RepeatButtonDefault}" TargetType="{x:Type RepeatButton}" />
    <Style x:Key="RepeatButtonPrimary" BasedOn="{StaticResource RepeatButtonBaseStyle}" TargetType="{x:Type RepeatButton}">
        <Setter Property="Background" Value="{DynamicResource PrimaryBrush}" />
    </Style>
    <Style x:Key="RepeatButtonPrimary.Small" BasedOn="{StaticResource RepeatButtonPrimary}" TargetType="{x:Type RepeatButton}">
        <Setter Property="Height" Value="20" />
        <Setter Property="Padding" Value="6,2" />
    </Style>
    <Style x:Key="RepeatButtonSuccess" BasedOn="{StaticResource RepeatButtonBaseStyle}" TargetType="{x:Type RepeatButton}">
        <Setter Property="Background" Value="{DynamicResource SuccessBrush}" />
    </Style>
    <Style x:Key="RepeatButtonSuccess.Small" BasedOn="{StaticResource RepeatButtonSuccess}" TargetType="{x:Type RepeatButton}">
        <Setter Property="Height" Value="20" />
        <Setter Property="Padding" Value="6,2" />
    </Style>
    <Style x:Key="RepeatButtonInfo" BasedOn="{StaticResource RepeatButtonBaseStyle}" TargetType="{x:Type RepeatButton}">
        <Setter Property="Background" Value="{DynamicResource InfoBrush}" />
    </Style>
    <Style x:Key="RepeatButtonInfo.Small" BasedOn="{StaticResource RepeatButtonInfo}" TargetType="{x:Type RepeatButton}">
        <Setter Property="Height" Value="20" />
        <Setter Property="Padding" Value="6,2" />
    </Style>
    <Style x:Key="RepeatButtonWarning" BasedOn="{StaticResource RepeatButtonBaseStyle}" TargetType="{x:Type RepeatButton}">
        <Setter Property="Background" Value="{DynamicResource WarningBrush}" />
    </Style>
    <Style x:Key="RepeatButtonWarning.Small" BasedOn="{StaticResource RepeatButtonWarning}" TargetType="{x:Type RepeatButton}">
        <Setter Property="Height" Value="20" />
        <Setter Property="Padding" Value="6,2" />
    </Style>
    <Style x:Key="RepeatButtonDanger" BasedOn="{StaticResource RepeatButtonBaseStyle}" TargetType="{x:Type RepeatButton}">
        <Setter Property="Background" Value="{DynamicResource DangerBrush}" />
    </Style>
    <Style x:Key="RepeatButtonDanger.Small" BasedOn="{StaticResource RepeatButtonDanger}" TargetType="{x:Type RepeatButton}">
        <Setter Property="Height" Value="20" />
        <Setter Property="Padding" Value="6,2" />
    </Style>
    <Style x:Key="RepeatButtonIcon" BasedOn="{StaticResource RepeatButtonBaseStyle}" TargetType="{x:Type RepeatButton}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="Foreground" Value="{DynamicResource PrimaryTextBrush}" />
        <Setter Property="hc:BorderElement.CornerRadius" Value="0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Border Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}">
                        <ContentControl HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Margin="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
                            <Path Fill="{TemplateBinding Foreground}" SnapsToDevicePixels="True" Stretch="Uniform" Width="{TemplateBinding Width}" Height="{TemplateBinding Height}" Data="{TemplateBinding Geometry}" />
                        </ContentControl>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="RepeatButtonIcon.Small" BasedOn="{StaticResource RepeatButtonIcon}" TargetType="{x:Type RepeatButton}">
        <Setter Property="Height" Value="20" />
        <Setter Property="Padding" Value="6,2" />
    </Style>
    <Style x:Key="RepeatButtonIconCircular" BasedOn="{StaticResource RepeatButtonBaseStyle}" TargetType="{x:Type RepeatButton}">
        <Setter Property="Width" Value="{StaticResource DefaultControlHeight}" />
        <Setter Property="Foreground" Value="{DynamicResource PrimaryTextBrush}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="hc:BorderElement.CornerRadius" Value="0" />
        <Setter Property="FrameworkElement.FocusVisualStyle">
            <Setter.Value>
                <Style>
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate>
                                <Rectangle Style="{StaticResource RectangleFocusVisualCircular}" />
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Border Style="{StaticResource BorderCircular}" Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}">
                        <ContentControl HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Margin="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
                            <Path Fill="{TemplateBinding Foreground}" SnapsToDevicePixels="True" Stretch="Uniform" Width="{TemplateBinding Width}" Height="{TemplateBinding Height}" Data="{TemplateBinding Geometry}" />
                        </ContentControl>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="RepeatButtonIconCircular.Small" BasedOn="{StaticResource RepeatButtonIconCircular}" TargetType="{x:Type RepeatButton}">
        <Setter Property="Width" Value="20" />
        <Setter Property="Height" Value="20" />
        <Setter Property="Padding" Value="1" />
    </Style>
    <Style x:Key="RepeatButtonDashed" BasedOn="{StaticResource RepeatButtonDashedBaseStyle}" TargetType="{x:Type RepeatButton}">
        <Style.Triggers>
            <Trigger Property="UIElement.IsMouseOver" Value="True">
                <Setter Property="Foreground" Value="{DynamicResource PrimaryBrush}" />
                <Setter Property="BorderBrush" Value="{DynamicResource PrimaryBrush}" />
            </Trigger>
        </Style.Triggers>
        <Setter Property="Foreground" Value="{DynamicResource PrimaryTextBrush}" />
    </Style>
    <Style x:Key="RepeatButtonDashed.Small" BasedOn="{StaticResource RepeatButtonDashed}" TargetType="{x:Type RepeatButton}">
        <Setter Property="Height" Value="20" />
        <Setter Property="Padding" Value="6,1" />
    </Style>
    <Style x:Key="RepeatButtonDashedPrimary" BasedOn="{StaticResource RepeatButtonDashedBaseStyle}" TargetType="{x:Type RepeatButton}">
        <Setter Property="Foreground" Value="{DynamicResource PrimaryBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource PrimaryBrush}" />
    </Style>
    <Style x:Key="RepeatButtonDashedPrimary.Small" BasedOn="{StaticResource RepeatButtonDashedPrimary}" TargetType="{x:Type RepeatButton}">
        <Setter Property="Height" Value="20" />
        <Setter Property="Padding" Value="6,1" />
    </Style>
    <Style x:Key="RepeatButtonDashedSuccess" BasedOn="{StaticResource RepeatButtonDashedBaseStyle}" TargetType="{x:Type RepeatButton}">
        <Setter Property="Foreground" Value="{DynamicResource SuccessBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource SuccessBrush}" />
    </Style>
    <Style x:Key="RepeatButtonDashedSuccess.Small" BasedOn="{StaticResource RepeatButtonDashedSuccess}" TargetType="{x:Type RepeatButton}">
        <Setter Property="Height" Value="20" />
        <Setter Property="Padding" Value="6,1" />
    </Style>
    <Style x:Key="RepeatButtonDashedInfo" BasedOn="{StaticResource RepeatButtonDashedBaseStyle}" TargetType="{x:Type RepeatButton}">
        <Setter Property="Foreground" Value="{DynamicResource InfoBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource InfoBrush}" />
    </Style>
    <Style x:Key="RepeatButtonDashedInfo.Small" BasedOn="{StaticResource RepeatButtonDashedInfo}" TargetType="{x:Type RepeatButton}">
        <Setter Property="Height" Value="20" />
        <Setter Property="Padding" Value="6,1" />
    </Style>
    <Style x:Key="RepeatButtonDashedWarning" BasedOn="{StaticResource RepeatButtonDashedBaseStyle}" TargetType="{x:Type RepeatButton}">
        <Setter Property="Foreground" Value="{DynamicResource WarningBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource WarningBrush}" />
    </Style>
    <Style x:Key="RepeatButtonDashedWarning.Small" BasedOn="{StaticResource RepeatButtonDashedWarning}" TargetType="{x:Type RepeatButton}">
        <Setter Property="Height" Value="20" />
        <Setter Property="Padding" Value="6,1" />
    </Style>
    <Style x:Key="RepeatButtonDashedDanger" BasedOn="{StaticResource RepeatButtonDashedBaseStyle}" TargetType="{x:Type RepeatButton}">
        <Setter Property="Foreground" Value="{DynamicResource DangerBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource DangerBrush}" />
    </Style>
    <Style x:Key="RepeatButtonDashedDanger.Small" BasedOn="{StaticResource RepeatButtonDashedDanger}" TargetType="{x:Type RepeatButton}">
        <Setter Property="Height" Value="20" />
        <Setter Property="Padding" Value="6,1" />
    </Style>
    <Style x:Key="RepeatButtonCustom" BasedOn="{StaticResource BaseStyle}" TargetType="{x:Type RepeatButton}">
        <Setter Property="Background" Value="{x:Null}" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Padding" Value="0" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <ControlTemplate.Triggers>
                        <Trigger Property="UIElement.IsMouseOver" Value="True">
                            <Setter Property="UIElement.Opacity" Value=".9" />
                            <Setter TargetName="Chrome" Value="{Binding Path=(hc:BackgroundSwitchElement.MouseHoverBackground), RelativeSource={RelativeSource TemplatedParent}}" Property="Background" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="UIElement.Opacity" Value=".6" />
                            <Setter TargetName="Chrome" Value="{Binding Path=(hc:BackgroundSwitchElement.MouseDownBackground), RelativeSource={RelativeSource TemplatedParent}}" Property="Background" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="UIElement.Opacity" Value="0.4" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                    <Border Name="Chrome" SnapsToDevicePixels="true" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}">
                        <ContentPresenter Margin="{TemplateBinding Padding}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="{x:Type ScrollViewer}" BasedOn="{StaticResource ScrollViewerNativeBaseStyle}" TargetType="{x:Type ScrollViewer}" />
    <Style x:Key="{x:Type hc:ScrollViewer}" BasedOn="{StaticResource ScrollViewerBaseStyle}" TargetType="{x:Type hc:ScrollViewer}" />
    <Style x:Key="ScrollViewerUpDownRepeatButtonStyle" BasedOn="{StaticResource RepeatButtonIcon}" TargetType="{x:Type RepeatButton}">
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="Height" Value="10" />
        <Setter Property="Padding" Value="0,2" />
        <Setter Property="Foreground" Value="{DynamicResource PrimaryTextBrush}" />
        <Setter Property="ButtonBase.ClickMode" Value="Hover" />
    </Style>
    <ControlTemplate x:Key="ScrollViewerUpDownControlTemplate" TargetType="{x:Type ScrollViewer}">
        <Grid Name="Grid" Background="{TemplateBinding Background}">
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition />
                <RowDefinition Height="Auto" />
            </Grid.RowDefinitions>
            <RepeatButton Style="{StaticResource ScrollViewerUpDownRepeatButtonStyle}" Geometry="{StaticResource UpGeometry}" Command="{x:Static ScrollBar.LineUpCommand}" CommandTarget="{Binding RelativeSource={RelativeSource TemplatedParent}}">
                <RepeatButton.Visibility>
                    <MultiBinding FallbackValue="Visibility.Collapsed" Converter="{StaticResource MenuScrollingVisibilityConverter}" ConverterParameter="0">
                        <Binding Path="ComputedVerticalScrollBarVisibility" RelativeSource="{RelativeSource TemplatedParent}" />
                        <Binding Path="VerticalOffset" RelativeSource="{RelativeSource TemplatedParent}" />
                        <Binding Path="ExtentHeight" RelativeSource="{RelativeSource TemplatedParent}" />
                        <Binding Path="ViewportHeight" RelativeSource="{RelativeSource TemplatedParent}" />
                    </MultiBinding>
                </RepeatButton.Visibility>
            </RepeatButton>
            <ScrollContentPresenter Name="PART_ScrollContentPresenter" CanContentScroll="{TemplateBinding CanContentScroll}" CanHorizontallyScroll="False" CanVerticallyScroll="False" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" Grid.Column="0" Margin="{TemplateBinding Padding}" Grid.Row="1" />
            <RepeatButton Style="{StaticResource ScrollViewerUpDownRepeatButtonStyle}" Geometry="{StaticResource DownGeometry}" Grid.Row="2" Command="{x:Static ScrollBar.LineDownCommand}" CommandTarget="{Binding RelativeSource={RelativeSource TemplatedParent}}">
                <RepeatButton.Visibility>
                    <MultiBinding FallbackValue="Visibility.Collapsed" Converter="{StaticResource MenuScrollingVisibilityConverter}" ConverterParameter="100">
                        <Binding Path="ComputedVerticalScrollBarVisibility" RelativeSource="{RelativeSource TemplatedParent}" />
                        <Binding Path="VerticalOffset" RelativeSource="{RelativeSource TemplatedParent}" />
                        <Binding Path="ExtentHeight" RelativeSource="{RelativeSource TemplatedParent}" />
                        <Binding Path="ViewportHeight" RelativeSource="{RelativeSource TemplatedParent}" />
                    </MultiBinding>
                </RepeatButton.Visibility>
            </RepeatButton>
        </Grid>
    </ControlTemplate>
    <Style x:Key="ScrollViewerUpDown" TargetType="{x:Type ScrollViewer}">
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
        <Setter Property="Focusable" Value="False" />
        <Setter Property="Template" Value="{StaticResource ScrollViewerUpDownControlTemplate}" />
    </Style>
    <Style x:Key="CalendarButtonStyle" TargetType="{x:Type CalendarButton}">
        <Setter Property="MinWidth" Value="10" />
        <Setter Property="MinHeight" Value="10" />
        <Setter Property="FontSize" Value="12" />
        <Setter Property="Width" Value="40" />
        <Setter Property="Height" Value="32" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type CalendarButton}">
                    <ControlTemplate.Triggers>
                        <Trigger Property="UIElement.IsFocused" Value="True">
                            <Setter TargetName="CalendarButtonFocusVisual" Property="Visibility" Value="Visible" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                    <hc:SimplePanel>
                        <hc:SimplePanel.VisualStateGroups>
                            <VisualStateGroup x:Name="SelectionStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition GeneratedDuration="0" />
                                </VisualStateGroup.Transitions>
                                <VisualState x:Name="Unselected" />
                                <VisualState x:Name="Selected">
                                    <Storyboard>
                                        <DoubleAnimation Duration="0:0:.2" To="1" TargetProperty="Opacity" TargetName="SelectedBackground" />
                                        <ColorAnimation Duration="0" To="White" TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)" TargetName="NormalText" />
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="ActiveStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition GeneratedDuration="0" />
                                </VisualStateGroup.Transitions>
                                <VisualState x:Name="Active" />
                                <VisualState x:Name="Inactive">
                                    <Storyboard>
                                        <ColorAnimation Duration="0" To="{DynamicResource ThirdlyTextColor}" TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)" TargetName="NormalText" />
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </hc:SimplePanel.VisualStateGroups>
                        <Rectangle Name="SelectedBackground" Fill="{DynamicResource DangerBrush}" Opacity="0" RadiusY="16" RadiusX="16" />
                        <Rectangle Name="Background" Fill="{TemplateBinding Background}" Opacity="0" RadiusY="16" RadiusX="16" />
                        <ContentPresenter Name="NormalText" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Foreground="{SolidColorBrush Color={DynamicResource PrimaryTextColor}}" />
                        <Rectangle Name="CalendarButtonFocusVisual" IsHitTestVisible="false" RadiusY="16" RadiusX="16" Stroke="{DynamicResource PrimaryBrush}" Visibility="Collapsed" />
                    </hc:SimplePanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="CalendarDayButtonStyle" BasedOn="{StaticResource BaseStyle}" TargetType="{x:Type CalendarDayButton}">
        <Setter Property="MinWidth" Value="10" />
        <Setter Property="MinHeight" Value="10" />
        <Setter Property="Width" Value="32" />
        <Setter Property="Height" Value="32" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="FrameworkElement.FocusVisualStyle">
            <Setter.Value>
                <Style>
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate>
                                <Rectangle Style="{StaticResource RectangleFocusVisualCircular}" />
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type CalendarDayButton}">
                    <hc:SimplePanel>
                        <hc:SimplePanel.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition GeneratedDuration="0:0:0.1" />
                                </VisualStateGroup.Transitions>
                                <VisualState x:Name="Normal" />
                                <VisualState x:Name="Disabled">
                                    <Storyboard>
                                        <DoubleAnimation Duration="0" To=".35" TargetProperty="Opacity" TargetName="NormalText" />
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="SelectionStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition GeneratedDuration="0" />
                                </VisualStateGroup.Transitions>
                                <VisualState x:Name="Unselected" />
                                <VisualState x:Name="Selected">
                                    <Storyboard>
                                        <DoubleAnimation Duration="0:0:.2" To="1" TargetProperty="Opacity" TargetName="SelectedBackground" />
                                        <ColorAnimation Duration="0" To="White" TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)" TargetName="NormalText" />
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="ActiveStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition GeneratedDuration="0" />
                                </VisualStateGroup.Transitions>
                                <VisualState x:Name="Active" />
                                <VisualState x:Name="Inactive">
                                    <Storyboard>
                                        <ColorAnimation Duration="0" To="{DynamicResource ThirdlyTextColor}" TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)" TargetName="NormalText" />
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="DayStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition GeneratedDuration="0" />
                                </VisualStateGroup.Transitions>
                                <VisualState x:Name="RegularDay" />
                                <VisualState x:Name="Today">
                                    <Storyboard>
                                        <DoubleAnimation Duration="0" To="1" TargetProperty="Opacity" TargetName="TodayBackground" />
                                        <ColorAnimation Duration="0" To="White" TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)" TargetName="NormalText" />
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </hc:SimplePanel.VisualStateGroups>
                        <Rectangle Name="TodayBackground" RadiusX="16" RadiusY="16" Fill="{DynamicResource DangerBrush}" Opacity="0" />
                        <Rectangle Name="SelectedBackground" Fill="{DynamicResource PrimaryBrush}" Opacity="0" RadiusY="16" RadiusX="16" />
                        <ContentPresenter Name="NormalText" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Foreground="{SolidColorBrush Color={DynamicResource PrimaryTextColor}}" />
                    </hc:SimplePanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="{x:Type CalendarItem}" TargetType="{x:Type CalendarItem}">
        <Setter Property="Margin" Value="0" />
        <Setter Property="Focusable" Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type CalendarItem}">
                    <ControlTemplate.Resources>
                        <DataTemplate>
                            <TextBlock x:Key="{x:Static CalendarItem.DayTitleTemplateResourceKey}" Foreground="{DynamicResource PrimaryTextBrush}" TextBlock.FontWeight="Bold" HorizontalAlignment="Center" Margin="0,6,0,6" VerticalAlignment="Center" Text="{Binding}" />
                        </DataTemplate>
                    </ControlTemplate.Resources>
                    <ControlTemplate.Triggers>
                        <DataTrigger Value="Year" Binding="{Binding DisplayMode , RelativeSource={RelativeSource AncestorType=Calendar}}">
                            <Setter TargetName="PART_MonthView" Property="Visibility" Value="Hidden" />
                            <Setter TargetName="PART_YearView" Property="Visibility" Value="Visible" />
                        </DataTrigger>
                        <DataTrigger Value="Decade" Binding="{Binding DisplayMode , RelativeSource={RelativeSource AncestorType=Calendar}}">
                            <Setter TargetName="PART_MonthView" Property="Visibility" Value="Hidden" />
                            <Setter TargetName="PART_YearView" Property="Visibility" Value="Visible" />
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                    <hc:SimplePanel Name="PART_Root">
                        <hc:SimplePanel.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Normal" />
                                <VisualState x:Name="Disabled">
                                    <Storyboard>
                                        <DoubleAnimation Duration="0" To="1" TargetProperty="Opacity" TargetName="PART_DisabledVisual" />
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </hc:SimplePanel.VisualStateGroups>
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition />
                                <ColumnDefinition Width="Auto" />
                            </Grid.ColumnDefinitions>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto" />
                                <RowDefinition Height="*" />
                            </Grid.RowDefinitions>
                            <Border Margin="4" Grid.ColumnSpan="3" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}" Background="{Binding Path=(hc:TitleElement.Background), RelativeSource={RelativeSource TemplatedParent}}" />
                            <Button Name="PART_PreviousButton" Width="50" HorizontalAlignment="Left" Grid.Column="0" Height="50" Padding="16" Focusable="False" Grid.Row="0" Style="{StaticResource ButtonIcon}" Geometry="{StaticResource LeftGeometry}" Foreground="{Binding Path=(hc:TitleElement.Foreground), RelativeSource={RelativeSource TemplatedParent}}" />
                            <Button Name="PART_HeaderButton" Focusable="False" Grid.Column="1" FontSize="20" HorizontalAlignment="Center" Grid.Row="0" Style="{StaticResource ButtonCustom}" Foreground="{Binding Path=(hc:TitleElement.Foreground), RelativeSource={RelativeSource TemplatedParent}}" />
                            <Button Name="PART_NextButton" Width="50" HorizontalAlignment="Right" Height="50" Padding="16" Grid.Column="2" Focusable="False" Grid.Row="0" Style="{StaticResource ButtonIcon}" Geometry="{StaticResource RightGeometry}" Foreground="{Binding Path=(hc:TitleElement.Foreground), RelativeSource={RelativeSource TemplatedParent}}" />
                            <Grid Name="PART_MonthView" Width="240" Height="240" Margin="10,6,10,10" Grid.ColumnSpan="3" Grid.Column="0" HorizontalAlignment="Center" VerticalAlignment="Center" Grid.Row="1" Visibility="Visible">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition />
                                    <ColumnDefinition />
                                    <ColumnDefinition />
                                    <ColumnDefinition />
                                    <ColumnDefinition />
                                    <ColumnDefinition />
                                    <ColumnDefinition />
                                </Grid.ColumnDefinitions>
                                <Grid.RowDefinitions>
                                    <RowDefinition />
                                    <RowDefinition />
                                    <RowDefinition />
                                    <RowDefinition />
                                    <RowDefinition />
                                    <RowDefinition />
                                    <RowDefinition />
                                </Grid.RowDefinitions>
                            </Grid>
                            <Grid Name="PART_YearView" Width="240" Height="240" Margin="10,6,10,10" Grid.ColumnSpan="3" Grid.Column="0" HorizontalAlignment="Center" VerticalAlignment="Center" Grid.Row="1" Visibility="Hidden">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition />
                                    <ColumnDefinition />
                                    <ColumnDefinition />
                                    <ColumnDefinition />
                                </Grid.ColumnDefinitions>
                                <Grid.RowDefinitions>
                                    <RowDefinition />
                                    <RowDefinition />
                                    <RowDefinition />
                                </Grid.RowDefinitions>
                            </Grid>
                        </Grid>
                        <Rectangle Name="PART_DisabledVisual" Visibility="Collapsed" />
                    </hc:SimplePanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="CalendarBaseStyle" TargetType="{x:Type Calendar}">
        <Setter Property="Foreground" Value="{DynamicResource PrimaryTextBrush}" />
        <Setter Property="Background" Value="{DynamicResource RegionBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
        <Setter Property="FrameworkElement.Language" Value="{Binding Lang , Source={x:Static tools:ConfigHelper.Instance}}" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Margin" Value="8 0" />
        <Setter Property="Calendar.CalendarDayButtonStyle" Value="{StaticResource CalendarDayButtonStyle}" />
        <Setter Property="Calendar.CalendarButtonStyle" Value="{StaticResource CalendarButtonStyle}" />
        <Setter Property="hc:TitleElement.Background" Value="{DynamicResource TitleBrush}" />
        <Setter Property="hc:TitleElement.Foreground" Value="{DynamicResource TextIconBrush}" />
        <Setter Property="hc:BorderElement.CornerRadius" Value="{StaticResource DefaultCornerRadius}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Calendar}">
                    <hc:SimplePanel Margin="0,4,0,8" HorizontalAlignment="Center" VerticalAlignment="Center">
                        <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Effect="{StaticResource EffectShadow2}" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}" />
                        <CalendarItem Name="PART_CalendarItem" Margin="{TemplateBinding BorderThickness}" />
                    </hc:SimplePanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="{x:Type Calendar}" TargetType="{x:Type Calendar}" BasedOn="{StaticResource CalendarBaseStyle}" />
    <Style x:Key="{x:Type hc:ToggleBlock}" BasedOn="{StaticResource ToggleBlockBaseStyle}" TargetType="{x:Type hc:ToggleBlock}" />
    <Style x:Key="ToggleBlockIcon" BasedOn="{StaticResource ToggleBlockBaseStyle}" TargetType="{x:Type hc:ToggleBlock}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type hc:ToggleBlock}">
                    <ControlTemplate.Triggers>
                        <Trigger Property="hc:ToggleBlock.IsChecked" Value="True">
                            <Setter TargetName="PathIcon" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(hc:IconSwitchElement.GeometrySelected)}" Property="Data" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                    <ContentControl Margin="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
                        <Path Name="PathIcon" Width="{TemplateBinding Width}" Height="{TemplateBinding Height}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Fill="{TemplateBinding Foreground}" SnapsToDevicePixels="True" Stretch="Uniform" Data="{TemplateBinding Geometry}" />
                    </ContentControl>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="{x:Type GroupBox}" BasedOn="{StaticResource GroupBoxBaseStyle}" TargetType="{x:Type GroupBox}" />
    <Style x:Key="GroupBoxOriginal" BasedOn="{StaticResource GroupBoxOriginalBaseStyle}" TargetType="{x:Type GroupBox}" />
    <Style x:Key="GroupBoxTab" BasedOn="{StaticResource GroupBoxTabBaseStyle}" TargetType="{x:Type GroupBox}" />
    <Style x:Key="{x:Type hc:ButtonGroup}" BasedOn="{StaticResource ButtonGroupBaseStyle}" TargetType="{x:Type hc:ButtonGroup}" />
    <Style x:Key="ButtonGroupSolid" BasedOn="{StaticResource ButtonGroupBaseStyle}" TargetType="{x:Type hc:ButtonGroup}">
        <Setter Property="hc:VisualElement.HighlightBorderBrush" Value="{DynamicResource TitleBrush}" />
        <Setter Property="hc:VisualElement.HighlightBackground" Value="{DynamicResource TitleBrush}" />
        <Setter Property="hc:VisualElement.HighlightForeground" Value="{DynamicResource TextIconBrush}" />
    </Style>
    <Style x:Key="{x:Type ProgressBar}" BasedOn="{StaticResource ProgressBarBaseStyle}" TargetType="{x:Type ProgressBar}">
        <Setter Property="Foreground" Value="{DynamicResource PrimaryBrush}" />
    </Style>
    <Style x:Key="ProgressBarSuccess" BasedOn="{StaticResource ProgressBarBaseStyle}" TargetType="{x:Type ProgressBar}">
        <Setter Property="Foreground" Value="{DynamicResource SuccessBrush}" />
    </Style>
    <Style x:Key="ProgressBarInfo" BasedOn="{StaticResource ProgressBarBaseStyle}" TargetType="{x:Type ProgressBar}">
        <Setter Property="Foreground" Value="{DynamicResource InfoBrush}" />
    </Style>
    <Style x:Key="ProgressBarWarning" BasedOn="{StaticResource ProgressBarBaseStyle}" TargetType="{x:Type ProgressBar}">
        <Setter Property="Foreground" Value="{DynamicResource WarningBrush}" />
    </Style>
    <Style x:Key="ProgressBarDanger" BasedOn="{StaticResource ProgressBarBaseStyle}" TargetType="{x:Type ProgressBar}">
        <Setter Property="Foreground" Value="{DynamicResource DangerBrush}" />
    </Style>
    <Style x:Key="ProgressBarPrimaryStripe" BasedOn="{StaticResource ProgressBarStripeBaseStyle}" TargetType="{x:Type ProgressBar}">
        <Setter Property="Foreground">
            <Setter.Value>
                <DrawingBrush Viewport="0,0,20,32" TileMode="Tile" ViewportUnits="Absolute" Stretch="None">
                    <DrawingBrush.Transform>
                        <TransformGroup>
                            <RotateTransform Angle="20" />
                            <TranslateTransform x:Name="MyTransform" X="0" />
                        </TransformGroup>
                    </DrawingBrush.Transform>
                    <DrawingBrush.Drawing>
                        <GeometryDrawing Geometry="{RectangleGeometry Rect=0,0,20,32}">
                            <GeometryDrawing.Brush>
                                <LinearGradientBrush EndPoint="1,0" StartPoint="0,0">
                                    <GradientStop Color="{DynamicResource DarkPrimaryColor}" Offset="0" />
                                    <GradientStop Color="{DynamicResource DarkPrimaryColor}" Offset="0.5" />
                                    <GradientStop Color="{DynamicResource BackgroundColor}" Offset="0.5" />
                                    <GradientStop Color="{DynamicResource BackgroundColor}" Offset="1" />
                                </LinearGradientBrush>
                            </GeometryDrawing.Brush>
                        </GeometryDrawing>
                    </DrawingBrush.Drawing>
                </DrawingBrush>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ProgressBarSuccessStripe" BasedOn="{StaticResource ProgressBarStripeBaseStyle}" TargetType="{x:Type ProgressBar}">
        <Setter Property="Foreground">
            <Setter.Value>
                <DrawingBrush Viewport="0,0,20,32" TileMode="Tile" ViewportUnits="Absolute" Stretch="None">
                    <DrawingBrush.Transform>
                        <TransformGroup>
                            <RotateTransform Angle="20" />
                            <TranslateTransform x:Name="MyTransform" X="0" />
                        </TransformGroup>
                    </DrawingBrush.Transform>
                    <DrawingBrush.Drawing>
                        <GeometryDrawing Geometry="{RectangleGeometry Rect=0,0,20,32}">
                            <GeometryDrawing.Brush>
                                <LinearGradientBrush EndPoint="1,0" StartPoint="0,0">
                                    <GradientStop Color="{DynamicResource DarkSuccessColor}" Offset="0" />
                                    <GradientStop Color="{DynamicResource DarkSuccessColor}" Offset="0.5" />
                                    <GradientStop Color="{DynamicResource BackgroundColor}" Offset="0.5" />
                                    <GradientStop Color="{DynamicResource BackgroundColor}" Offset="1" />
                                </LinearGradientBrush>
                            </GeometryDrawing.Brush>
                        </GeometryDrawing>
                    </DrawingBrush.Drawing>
                </DrawingBrush>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ProgressBarInfoStripe" BasedOn="{StaticResource ProgressBarStripeBaseStyle}" TargetType="{x:Type ProgressBar}">
        <Setter Property="Foreground">
            <Setter.Value>
                <DrawingBrush Viewport="0,0,20,32" TileMode="Tile" ViewportUnits="Absolute" Stretch="None">
                    <DrawingBrush.Transform>
                        <TransformGroup>
                            <RotateTransform Angle="20" />
                            <TranslateTransform x:Name="MyTransform" X="0" />
                        </TransformGroup>
                    </DrawingBrush.Transform>
                    <DrawingBrush.Drawing>
                        <GeometryDrawing Geometry="{RectangleGeometry Rect=0,0,20,32}">
                            <GeometryDrawing.Brush>
                                <LinearGradientBrush EndPoint="1,0" StartPoint="0,0">
                                    <GradientStop Color="{DynamicResource DarkInfoColor}" Offset="0" />
                                    <GradientStop Color="{DynamicResource DarkInfoColor}" Offset="0.5" />
                                    <GradientStop Color="{DynamicResource BackgroundColor}" Offset="0.5" />
                                    <GradientStop Color="{DynamicResource BackgroundColor}" Offset="1" />
                                </LinearGradientBrush>
                            </GeometryDrawing.Brush>
                        </GeometryDrawing>
                    </DrawingBrush.Drawing>
                </DrawingBrush>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ProgressBarWarningStripe" BasedOn="{StaticResource ProgressBarStripeBaseStyle}" TargetType="{x:Type ProgressBar}">
        <Setter Property="Foreground">
            <Setter.Value>
                <DrawingBrush Viewport="0,0,20,32" TileMode="Tile" ViewportUnits="Absolute" Stretch="None">
                    <DrawingBrush.Transform>
                        <TransformGroup>
                            <RotateTransform Angle="20" />
                            <TranslateTransform x:Name="MyTransform" X="0" />
                        </TransformGroup>
                    </DrawingBrush.Transform>
                    <DrawingBrush.Drawing>
                        <GeometryDrawing Geometry="{RectangleGeometry Rect=0,0,20,32}">
                            <GeometryDrawing.Brush>
                                <LinearGradientBrush EndPoint="1,0" StartPoint="0,0">
                                    <GradientStop Color="{DynamicResource DarkWarningColor}" Offset="0" />
                                    <GradientStop Color="{DynamicResource DarkWarningColor}" Offset="0.5" />
                                    <GradientStop Color="{DynamicResource BackgroundColor}" Offset="0.5" />
                                    <GradientStop Color="{DynamicResource BackgroundColor}" Offset="1" />
                                </LinearGradientBrush>
                            </GeometryDrawing.Brush>
                        </GeometryDrawing>
                    </DrawingBrush.Drawing>
                </DrawingBrush>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ProgressBarDangerStripe" BasedOn="{StaticResource ProgressBarStripeBaseStyle}" TargetType="{x:Type ProgressBar}">
        <Setter Property="Foreground">
            <Setter.Value>
                <DrawingBrush Viewport="0,0,20,32" TileMode="Tile" ViewportUnits="Absolute" Stretch="None">
                    <DrawingBrush.Transform>
                        <TransformGroup>
                            <RotateTransform Angle="20" />
                            <TranslateTransform x:Name="MyTransform" X="0" />
                        </TransformGroup>
                    </DrawingBrush.Transform>
                    <DrawingBrush.Drawing>
                        <GeometryDrawing Geometry="{RectangleGeometry Rect=0,0,20,32}">
                            <GeometryDrawing.Brush>
                                <LinearGradientBrush EndPoint="1,0" StartPoint="0,0">
                                    <GradientStop Color="{DynamicResource DarkDangerColor}" Offset="0" />
                                    <GradientStop Color="{DynamicResource DarkDangerColor}" Offset="0.5" />
                                    <GradientStop Color="{DynamicResource BackgroundColor}" Offset="0.5" />
                                    <GradientStop Color="{DynamicResource BackgroundColor}" Offset="1" />
                                </LinearGradientBrush>
                            </GeometryDrawing.Brush>
                        </GeometryDrawing>
                    </DrawingBrush.Drawing>
                </DrawingBrush>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="{x:Type hc:CircleProgressBar}" BasedOn="{StaticResource ProgressBarCircleBaseStyle}" TargetType="{x:Type hc:CircleProgressBar}">
        <Setter Property="Foreground" Value="{DynamicResource PrimaryBrush}" />
    </Style>
    <Style x:Key="ProgressBarSuccessCircle" BasedOn="{StaticResource ProgressBarCircleBaseStyle}" TargetType="{x:Type hc:CircleProgressBar}">
        <Setter Property="Foreground" Value="{DynamicResource SuccessBrush}" />
    </Style>
    <Style x:Key="ProgressBarInfoCircle" BasedOn="{StaticResource ProgressBarCircleBaseStyle}" TargetType="{x:Type hc:CircleProgressBar}">
        <Setter Property="Foreground" Value="{DynamicResource InfoBrush}" />
    </Style>
    <Style x:Key="ProgressBarWarningCircle" BasedOn="{StaticResource ProgressBarCircleBaseStyle}" TargetType="{x:Type hc:CircleProgressBar}">
        <Setter Property="Foreground" Value="{DynamicResource WarningBrush}" />
    </Style>
    <Style x:Key="ProgressBarDangerCircle" BasedOn="{StaticResource ProgressBarCircleBaseStyle}" TargetType="{x:Type hc:CircleProgressBar}">
        <Setter Property="Foreground" Value="{DynamicResource DangerBrush}" />
    </Style>
    <Style x:Key="{x:Type hc:WaveProgressBar}" BasedOn="{StaticResource ProgressBarWaveBaseStyle}" TargetType="{x:Type hc:WaveProgressBar}">
        <Setter Property="hc:WaveProgressBar.WaveFill" Value="{DynamicResource DarkPrimaryBrush}" />
    </Style>
    <Style x:Key="ProgressBarSuccessWave" BasedOn="{StaticResource ProgressBarWaveBaseStyle}" TargetType="{x:Type hc:WaveProgressBar}">
        <Setter Property="hc:WaveProgressBar.WaveFill" Value="{DynamicResource DarkSuccessBrush}" />
    </Style>
    <Style x:Key="ProgressBarInfoWave" BasedOn="{StaticResource ProgressBarWaveBaseStyle}" TargetType="{x:Type hc:WaveProgressBar}">
        <Setter Property="hc:WaveProgressBar.WaveFill" Value="{DynamicResource DarkInfoBrush}" />
    </Style>
    <Style x:Key="ProgressBarWarningWave" BasedOn="{StaticResource ProgressBarWaveBaseStyle}" TargetType="{x:Type hc:WaveProgressBar}">
        <Setter Property="hc:WaveProgressBar.WaveFill" Value="{DynamicResource DarkWarningBrush}" />
    </Style>
    <Style x:Key="ProgressBarDangerWave" BasedOn="{StaticResource ProgressBarWaveBaseStyle}" TargetType="{x:Type hc:WaveProgressBar}">
        <Setter Property="hc:WaveProgressBar.WaveFill" Value="{DynamicResource DarkDangerBrush}" />
    </Style>
    <Style x:Key="ProgressBarFlat" TargetType="{x:Type ProgressBar}">
        <Setter Property="Height" Value="4" />
        <Setter Property="Background" Value="{DynamicResource SecondaryRegionBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource PrimaryBrush}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ProgressBar}">
                    <ControlTemplate.Resources>
                        <Storyboard Name="IsIndeterminate" RepeatBehavior="Forever">
                            <DoubleAnimationUsingKeyFrames TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)" TargetName="Animation">
                                <EasingDoubleKeyFrame KeyTime="0" Value="0.25" />
                                <EasingDoubleKeyFrame KeyTime="0:0:1" Value="0.25" />
                                <EasingDoubleKeyFrame KeyTime="0:0:2" Value="0.25" />
                            </DoubleAnimationUsingKeyFrames>
                            <PointAnimationUsingKeyFrames TargetProperty="(UIElement.RenderTransformOrigin)" TargetName="Animation">
                                <EasingPointKeyFrame KeyTime="0" Value="-0.5,0.5" />
                                <EasingPointKeyFrame KeyTime="0:0:1" Value="0.5,0.5" />
                                <EasingPointKeyFrame KeyTime="0:0:2" Value="1.5,0.5" />
                            </PointAnimationUsingKeyFrames>
                        </Storyboard>
                    </ControlTemplate.Resources>
                    <ControlTemplate.Triggers>
                        <Trigger Property="ProgressBar.IsIndeterminate" Value="true">
                            <Trigger.EnterActions>
                                <BeginStoryboard Storyboard="{StaticResource IsIndeterminate}" />
                            </Trigger.EnterActions>
                            <Setter TargetName="Indicator" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="Animation" Property="Visibility" Value="Visible" />
                        </Trigger>
                        <Trigger Property="ProgressBar.Orientation" Value="Vertical">
                            <Setter Value="{x:Static system:Double.NaN}" Property="Height" />
                            <Setter TargetName="TemplateRoot" Property="FrameworkElement.LayoutTransform" Value="{RotateTransform Angle=-90}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                    <hc:SimplePanel Name="TemplateRoot" SnapsToDevicePixels="true" ClipToBounds="True">
                        <Rectangle Name="PART_Track" Fill="{TemplateBinding Background}" StrokeThickness="0" Stroke="{TemplateBinding BorderBrush}" />
                        <Decorator Name="PART_Indicator" HorizontalAlignment="Left">
                            <Rectangle Name="Indicator" Fill="{TemplateBinding Foreground}" />
                        </Decorator>
                        <Rectangle Name="Animation" Visibility="Collapsed" Fill="{TemplateBinding Foreground}" RenderTransformOrigin="0.5,0.5">
                            <Rectangle.RenderTransform>
                                <TransformGroup>
                                    <ScaleTransform />
                                </TransformGroup>
                            </Rectangle.RenderTransform>
                        </Rectangle>
                    </hc:SimplePanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="{x:Type CheckBox}" BasedOn="{StaticResource CheckBoxBaseStyle}" TargetType="{x:Type CheckBox}" />
    <Style x:Key="{x:Type RadioButton}" BasedOn="{StaticResource RadioButtonBaseStyle}" TargetType="{x:Type RadioButton}" />
    <Style x:Key="RadioButtonSameAsButtonDefault" BasedOn="{StaticResource RadioButtonSameAsButtonBaseStyle}" TargetType="{x:Type RadioButton}">
        <Style.Triggers>
            <Trigger Property="UIElement.IsMouseOver" Value="True">
                <Setter Property="Background" Value="{DynamicResource SecondaryRegionBrush}" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background" Value="{DynamicResource BorderBrush}" />
            </Trigger>
        </Style.Triggers>
        <Setter Property="Background" Value="{DynamicResource RegionBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource PrimaryTextBrush}" />
        <Setter Property="BorderThickness" Value="1" />
    </Style>
    <Style x:Key="RadioButtonSameAsButtonPrimary" BasedOn="{StaticResource RadioButtonSameAsButtonBaseStyle}" TargetType="{x:Type RadioButton}">
        <Setter Property="Background" Value="{DynamicResource PrimaryBrush}" />
    </Style>
    <Style x:Key="RadioButtonSameAsButtonSuccess" BasedOn="{StaticResource RadioButtonSameAsButtonBaseStyle}" TargetType="{x:Type RadioButton}">
        <Setter Property="Background" Value="{DynamicResource SuccessBrush}" />
    </Style>
    <Style x:Key="RadioButtonSameAsButtonInfo" BasedOn="{StaticResource RadioButtonSameAsButtonBaseStyle}" TargetType="{x:Type RadioButton}">
        <Setter Property="Background" Value="{DynamicResource InfoBrush}" />
    </Style>
    <Style x:Key="RadioButtonSameAsButtonWarning" BasedOn="{StaticResource RadioButtonSameAsButtonBaseStyle}" TargetType="{x:Type RadioButton}">
        <Setter Property="Background" Value="{DynamicResource WarningBrush}" />
    </Style>
    <Style x:Key="RadioButtonSameAsButtonDanger" BasedOn="{StaticResource RadioButtonSameAsButtonBaseStyle}" TargetType="{x:Type RadioButton}">
        <Setter Property="Background" Value="{DynamicResource DangerBrush}" />
    </Style>
    <Style x:Key="RadioButtonIcon" BasedOn="{StaticResource RadioButtonIconBaseStyle}" TargetType="{x:Type RadioButton}" />
    <Style x:Key="RadioGroupItemDefault" BasedOn="{StaticResource RadioGroupItemBaseStyle}" TargetType="{x:Type RadioButton}" />
    <Style x:Key="RadioGroupItemHorizontalFirst" BasedOn="{StaticResource RadioGroupItemBaseStyle}" TargetType="{x:Type RadioButton}">
        <Setter Property="hc:BorderElement.CornerRadius" Value="4,0,0,4" />
        <Setter Property="Margin" Value="0" />
    </Style>
    <Style x:Key="RadioGroupItemHorizontalLast" BasedOn="{StaticResource RadioGroupItemBaseStyle}" TargetType="{x:Type RadioButton}">
        <Setter Property="hc:BorderElement.CornerRadius" Value="0,4,4,0" />
    </Style>
    <Style x:Key="RadioGroupItemSingle" BasedOn="{StaticResource RadioGroupItemBaseStyle}" TargetType="{x:Type RadioButton}">
        <Setter Property="hc:BorderElement.CornerRadius" Value="{StaticResource DefaultCornerRadius}" />
    </Style>
    <Style x:Key="RadioGroupItemVerticalFirst" BasedOn="{StaticResource RadioGroupItemBaseStyle}" TargetType="{x:Type RadioButton}">
        <Setter Property="hc:BorderElement.CornerRadius" Value="4,4,0,0" />
        <Setter Property="Margin" Value="0" />
    </Style>
    <Style x:Key="RadioGroupItemVerticalLast" BasedOn="{StaticResource RadioGroupItemBaseStyle}" TargetType="{x:Type RadioButton}">
        <Setter Property="hc:BorderElement.CornerRadius" Value="0,0,4,4" />
    </Style>
    <Style x:Key="{x:Type ResizeGrip}" TargetType="{x:Type ResizeGrip}">
        <Setter Property="MinWidth" Value="11" />
        <Setter Property="MinHeight" Value="11" />
        <Setter Property="Width" Value="11" />
        <Setter Property="Height" Value="11" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ResizeGrip}">
                    <hc:SimplePanel Background="{TemplateBinding Background}" SnapsToDevicePixels="true">
                        <Path Width="11" Height="11" Data="F0 M 9,0 L 11,0 11,11 0,11 0,9 3,9 3,6 6,6 6,3 9,3 Z" HorizontalAlignment="Right" VerticalAlignment="Bottom">
                            <Path.Fill>
                                <DrawingBrush TileMode="Tile" Viewbox="0,0,3,3" Viewport="0,0,3,3" ViewportUnits="Absolute" ViewboxUnits="Absolute">
                                    <DrawingBrush.Drawing>
                                        <DrawingGroup>
                                            <GeometryDrawing Brush="{StaticResource ResizeGripperForeground}" Geometry="{RectangleGeometry Rect=0,0,2,2}" />
                                        </DrawingGroup>
                                    </DrawingBrush.Drawing>
                                </DrawingBrush>
                            </Path.Fill>
                        </Path>
                    </hc:SimplePanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="{x:Type Window}" TargetType="{x:Type Window}">
        <Setter Property="Background" Value="{DynamicResource SecondaryRegionBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource PrimaryTextBrush}" />
        <Setter Property="FrameworkElement.UseLayoutRounding" Value="True" />
    </Style>
    <Style x:Key="WindowWin10" TargetType="{x:Type hc:Window}">
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="BorderBrush" Value="#262e2f" />
        <Setter Property="Background" Value="{DynamicResource SecondaryRegionBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource PrimaryTextBrush}" />
        <Setter Property="FrameworkElement.UseLayoutRounding" Value="True" />
        <Setter Property="hc:Window.NonClientAreaBackground" Value="{DynamicResource RegionBrush}" />
        <Setter Property="hc:Window.NonClientAreaForeground" Value="{DynamicResource PrimaryTextBrush}" />
        <Setter Property="hc:Window.CloseButtonBackground" Value="Transparent" />
        <Setter Property="hc:Window.CloseButtonForeground" Value="{DynamicResource PrimaryTextBrush}" />
        <Setter Property="hc:Window.CloseButtonHoverBackground" Value="#e81123" />
        <Setter Property="hc:Window.CloseButtonHoverForeground" Value="White" />
        <Setter Property="hc:Window.OtherButtonBackground" Value="Transparent" />
        <Setter Property="hc:Window.OtherButtonForeground" Value="{DynamicResource PrimaryTextBrush}" />
        <Setter Property="hc:Window.OtherButtonHoverBackground" Value="{DynamicResource DarkMaskBrush}" />
        <Setter Property="hc:Window.OtherButtonHoverForeground" Value="{DynamicResource PrimaryTextBrush}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type hc:Window}">
                    <ControlTemplate.Triggers>
                        <Trigger Property="Window.IsActive" Value="False">
                            <Setter TargetName="ContentPresenterMain" Property="UIElement.Opacity" Value=".8" />
                            <Setter TargetName="ButtonPanel" Property="UIElement.Opacity" Value=".8" />
                        </Trigger>
                        <Trigger Property="Window.WindowState" Value="Maximized">
                            <Setter TargetName="ButtonMax" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="ButtonRestore" Property="Visibility" Value="Visible" />
                        </Trigger>
                        <Trigger Property="Window.WindowState" Value="Normal">
                            <Setter TargetName="ButtonMax" Property="Visibility" Value="Visible" />
                            <Setter TargetName="ButtonRestore" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="Window.ResizeMode" Value="NoResize">
                            <Setter TargetName="ButtonMin" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="ButtonMax" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="ButtonRestore" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="Window.ResizeMode" Value="CanMinimize">
                            <Setter TargetName="ButtonMax" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="ButtonRestore" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                        <Trigger SourceName="ButtonClose" Property="UIElement.IsMouseOver" Value="True">
                            <Setter TargetName="ButtonClose" Value="{Binding CloseButtonHoverBackground , RelativeSource={RelativeSource TemplatedParent}}" Property="Background" />
                            <Setter TargetName="ButtonClose" Value="{Binding CloseButtonHoverForeground , RelativeSource={RelativeSource TemplatedParent}}" Property="Foreground" />
                        </Trigger>
                        <Trigger SourceName="ButtonMax" Property="UIElement.IsMouseOver" Value="True">
                            <Setter TargetName="ButtonMax" Value="{Binding OtherButtonHoverBackground , RelativeSource={RelativeSource TemplatedParent}}" Property="Background" />
                            <Setter TargetName="ButtonMax" Value="{Binding OtherButtonHoverForeground , RelativeSource={RelativeSource TemplatedParent}}" Property="Foreground" />
                        </Trigger>
                        <Trigger SourceName="ButtonRestore" Property="UIElement.IsMouseOver" Value="True">
                            <Setter TargetName="ButtonRestore" Value="{Binding OtherButtonHoverBackground , RelativeSource={RelativeSource TemplatedParent}}" Property="Background" />
                            <Setter TargetName="ButtonRestore" Value="{Binding OtherButtonHoverForeground , RelativeSource={RelativeSource TemplatedParent}}" Property="Foreground" />
                        </Trigger>
                        <Trigger SourceName="ButtonMin" Property="UIElement.IsMouseOver" Value="True">
                            <Setter TargetName="ButtonMin" Value="{Binding OtherButtonHoverBackground , RelativeSource={RelativeSource TemplatedParent}}" Property="Background" />
                            <Setter TargetName="ButtonMin" Value="{Binding OtherButtonHoverForeground , RelativeSource={RelativeSource TemplatedParent}}" Property="Foreground" />
                        </Trigger>
                        <Trigger Property="hc:Window.ExtendViewIntoNonClientArea" Value="True">
                            <Setter TargetName="AdornerDecorator" Property="Grid.Row" Value="0" />
                            <Setter TargetName="AdornerDecorator" Property="Grid.RowSpan" Value="2" />
                            <Setter Property="hc:Window.ShowTitle" Value="False" />
                            <Setter Property="hc:Window.NonClientAreaBackground" Value="Transparent" />
                        </Trigger>
                        <Trigger Property="hc:Window.ShowCloseButton" Value="False">
                            <Setter TargetName="ButtonClose" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="hc:Window.ShowMinButton" Value="False">
                            <Setter TargetName="ButtonMin" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="hc:Window.ShowMaxButton" Value="False">
                            <Setter TargetName="ButtonMax" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="ButtonRestore" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="hc:Window.ShowCloseButton" Value="False" />
                                <Condition Property="hc:Window.ShowMaxButton" Value="False" />
                                <Condition Property="hc:Window.ShowMinButton" Value="False" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="ButtonClose" Property="Visibility" Value="Hidden" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="Window.ResizeMode" Value="CanResizeWithGrip" />
                                <Condition Property="Window.WindowState" Value="Normal" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="ResizeGrip" Property="Visibility" Value="Visible" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="Window.WindowStyle" Value="None" />
                                <Condition Property="hc:Window.ApplyBackdropMaterial" Value="False" />
                            </MultiTrigger.Conditions>
                            <Setter Property="hc:Window.ShowNonClientArea" Value="False" />
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                    <Border SnapsToDevicePixels="True" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}">
                        <Grid Margin="{TemplateBinding Padding}">
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto" />
                                <RowDefinition />
                            </Grid.RowDefinitions>
                            <Grid Name="PART_NonClientArea" ZIndex="1" Background="{TemplateBinding NonClientAreaBackground}" Foreground="{TemplateBinding NonClientAreaForeground}">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition />
                                    <ColumnDefinition Width="Auto" />
                                </Grid.ColumnDefinitions>
                                <StackPanel Name="ButtonPanel" IsHitTestVisibleInChrome="True" UseLayoutRounding="True" VerticalAlignment="Top" Grid.Column="1" HorizontalAlignment="Right" Orientation="Horizontal">
                                    <Button Name="ButtonMin" Background="{TemplateBinding OtherButtonBackground}" Foreground="{TemplateBinding OtherButtonForeground}" Command="SystemCommands.MinimizeWindowCommand" IsTabStop="False" Height="29" Style="{StaticResource ButtonIcon}" Width="45" Geometry="{StaticResource WindowMinGeometry}" BorderThickness="1,0,1,0" Width="10" Height="10" />
                                    <Button Name="ButtonMax" Background="{TemplateBinding OtherButtonBackground}" Foreground="{TemplateBinding OtherButtonForeground}" Command="SystemCommands.MaximizeWindowCommand" IsTabStop="False" Height="29" Style="{StaticResource ButtonIcon}" Width="46" Geometry="{StaticResource WindowMaxGeometry}" BorderThickness="1,0,1,0" Width="10" Height="10" />
                                    <Button Name="ButtonRestore" Background="{TemplateBinding OtherButtonBackground}" Foreground="{TemplateBinding OtherButtonForeground}" Command="SystemCommands.RestoreWindowCommand" IsTabStop="False" Height="29" Style="{StaticResource ButtonIcon}" Width="46" Geometry="{StaticResource WindowRestoreGeometry}" BorderThickness="1,0,1,0" Width="10" Height="10" />
                                    <Button Name="ButtonClose" Background="{TemplateBinding CloseButtonBackground}" Foreground="{TemplateBinding CloseButtonForeground}" Command="SystemCommands.CloseWindowCommand" IsTabStop="False" Height="29" Style="{StaticResource ButtonIcon}" Width="46" Geometry="{StaticResource CloseGeometry}" BorderThickness="1,0,0,0" Width="10" Height="10" />
                                </StackPanel>
                                <Grid Grid.Column="0">
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="Auto" />
                                        <ColumnDefinition Width="Auto" />
                                        <ColumnDefinition />
                                    </Grid.ColumnDefinitions>
                                    <Button Name="ButtonIcon" Command="{x:Static SystemCommands.ShowSystemMenuCommand}" Background="Transparent" Margin="10,0,0,0" IsHitTestVisibleInChrome="True" Style="{StaticResource ButtonCustom}" VerticalAlignment="Center" Visibility="{TemplateBinding Icon , Converter={StaticResource Object2VisibilityConverter}}">
                                        <Button.Triggers>
                                            <interactivity:EventTrigger EventName="MouseDoubleClick">
                                                <interactivity:InvokeCommandAction Command="{x:Static SystemCommands.CloseWindowCommand}" />
                                            </interactivity:EventTrigger>
                                        </Button.Triggers>
                                        <Image IsHitTestVisible="False" Source="{TemplateBinding Icon}" VerticalAlignment="Center" Width="16" Height="16" />
                                    </Button>
                                    <TextBlock Grid.Column="1" Text="{TemplateBinding Title}" Padding="10,0,0,0" VerticalAlignment="Center">
                                        <TextBlock.Visibility>
                                            <MultiBinding Converter="{StaticResource BooleanArr2VisibilityConverter}">
                                                <MultiBinding.Bindings>
                                                    <Binding Path="ShowTitle" RelativeSource="{RelativeSource TemplatedParent}" />
                                                    <Binding Path="Title" Converter="{StaticResource Object2BooleanConverter}" RelativeSource="{RelativeSource TemplatedParent}" />
                                                </MultiBinding.Bindings>
                                            </MultiBinding>
                                        </TextBlock.Visibility>
                                    </TextBlock>
                                    <ContentPresenter Name="ContentPresenterMain" IsHitTestVisibleInChrome="True" Grid.Column="2" Content="{TemplateBinding NonClientAreaContent}" />
                                </Grid>
                            </Grid>
                            <AdornerDecorator Name="AdornerDecorator" Grid.Row="1">
                                <ContentPresenter ClipToBounds="True" />
                            </AdornerDecorator>
                            <ResizeGrip Name="ResizeGrip" Width="10" Height="10" HorizontalAlignment="Right" VerticalAlignment="Bottom" Grid.Row="1" IsTabStop="False" Visibility="Collapsed" ResizeGripDirection="BottomRight" />
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="WindowBlur" BasedOn="{StaticResource WindowWin10}" TargetType="{x:Type hc:BlurWindow}">
        <Setter Property="Background" Value="Transparent" />
    </Style>
    <Style x:Key="WindowGlow" BasedOn="{StaticResource WindowWin10}" TargetType="{x:Type hc:GlowWindow}">
        <Setter Property="hc:GlowWindow.ActiveGlowColor" Value="#262e2f" />
        <Setter Property="hc:GlowWindow.InactiveGlowColor" Value="{DynamicResource BorderColor}" />
        <Setter Property="BorderThickness" Value="0" />
    </Style>
    <Style x:Key="{x:Type hc:ImageBrowser}" TargetType="{x:Type hc:ImageBrowser}">
        <Style.Triggers>
            <Trigger Property="hc:Window.IsFullScreen" Value="True">
                <Setter Property="Window.WindowState" Value="Maximized" />
            </Trigger>
        </Style.Triggers>
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="MinWidth" Value="400" />
        <Setter Property="MinHeight" Value="250" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="BorderBrush" Value="Black" />
        <Setter Property="Window.ResizeMode" Value="NoResize" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type hc:ImageBrowser}">
                    <ControlTemplate.Resources>
                        <Storyboard Name="Storyboard1">
                            <DoubleAnimationUsingKeyFrames TargetProperty="Opacity" TargetName="PART_PanelTop">
                                <EasingDoubleKeyFrame KeyTime="0:0:.1" Value="1" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard Name="Storyboard2">
                            <DoubleAnimationUsingKeyFrames TargetProperty="Opacity" TargetName="PART_PanelTop">
                                <EasingDoubleKeyFrame KeyTime="0:0:.4" Value="0" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </ControlTemplate.Resources>
                    <ControlTemplate.Triggers>
                        <Trigger SourceName="PART_ImageViewer" Property="hc:ImageViewer.ShowCloseButton" Value="True">
                            <Trigger.EnterActions>
                                <BeginStoryboard Storyboard="{StaticResource Storyboard1}" />
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard Storyboard="{StaticResource Storyboard2}" />
                            </Trigger.ExitActions>
                        </Trigger>
                    </ControlTemplate.Triggers>
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition />
                            <RowDefinition Height="Auto" />
                        </Grid.RowDefinitions>
                        <hc:ImageViewer Name="PART_ImageViewer" ShowImgMap="True" BorderThickness="0" Background="#dd000000" />
                        <hc:SimplePanel Name="PART_PanelTop" Opacity="0" Background="{DynamicResource DarkOpacityBrush}" VerticalAlignment="Top" Grid.Row="0">
                            <StackPanel HorizontalAlignment="Left" VerticalAlignment="Center" Orientation="Horizontal">
                                <TextBlock Foreground="White" Margin="10,0,0,0" Text="{Binding ImgPath , ElementName=PART_ImageViewer}" />
                                <TextBlock Foreground="White" Margin="30,0,0,0" Text="{Binding ImgSize , ElementName=PART_ImageViewer, Converter={StaticResource Long2FileSizeConverter}}" />
                            </StackPanel>
                            <Button Command="interactivity:ControlCommands.Close" IsHitTestVisibleInChrome="True" Background="Red" Padding="14" Geometry="{StaticResource DeleteGeometry}" Style="{StaticResource ButtonIcon}" HorizontalAlignment="Right" VerticalAlignment="Top" Width="40" Height="40" />
                        </hc:SimplePanel>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="TagBaseStyle" BasedOn="{StaticResource BaseStyle}" TargetType="{x:Type hc:Tag}">
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="UIElement.Opacity" Value="0.4" />
            </Trigger>
            <Trigger Property="UIElement.IsMouseOver" Value="True">
                <Setter Property="Background" Value="{DynamicResource DarkMaskBrush}" />
            </Trigger>
            <Trigger Property="hc:Tag.IsSelected" Value="True">
                <Setter Property="Background" Value="{DynamicResource PrimaryBrush}" />
                <Setter Property="Foreground" Value="{DynamicResource TextIconBrush}" />
            </Trigger>
        </Style.Triggers>
        <Setter Property="Background" Value="{DynamicResource SecondaryRegionBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
        <Setter Property="Padding" Value="{StaticResource DefaultControlPadding}" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="Height" Value="{StaticResource DefaultControlHeight}" />
        <Setter Property="hc:TitleElement.Foreground" Value="{DynamicResource TextIconBrush}" />
        <Setter Property="FrameworkElement.FocusVisualStyle">
            <Setter.Value>
                <Style>
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate>
                                <Rectangle Style="{StaticResource RectangleFocusVisualCircular}" />
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type hc:Tag}">
                    <ControlTemplate.Triggers>
                        <Trigger SourceName="ButtonClose" Property="UIElement.IsMouseOver" Value="True">
                            <Setter Value="{StaticResource DeleteFillCircleGeometry}" TargetName="ButtonClose" Property="hc:IconElement.Geometry" />
                            <Setter TargetName="ButtonClose" Property="Padding" Value="0,6" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                    <Border Style="{StaticResource BorderCircular}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="true">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition />
                                <ColumnDefinition Width="Auto" />
                            </Grid.ColumnDefinitions>
                            <Border Style="{StaticResource BorderCircularClip}" Visibility="{Binding HasHeader , RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource Boolean2VisibilityConverter}}" Width="{Binding ActualHeight , RelativeSource={RelativeSource Self}}" BorderBrush="{Binding Path=(hc:TitleElement.BorderBrush), RelativeSource={RelativeSource TemplatedParent}}" Background="{Binding Path=(hc:TitleElement.Background), RelativeSource={RelativeSource TemplatedParent}}">
                                <ContentPresenter ContentSource="Header" ContentTemplate="{TemplateBinding HeaderTemplate}" ContentTemplateSelector="{TemplateBinding HeaderTemplateSelector}" ContentStringFormat="{TemplateBinding HeaderStringFormat}" VerticalAlignment="Center" HorizontalAlignment="Center" Foreground="{Binding Path=(hc:TitleElement.Foreground), RelativeSource={RelativeSource TemplatedParent}}" />
                            </Border>
                            <ContentPresenter Margin="{TemplateBinding Padding}" Grid.Column="1" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                            <Button Name="ButtonClose" Focusable="False" Command="interactivity:ControlCommands.Close" Margin="0,0,6,0" Width="16" Grid.Column="2" Style="{StaticResource ButtonIcon}" Padding="0,11" Geometry="{StaticResource DeleteGeometry}" Foreground="{TemplateBinding Foreground}" Visibility="{TemplateBinding ShowCloseButton , Converter={StaticResource Boolean2VisibilityConverter}}" />
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="TagContainerBaseStyle" TargetType="{x:Type hc:TagContainer}" BasedOn="{StaticResource BaseStyle}">
        <Setter Property="hc:BorderElement.CornerRadius" Value="{StaticResource DefaultCornerRadius}" />
        <Setter Property="ItemContainerStyle" Value="{StaticResource TagBaseStyle}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
        <Setter Property="ItemsPanel">
            <Setter.Value>
                <ItemsPanelTemplate>
                    <WrapPanel FluidMoveBehavior="{StaticResource BehaviorXY200}" />
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type hc:TagContainer}">
                    <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}">
                        <hc:ScrollViewer Focusable="false">
                            <ItemsPresenter Margin="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        </hc:ScrollViewer>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ComboBoxToggleButton" TargetType="{x:Type ToggleButton}">
        <Setter Property="FrameworkElement.OverridesDefaultStyle" Value="true" />
        <Setter Property="IsTabStop" Value="false" />
        <Setter Property="Focusable" Value="false" />
        <Setter Property="ButtonBase.ClickMode" Value="Press" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <ControlTemplate.Triggers>
                        <Trigger Property="ToggleButton.IsChecked" Value="True">
                            <Setter TargetName="arrow" Value="{StaticResource UpGeometry}" Property="Data" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="UIElement.Opacity" Value=".4" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                    <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="true" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}">
                        <Border Margin="0,0,6,0" BorderThickness="1" BorderBrush="Transparent" HorizontalAlignment="Right" SnapsToDevicePixels="true" Width="{StaticResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}">
                            <Path Name="arrow" Width="16" Height="9" Data="{StaticResource DownGeometry}" Stretch="Uniform" Fill="{TemplateBinding BorderBrush}" HorizontalAlignment="Center" VerticalAlignment="Center" />
                        </Border>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ComboBoxWatermarkToggleButton" TargetType="{x:Type ToggleButton}">
        <Setter Property="FrameworkElement.OverridesDefaultStyle" Value="true" />
        <Setter Property="Foreground" Value="{DynamicResource ThirdlyTextBrush}" />
        <Setter Property="IsTabStop" Value="false" />
        <Setter Property="Focusable" Value="false" />
        <Setter Property="ButtonBase.ClickMode" Value="Press" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <ControlTemplate.Triggers>
                        <Trigger Property="ToggleButton.IsChecked" Value="True">
                            <Setter TargetName="arrow" Value="{StaticResource UpGeometry}" Property="Data" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="UIElement.Opacity" Value=".4" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition />
                            <ColumnDefinition Width="30" />
                        </Grid.ColumnDefinitions>
                        <Border Grid.ColumnSpan="2" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="true" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}" />
                        <Path Name="arrow" Grid.Column="1" Data="{StaticResource DownGeometry}" Stretch="Uniform" Fill="{TemplateBinding BorderBrush}" HorizontalAlignment="Center" Width="16" VerticalAlignment="Center" />
                        <Border Margin="1" Grid.Column="0" Visibility="{Binding Text , RelativeSource={RelativeSource AncestorType=ComboBox}, Converter={StaticResource String2VisibilityReConverter}}">
                            <ContentPresenter Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                        </Border>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <ControlTemplate x:Key="ComboBoxTemplate" TargetType="{x:Type ComboBox}">
        <ControlTemplate.Triggers>
            <Trigger Property="ItemsControl.HasItems" Value="false">
                <Setter TargetName="dropDownBorder" Property="Height" Value="95" />
            </Trigger>
            <Trigger Property="hc:DropDownElement.ConsistentWidth" Value="True">
                <Setter TargetName="dropDownBorder" Value="{Binding ActualWidth , ElementName=toggleButton}" Property="MaxWidth" />
                <Setter TargetName="dropDownBorder" Value="{Binding ActualWidth , ElementName=toggleButton}" Property="MinWidth" />
            </Trigger>
            <Trigger Property="hc:DropDownElement.AutoWidth" Value="True">
                <Setter TargetName="dropDownBorder" Value="{x:Static system:Double.MaxValue}" Property="MaxWidth" />
                <Setter TargetName="dropDownBorder" Value="{Binding ActualHeight , ElementName=toggleButton}" Property="MinWidth" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="ItemsControl.IsGrouping" Value="true" />
                    <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false" />
                </MultiTrigger.Conditions>
                <Setter Property="ScrollViewer.CanContentScroll" Value="false" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition SourceName="toggleButton" Property="UIElement.IsMouseOver" Value="true" />
                    <Condition SourceName="PART_Popup" Property="IsOpen" Value="false" />
                </MultiTrigger.Conditions>
                <Setter Value="{DynamicResource SecondaryBorderBrush}" Property="BorderBrush" />
            </MultiTrigger>
            <Trigger SourceName="PART_Popup" Property="IsOpen" Value="True">
                <Setter Value="{DynamicResource PrimaryBrush}" Property="BorderBrush" />
            </Trigger>
            <Trigger Property="UIElement.IsFocused" Value="True">
                <Setter Value="{DynamicResource PrimaryBrush}" Property="BorderBrush" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="UIElement.Opacity" Value="0.4" />
            </Trigger>
        </ControlTemplate.Triggers>
        <Grid Name="templateRoot" SnapsToDevicePixels="true">
            <Grid.ColumnDefinitions>
                <ColumnDefinition />
                <ColumnDefinition Width="30" />
            </Grid.ColumnDefinitions>
            <Popup Name="PART_Popup" AllowsTransparency="true" Grid.ColumnSpan="2" Margin="1" PopupAnimation="{StaticResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}" Placement="Bottom" PlacementTarget="{Binding ElementName=toggleButton}" IsOpen="{Binding IsDropDownOpen , Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}">
                <Decorator Margin="8 0">
                    <Border Name="dropDownBorder" BorderThickness="0,1,0,0" Effect="{StaticResource EffectShadow2}" Margin="0,0,0,8" MaxHeight="{TemplateBinding MaxDropDownHeight}" BorderBrush="{DynamicResource BorderBrush}" Background="{DynamicResource RegionBrush}" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}" MinWidth="{Binding ActualWidth , ElementName=toggleButton}">
                        <hc:ToggleBlock VerticalContentAlignment="Stretch" HorizontalContentAlignment="Stretch" IsChecked="{Binding HasItems , RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}" UnCheckedContent="{hc:Empty}">
                            <hc:ToggleBlock.CheckedContent>
                                <ScrollViewer Margin="0,4">
                                    <ItemsPresenter Name="ItemsPresenter" DirectionalNavigation="Contained" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                                </ScrollViewer>
                            </hc:ToggleBlock.CheckedContent>
                        </hc:ToggleBlock>
                    </Border>
                </Decorator>
            </Popup>
            <ToggleButton Name="toggleButton" Grid.Column="0" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Grid.ColumnSpan="2" Style="{StaticResource ComboBoxToggleButton}" Background="{Binding Background , RelativeSource={RelativeSource TemplatedParent}}" IsChecked="{Binding IsDropDownOpen , Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" />
            <Border Grid.Column="0" Margin="1,0">
                <ContentPresenter Name="contentPresenter" Margin="{TemplateBinding Padding}" ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}" ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}" Content="{TemplateBinding SelectionBoxItem}" ContentStringFormat="{TemplateBinding SelectionBoxItemStringFormat}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" IsHitTestVisible="false" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
            </Border>
        </Grid>
    </ControlTemplate>
    <ControlTemplate x:Key="ComboBoxTopTemplate" TargetType="{x:Type ComboBox}">
        <ControlTemplate.Triggers>
            <Trigger Property="ItemsControl.HasItems" Value="false">
                <Setter TargetName="dropDownBorder" Property="Height" Value="95" />
            </Trigger>
            <Trigger Property="hc:DropDownElement.ConsistentWidth" Value="True">
                <Setter TargetName="dropDownBorder" Value="{Binding ActualWidth , ElementName=toggleButton}" Property="MaxWidth" />
                <Setter TargetName="dropDownBorder" Value="{Binding ActualWidth , ElementName=toggleButton}" Property="MinWidth" />
            </Trigger>
            <Trigger Property="hc:DropDownElement.AutoWidth" Value="True">
                <Setter TargetName="dropDownBorder" Value="{x:Static system:Double.MaxValue}" Property="MaxWidth" />
                <Setter TargetName="dropDownBorder" Value="{Binding ActualHeight , ElementName=toggleButton}" Property="MinWidth" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="ItemsControl.IsGrouping" Value="true" />
                    <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false" />
                </MultiTrigger.Conditions>
                <Setter Property="ScrollViewer.CanContentScroll" Value="false" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition SourceName="toggleButton" Property="UIElement.IsMouseOver" Value="true" />
                    <Condition SourceName="PART_Popup" Property="IsOpen" Value="false" />
                </MultiTrigger.Conditions>
                <Setter Value="{DynamicResource SecondaryBorderBrush}" Property="BorderBrush" />
            </MultiTrigger>
            <Trigger SourceName="PART_Popup" Property="IsOpen" Value="True">
                <Setter Value="{DynamicResource PrimaryBrush}" Property="BorderBrush" />
            </Trigger>
            <Trigger Property="UIElement.IsFocused" Value="True">
                <Setter Value="{DynamicResource PrimaryBrush}" Property="BorderBrush" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter TargetName="toggleButton" Property="UIElement.Opacity" Value="0.4" />
                <Setter TargetName="contentPresenter" Property="UIElement.Opacity" Value="0.4" />
            </Trigger>
        </ControlTemplate.Triggers>
        <Grid>
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition MinHeight="{Binding Path=(hc:InfoElement.MinContentHeight), RelativeSource={RelativeSource TemplatedParent}}" Height="{Binding Path=(hc:InfoElement.ContentHeight), RelativeSource={RelativeSource TemplatedParent}}" />
            </Grid.RowDefinitions>
            <Grid.ColumnDefinitions>
                <ColumnDefinition />
                <ColumnDefinition Width="30" />
            </Grid.ColumnDefinitions>
            <DockPanel Grid.ColumnSpan="2" LastChildFill="True" Margin="{TemplateBinding Padding}" Visibility="{Binding Path=(hc:InfoElement.Title), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource String2VisibilityConverter}}" HorizontalAlignment="{Binding Path=(hc:TitleElement.HorizontalAlignment), RelativeSource={RelativeSource TemplatedParent}}">
                <ContentPresenter DockPanel.Dock="Right" Foreground="{DynamicResource DangerBrush}" Margin="4,0,0,0" Content="{Binding Path=(hc:InfoElement.Symbol), RelativeSource={RelativeSource TemplatedParent}}" Visibility="{Binding Path=(hc:InfoElement.Necessary), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource Boolean2VisibilityConverter}}" />
                <TextBlock AutoTooltip="True" TextWrapping="NoWrap" TextTrimming="CharacterEllipsis" Margin="1,0,1,0" Text="{Binding Path=(hc:InfoElement.Title), RelativeSource={RelativeSource TemplatedParent}}" />
            </DockPanel>
            <Popup Name="PART_Popup" Grid.Row="1" Grid.Column="0" AllowsTransparency="true" Grid.ColumnSpan="2" Margin="1" PopupAnimation="{StaticResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}" Placement="Bottom" PlacementTarget="{Binding ElementName=toggleButton}" IsOpen="{Binding IsDropDownOpen , Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}">
                <Decorator Margin="8 0">
                    <Border Name="dropDownBorder" BorderThickness="0,1,0,0" Effect="{StaticResource EffectShadow2}" Margin="0,0,0,8" MaxHeight="{TemplateBinding MaxDropDownHeight}" BorderBrush="{DynamicResource BorderBrush}" Background="{DynamicResource RegionBrush}" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}" MinWidth="{Binding ActualWidth , ElementName=toggleButton}">
                        <hc:ToggleBlock VerticalContentAlignment="Stretch" HorizontalContentAlignment="Stretch" IsChecked="{Binding HasItems , RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}" UnCheckedContent="{hc:Empty}">
                            <hc:ToggleBlock.CheckedContent>
                                <ScrollViewer Margin="0,4">
                                    <ItemsPresenter Name="ItemsPresenter" DirectionalNavigation="Contained" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                                </ScrollViewer>
                            </hc:ToggleBlock.CheckedContent>
                        </hc:ToggleBlock>
                    </Border>
                </Decorator>
            </Popup>
            <ToggleButton Name="toggleButton" Grid.Row="1" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" Padding="{TemplateBinding Padding}" Grid.Column="0" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Grid.ColumnSpan="2" Style="{StaticResource ComboBoxWatermarkToggleButton}" Content="{Binding Path=(hc:InfoElement.Placeholder), RelativeSource={RelativeSource TemplatedParent}}" IsChecked="{Binding IsDropDownOpen , Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" />
            <Border Grid.Row="1" Grid.Column="0" Margin="1,0">
                <ContentPresenter Name="contentPresenter" Margin="{TemplateBinding Padding}" ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}" ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}" Content="{TemplateBinding SelectionBoxItem}" ContentStringFormat="{TemplateBinding SelectionBoxItemStringFormat}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" IsHitTestVisible="false" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
            </Border>
        </Grid>
    </ControlTemplate>
    <ControlTemplate x:Key="ComboBoxLeftTemplate" TargetType="{x:Type ComboBox}">
        <ControlTemplate.Triggers>
            <Trigger Property="ItemsControl.HasItems" Value="false">
                <Setter TargetName="dropDownBorder" Property="Height" Value="95" />
            </Trigger>
            <Trigger Property="hc:DropDownElement.ConsistentWidth" Value="True">
                <Setter TargetName="dropDownBorder" Value="{Binding ActualWidth , ElementName=toggleButton}" Property="MaxWidth" />
                <Setter TargetName="dropDownBorder" Value="{Binding ActualWidth , ElementName=toggleButton}" Property="MinWidth" />
            </Trigger>
            <Trigger Property="hc:DropDownElement.AutoWidth" Value="True">
                <Setter TargetName="dropDownBorder" Value="{x:Static system:Double.MaxValue}" Property="MaxWidth" />
                <Setter TargetName="dropDownBorder" Value="{Binding ActualHeight , ElementName=toggleButton}" Property="MinWidth" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="ItemsControl.IsGrouping" Value="true" />
                    <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false" />
                </MultiTrigger.Conditions>
                <Setter Property="ScrollViewer.CanContentScroll" Value="false" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition SourceName="toggleButton" Property="UIElement.IsMouseOver" Value="true" />
                    <Condition SourceName="PART_Popup" Property="IsOpen" Value="false" />
                </MultiTrigger.Conditions>
                <Setter Value="{DynamicResource SecondaryBorderBrush}" Property="BorderBrush" />
            </MultiTrigger>
            <Trigger SourceName="PART_Popup" Property="IsOpen" Value="True">
                <Setter Value="{DynamicResource PrimaryBrush}" Property="BorderBrush" />
            </Trigger>
            <Trigger Property="UIElement.IsFocused" Value="True">
                <Setter Value="{DynamicResource PrimaryBrush}" Property="BorderBrush" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter TargetName="toggleButton" Property="UIElement.Opacity" Value="0.4" />
                <Setter TargetName="contentPresenter" Property="UIElement.Opacity" Value="0.4" />
            </Trigger>
        </ControlTemplate.Triggers>
        <Grid Name="templateRoot" SnapsToDevicePixels="true" MinHeight="{Binding Path=(hc:InfoElement.MinContentHeight), RelativeSource={RelativeSource TemplatedParent}}" Height="{Binding Path=(hc:InfoElement.ContentHeight), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource Double2GridLengthConverter}}">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="{Binding Path=(hc:InfoElement.TitleWidth), RelativeSource={RelativeSource TemplatedParent}}" />
                <ColumnDefinition />
                <ColumnDefinition Width="30" />
            </Grid.ColumnDefinitions>
            <DockPanel LastChildFill="True" Visibility="{Binding Path=(hc:InfoElement.Title), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource String2VisibilityConverter}}" HorizontalAlignment="{Binding Path=(hc:TitleElement.HorizontalAlignment), RelativeSource={RelativeSource TemplatedParent}}" VerticalAlignment="{Binding Path=(hc:TitleElement.VerticalAlignment), RelativeSource={RelativeSource TemplatedParent}}" Margin="{Binding Path=(hc:TitleElement.MarginOnTheLeft), RelativeSource={RelativeSource TemplatedParent}}">
                <ContentPresenter DockPanel.Dock="Right" Foreground="{DynamicResource DangerBrush}" Margin="4,0,0,0" Content="{Binding Path=(hc:InfoElement.Symbol), RelativeSource={RelativeSource TemplatedParent}}" Visibility="{Binding Path=(hc:InfoElement.Necessary), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource Boolean2VisibilityConverter}}" />
                <TextBlock AutoTooltip="True" TextWrapping="NoWrap" TextTrimming="CharacterEllipsis" Text="{Binding Path=(hc:InfoElement.Title), RelativeSource={RelativeSource TemplatedParent}}" />
            </DockPanel>
            <Popup Name="PART_Popup" Grid.Column="1" AllowsTransparency="true" Grid.ColumnSpan="2" Margin="1" PopupAnimation="{StaticResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}" Placement="Bottom" PlacementTarget="{Binding ElementName=toggleButton}" IsOpen="{Binding IsDropDownOpen , Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}">
                <Decorator Margin="8 0">
                    <Border Name="dropDownBorder" BorderThickness="0,1,0,0" Effect="{StaticResource EffectShadow2}" Margin="0,0,0,8" MaxHeight="{TemplateBinding MaxDropDownHeight}" BorderBrush="{DynamicResource BorderBrush}" Background="{DynamicResource RegionBrush}" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}" MinWidth="{Binding ActualWidth , ElementName=toggleButton}">
                        <hc:ToggleBlock VerticalContentAlignment="Stretch" HorizontalContentAlignment="Stretch" IsChecked="{Binding HasItems , RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}" UnCheckedContent="{hc:Empty}">
                            <hc:ToggleBlock.CheckedContent>
                                <ScrollViewer Margin="0,4">
                                    <ItemsPresenter Name="ItemsPresenter" DirectionalNavigation="Contained" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                                </ScrollViewer>
                            </hc:ToggleBlock.CheckedContent>
                        </hc:ToggleBlock>
                    </Border>
                </Decorator>
            </Popup>
            <ToggleButton Name="toggleButton" Grid.Column="1" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" Padding="{TemplateBinding Padding}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Grid.ColumnSpan="2" Style="{StaticResource ComboBoxWatermarkToggleButton}" Content="{Binding Path=(hc:InfoElement.Placeholder), RelativeSource={RelativeSource TemplatedParent}}" IsChecked="{Binding IsDropDownOpen , Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" />
            <Border Grid.Column="1" Margin="1,0">
                <ContentPresenter Name="contentPresenter" Margin="{TemplateBinding Padding}" ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}" ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}" Content="{TemplateBinding SelectionBoxItem}" ContentStringFormat="{TemplateBinding SelectionBoxItemStringFormat}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" IsHitTestVisible="false" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
            </Border>
        </Grid>
    </ControlTemplate>
    <Style x:Key="ComboBoxEditableTextBox" TargetType="{x:Type TextBox}">
        <Setter Property="FrameworkElement.OverridesDefaultStyle" Value="true" />
        <Setter Property="UIElement.AllowDrop" Value="true" />
        <Setter Property="MinWidth" Value="0" />
        <Setter Property="MinHeight" Value="0" />
        <Setter Property="Padding" Value="{StaticResource DefaultControlPadding}" />
        <Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst" />
        <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <ScrollViewer Name="PART_ContentHost" Padding="{TemplateBinding Padding}" Background="Transparent" Focusable="false" ScrollViewer.HorizontalScrollBarVisibility="Hidden" ScrollViewer.VerticalScrollBarVisibility="Hidden" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <ControlTemplate x:Key="ComboBoxEditableTemplate" TargetType="{x:Type ComboBox}">
        <ControlTemplate.Triggers>
            <Trigger Property="ItemsControl.HasItems" Value="false">
                <Setter TargetName="dropDownBorder" Property="Height" Value="95" />
            </Trigger>
            <Trigger Property="hc:DropDownElement.ConsistentWidth" Value="True">
                <Setter TargetName="dropDownBorder" Value="{Binding ActualWidth , ElementName=toggleButton}" Property="MaxWidth" />
                <Setter TargetName="dropDownBorder" Value="{Binding ActualWidth , ElementName=toggleButton}" Property="MinWidth" />
            </Trigger>
            <Trigger Property="hc:DropDownElement.AutoWidth" Value="True">
                <Setter TargetName="dropDownBorder" Value="{x:Static system:Double.MaxValue}" Property="MaxWidth" />
                <Setter TargetName="dropDownBorder" Value="{Binding ActualHeight , ElementName=toggleButton}" Property="MinWidth" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="ItemsControl.IsGrouping" Value="true" />
                    <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false" />
                </MultiTrigger.Conditions>
                <Setter Property="ScrollViewer.CanContentScroll" Value="false" />
            </MultiTrigger>
            <Trigger SourceName="PART_EditableTextBox" Property="UIElement.IsMouseOver" Value="true">
                <Setter Value="{DynamicResource SecondaryBorderBrush}" Property="BorderBrush" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition SourceName="toggleButton" Property="UIElement.IsMouseOver" Value="true" />
                    <Condition SourceName="PART_EditableTextBox" Property="UIElement.IsFocused" Value="false" />
                </MultiTrigger.Conditions>
                <Setter Value="{DynamicResource SecondaryBorderBrush}" Property="BorderBrush" />
            </MultiTrigger>
            <Trigger SourceName="PART_EditableTextBox" Property="UIElement.IsFocused" Value="True">
                <Setter Value="{DynamicResource PrimaryBrush}" Property="BorderBrush" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="UIElement.Opacity" Value="0.4" />
            </Trigger>
        </ControlTemplate.Triggers>
        <Grid Name="templateRoot" SnapsToDevicePixels="true">
            <Grid.ColumnDefinitions>
                <ColumnDefinition />
                <ColumnDefinition Width="30" />
            </Grid.ColumnDefinitions>
            <Popup Name="PART_Popup" AllowsTransparency="true" Grid.ColumnSpan="2" PopupAnimation="{StaticResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}" Placement="Bottom" PlacementTarget="{Binding ElementName=toggleButton}" IsOpen="{Binding IsDropDownOpen , RelativeSource={RelativeSource TemplatedParent}}">
                <Decorator Margin="8 0">
                    <Border Name="dropDownBorder" BorderThickness="0,1,0,0" Effect="{StaticResource EffectShadow2}" Margin="0,0,0,8" MaxHeight="{TemplateBinding MaxDropDownHeight}" BorderBrush="{DynamicResource BorderBrush}" Background="{DynamicResource RegionBrush}" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}" MinWidth="{Binding ActualWidth , ElementName=toggleButton}">
                        <hc:ToggleBlock VerticalContentAlignment="Stretch" HorizontalContentAlignment="Stretch" IsChecked="{Binding HasItems , RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}" UnCheckedContent="{hc:Empty}">
                            <hc:ToggleBlock.CheckedContent>
                                <ScrollViewer Margin="0,4">
                                    <ItemsPresenter Name="ItemsPresenter" DirectionalNavigation="Contained" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                                </ScrollViewer>
                            </hc:ToggleBlock.CheckedContent>
                        </hc:ToggleBlock>
                    </Border>
                </Decorator>
            </Popup>
            <ToggleButton Name="toggleButton" Grid.Column="0" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Grid.ColumnSpan="2" Style="{StaticResource ComboBoxToggleButton}" IsChecked="{Binding IsDropDownOpen , Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" />
            <Border Grid.Column="0" Margin="-1,1">
                <TextBox Name="PART_EditableTextBox" Padding="{TemplateBinding Padding}" Background="{TemplateBinding Background}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" Style="{StaticResource ComboBoxEditableTextBox}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" IsReadOnly="{Binding IsReadOnly , RelativeSource={RelativeSource TemplatedParent}}" />
            </Border>
        </Grid>
    </ControlTemplate>
    <ControlTemplate x:Key="ComboBoxEditableTopTemplate" TargetType="{x:Type ComboBox}">
        <ControlTemplate.Triggers>
            <Trigger Property="ItemsControl.HasItems" Value="false">
                <Setter TargetName="dropDownBorder" Property="Height" Value="95" />
            </Trigger>
            <Trigger Property="hc:DropDownElement.ConsistentWidth" Value="True">
                <Setter TargetName="dropDownBorder" Value="{Binding ActualWidth , ElementName=toggleButton}" Property="MaxWidth" />
                <Setter TargetName="dropDownBorder" Value="{Binding ActualWidth , ElementName=toggleButton}" Property="MinWidth" />
            </Trigger>
            <Trigger Property="hc:DropDownElement.AutoWidth" Value="True">
                <Setter TargetName="dropDownBorder" Value="{x:Static system:Double.MaxValue}" Property="MaxWidth" />
                <Setter TargetName="dropDownBorder" Value="{Binding ActualHeight , ElementName=toggleButton}" Property="MinWidth" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="ItemsControl.IsGrouping" Value="true" />
                    <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false" />
                </MultiTrigger.Conditions>
                <Setter Property="ScrollViewer.CanContentScroll" Value="false" />
            </MultiTrigger>
            <Trigger SourceName="PART_EditableTextBox" Property="UIElement.IsMouseOver" Value="true">
                <Setter Value="{DynamicResource SecondaryBorderBrush}" Property="BorderBrush" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition SourceName="toggleButton" Property="UIElement.IsMouseOver" Value="true" />
                    <Condition SourceName="PART_EditableTextBox" Property="UIElement.IsFocused" Value="false" />
                </MultiTrigger.Conditions>
                <Setter Value="{DynamicResource SecondaryBorderBrush}" Property="BorderBrush" />
            </MultiTrigger>
            <Trigger SourceName="PART_EditableTextBox" Property="UIElement.IsFocused" Value="True">
                <Setter Value="{DynamicResource PrimaryBrush}" Property="BorderBrush" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter TargetName="toggleButton" Property="UIElement.Opacity" Value="0.4" />
                <Setter TargetName="border" Property="UIElement.Opacity" Value="0.4" />
            </Trigger>
        </ControlTemplate.Triggers>
        <Grid Name="templateRoot" SnapsToDevicePixels="true">
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition MinHeight="{Binding Path=(hc:InfoElement.MinContentHeight), RelativeSource={RelativeSource TemplatedParent}}" Height="{Binding Path=(hc:InfoElement.ContentHeight), RelativeSource={RelativeSource TemplatedParent}}" />
            </Grid.RowDefinitions>
            <Grid.ColumnDefinitions>
                <ColumnDefinition />
                <ColumnDefinition Width="30" />
            </Grid.ColumnDefinitions>
            <DockPanel Grid.ColumnSpan="2" LastChildFill="True" Margin="{TemplateBinding Padding}" Visibility="{Binding Path=(hc:InfoElement.Title), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource String2VisibilityConverter}}" HorizontalAlignment="{Binding Path=(hc:TitleElement.HorizontalAlignment), RelativeSource={RelativeSource TemplatedParent}}">
                <ContentPresenter DockPanel.Dock="Right" Foreground="{DynamicResource DangerBrush}" Margin="4,0,0,0" Content="{Binding Path=(hc:InfoElement.Symbol), RelativeSource={RelativeSource TemplatedParent}}" Visibility="{Binding Path=(hc:InfoElement.Necessary), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource Boolean2VisibilityConverter}}" />
                <TextBlock AutoTooltip="True" TextWrapping="NoWrap" TextTrimming="CharacterEllipsis" Margin="1,0,1,0" Text="{Binding Path=(hc:InfoElement.Title), RelativeSource={RelativeSource TemplatedParent}}" />
            </DockPanel>
            <Popup Name="PART_Popup" Grid.Column="0" Grid.Row="1" AllowsTransparency="true" Grid.ColumnSpan="2" PopupAnimation="{StaticResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}" Placement="Bottom" PlacementTarget="{Binding ElementName=toggleButton}" IsOpen="{Binding IsDropDownOpen , RelativeSource={RelativeSource TemplatedParent}}">
                <Decorator Margin="8 0">
                    <Border Name="dropDownBorder" BorderThickness="0,1,0,0" Effect="{StaticResource EffectShadow2}" Margin="0,0,0,8" MaxHeight="{TemplateBinding MaxDropDownHeight}" BorderBrush="{DynamicResource BorderBrush}" Background="{DynamicResource RegionBrush}" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}" MinWidth="{Binding ActualWidth , ElementName=toggleButton}">
                        <hc:ToggleBlock VerticalContentAlignment="Stretch" HorizontalContentAlignment="Stretch" IsChecked="{Binding HasItems , RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}" UnCheckedContent="{hc:Empty}">
                            <hc:ToggleBlock.CheckedContent>
                                <ScrollViewer Margin="0,4">
                                    <ItemsPresenter Name="ItemsPresenter" DirectionalNavigation="Contained" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                                </ScrollViewer>
                            </hc:ToggleBlock.CheckedContent>
                        </hc:ToggleBlock>
                    </Border>
                </Decorator>
            </Popup>
            <ToggleButton Name="toggleButton" Grid.Row="1" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" Padding="{TemplateBinding Padding}" Grid.Column="0" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Grid.ColumnSpan="2" Style="{StaticResource ComboBoxWatermarkToggleButton}" Content="{Binding Path=(hc:InfoElement.Placeholder), RelativeSource={RelativeSource TemplatedParent}}" IsChecked="{Binding IsDropDownOpen , Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" />
            <Border Name="border" Grid.Row="1" Grid.Column="0" Margin="-1,1">
                <TextBox Name="PART_EditableTextBox" Padding="{TemplateBinding Padding}" Background="{TemplateBinding Background}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" Style="{StaticResource ComboBoxEditableTextBox}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" IsReadOnly="{Binding IsReadOnly , RelativeSource={RelativeSource TemplatedParent}}" />
            </Border>
        </Grid>
    </ControlTemplate>
    <ControlTemplate x:Key="ComboBoxEditableLeftTemplate" TargetType="{x:Type ComboBox}">
        <ControlTemplate.Triggers>
            <Trigger Property="ItemsControl.HasItems" Value="false">
                <Setter TargetName="dropDownBorder" Property="Height" Value="95" />
            </Trigger>
            <Trigger Property="hc:DropDownElement.ConsistentWidth" Value="True">
                <Setter TargetName="dropDownBorder" Value="{Binding ActualWidth , ElementName=toggleButton}" Property="MaxWidth" />
                <Setter TargetName="dropDownBorder" Value="{Binding ActualWidth , ElementName=toggleButton}" Property="MinWidth" />
            </Trigger>
            <Trigger Property="hc:DropDownElement.AutoWidth" Value="True">
                <Setter TargetName="dropDownBorder" Value="{x:Static system:Double.MaxValue}" Property="MaxWidth" />
                <Setter TargetName="dropDownBorder" Value="{Binding ActualHeight , ElementName=toggleButton}" Property="MinWidth" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="ItemsControl.IsGrouping" Value="true" />
                    <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false" />
                </MultiTrigger.Conditions>
                <Setter Property="ScrollViewer.CanContentScroll" Value="false" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition SourceName="border" Property="UIElement.IsMouseOver" Value="true" />
                    <Condition SourceName="PART_EditableTextBox" Property="UIElement.IsFocused" Value="false" />
                </MultiTrigger.Conditions>
                <Setter Value="{DynamicResource SecondaryBorderBrush}" Property="BorderBrush" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition SourceName="toggleButton" Property="UIElement.IsMouseOver" Value="true" />
                    <Condition SourceName="PART_EditableTextBox" Property="UIElement.IsFocused" Value="false" />
                </MultiTrigger.Conditions>
                <Setter Value="{DynamicResource SecondaryBorderBrush}" Property="BorderBrush" />
            </MultiTrigger>
            <Trigger SourceName="PART_EditableTextBox" Property="UIElement.IsFocused" Value="True">
                <Setter Value="{DynamicResource PrimaryBrush}" Property="BorderBrush" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter TargetName="toggleButton" Property="UIElement.Opacity" Value="0.4" />
                <Setter TargetName="border" Property="UIElement.Opacity" Value="0.4" />
            </Trigger>
        </ControlTemplate.Triggers>
        <Grid Name="templateRoot" SnapsToDevicePixels="true" MinHeight="{Binding Path=(hc:InfoElement.MinContentHeight), RelativeSource={RelativeSource TemplatedParent}}" Height="{Binding Path=(hc:InfoElement.ContentHeight), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource Double2GridLengthConverter}}">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="{Binding Path=(hc:InfoElement.TitleWidth), RelativeSource={RelativeSource TemplatedParent}}" />
                <ColumnDefinition />
                <ColumnDefinition Width="30" />
            </Grid.ColumnDefinitions>
            <DockPanel LastChildFill="True" Visibility="{Binding Path=(hc:InfoElement.Title), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource String2VisibilityConverter}}" HorizontalAlignment="{Binding Path=(hc:TitleElement.HorizontalAlignment), RelativeSource={RelativeSource TemplatedParent}}" VerticalAlignment="{Binding Path=(hc:TitleElement.VerticalAlignment), RelativeSource={RelativeSource TemplatedParent}}" Margin="{Binding Path=(hc:TitleElement.MarginOnTheLeft), RelativeSource={RelativeSource TemplatedParent}}">
                <ContentPresenter DockPanel.Dock="Right" Foreground="{DynamicResource DangerBrush}" Margin="4,0,0,0" Content="{Binding Path=(hc:InfoElement.Symbol), RelativeSource={RelativeSource TemplatedParent}}" Visibility="{Binding Path=(hc:InfoElement.Necessary), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource Boolean2VisibilityConverter}}" />
                <TextBlock AutoTooltip="True" TextWrapping="NoWrap" TextTrimming="CharacterEllipsis" Text="{Binding Path=(hc:InfoElement.Title), RelativeSource={RelativeSource TemplatedParent}}" />
            </DockPanel>
            <Popup Name="PART_Popup" Grid.Column="1" AllowsTransparency="true" Grid.ColumnSpan="2" PopupAnimation="{StaticResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}" Placement="Bottom" PlacementTarget="{Binding ElementName=toggleButton}" IsOpen="{Binding IsDropDownOpen , RelativeSource={RelativeSource TemplatedParent}}">
                <Decorator Margin="8 0">
                    <Border Name="dropDownBorder" BorderThickness="0,1,0,0" Effect="{StaticResource EffectShadow2}" Margin="0,0,0,8" MaxHeight="{TemplateBinding MaxDropDownHeight}" BorderBrush="{DynamicResource BorderBrush}" Background="{DynamicResource RegionBrush}" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}" MinWidth="{Binding ActualWidth , ElementName=toggleButton}">
                        <hc:ToggleBlock VerticalContentAlignment="Stretch" HorizontalContentAlignment="Stretch" IsChecked="{Binding HasItems , RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}" UnCheckedContent="{hc:Empty}">
                            <hc:ToggleBlock.CheckedContent>
                                <ScrollViewer Margin="0,4">
                                    <ItemsPresenter Name="ItemsPresenter" DirectionalNavigation="Contained" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                                </ScrollViewer>
                            </hc:ToggleBlock.CheckedContent>
                        </hc:ToggleBlock>
                    </Border>
                </Decorator>
            </Popup>
            <ToggleButton Name="toggleButton" Grid.Column="1" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" Padding="{TemplateBinding Padding}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Grid.ColumnSpan="2" Style="{StaticResource ComboBoxWatermarkToggleButton}" Content="{Binding Path=(hc:InfoElement.Placeholder), RelativeSource={RelativeSource TemplatedParent}}" IsChecked="{Binding IsDropDownOpen , Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" />
            <Border Name="border" Grid.Column="1" Background="Transparent" Margin="-1,1">
                <TextBox Name="PART_EditableTextBox" Padding="{TemplateBinding Padding}" Background="{TemplateBinding Background}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" Style="{StaticResource ComboBoxEditableTextBox}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" IsReadOnly="{Binding IsReadOnly , RelativeSource={RelativeSource TemplatedParent}}" />
            </Border>
        </Grid>
    </ControlTemplate>
    <Style x:Key="ComboBoxItemBaseStyle" TargetType="{x:Type ComboBoxItem}">
        <Setter Property="UIElement.SnapsToDevicePixels" Value="True" />
        <Setter Property="Padding" Value="{StaticResource DefaultControlPadding}" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="MinHeight" Value="{StaticResource DefaultControlHeight}" />
        <Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBoxItem}">
                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="ListBoxItem.IsSelected" Value="False" />
                                <Condition Property="UIElement.IsMouseOver" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="Bd" Value="{DynamicResource SecondaryRegionBrush}" Property="Background" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="ListBoxItem.IsSelected" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="Bd" Value="{DynamicResource PrimaryBrush}" Property="Background" />
                            <Setter Property="Foreground" Value="White" />
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                    <Border Name="Bd" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="true">
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ComboBoxBaseStyle" TargetType="{x:Type ComboBox}">
        <Style.Triggers>
            <Trigger Property="ComboBox.IsEditable" Value="true">
                <Setter Property="IsTabStop" Value="false" />
                <Setter Property="Template" Value="{StaticResource ComboBoxEditableTemplate}" />
            </Trigger>
        </Style.Triggers>
        <Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="Background" Value="{DynamicResource RegionBrush}" />
        <Setter Property="ItemContainerStyle" Value="{StaticResource ComboBoxItemBaseStyle}" />
        <Setter Property="hc:BorderElement.CornerRadius" Value="{StaticResource DefaultCornerRadius}" />
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource PrimaryTextBrush}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
        <Setter Property="MinHeight" Value="{StaticResource DefaultControlHeight}" />
        <Setter Property="ScrollViewer.CanContentScroll" Value="true" />
        <Setter Property="ScrollViewer.PanningMode" Value="Both" />
        <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
        <Setter Property="Padding" Value="{StaticResource DefaultInputPadding}" />
        <Setter Property="hc:TitleElement.MarginOnTheLeft" Value="0,8,6,8" />
        <Setter Property="Template" Value="{StaticResource ComboBoxTemplate}" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Validation.ErrorTemplate" Value="{x:Null}" />
    </Style>
    <Style x:Key="ComboBoxExtendBaseStyle" BasedOn="{StaticResource ComboBoxBaseStyle}" TargetType="{x:Type ComboBox}">
        <Style.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="ComboBox.IsEditable" Value="False" />
                    <Condition Property="hc:TitleElement.TitlePlacement" Value="Left" />
                </MultiTrigger.Conditions>
                <Setter Property="Template" Value="{StaticResource ComboBoxLeftTemplate}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="ComboBox.IsEditable" Value="True" />
                    <Condition Property="hc:TitleElement.TitlePlacement" Value="Top" />
                </MultiTrigger.Conditions>
                <Setter Property="Template" Value="{StaticResource ComboBoxEditableTopTemplate}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="ComboBox.IsEditable" Value="True" />
                    <Condition Property="hc:TitleElement.TitlePlacement" Value="Left" />
                </MultiTrigger.Conditions>
                <Setter Property="Template" Value="{StaticResource ComboBoxEditableLeftTemplate}" />
            </MultiTrigger>
        </Style.Triggers>
        <Setter Property="Height" Value="Auto" />
        <Setter Property="Template" Value="{StaticResource ComboBoxTopTemplate}" />
        <Setter Property="hc:InfoElement.Symbol" Value="●" />
        <Setter Property="hc:InfoElement.ContentHeight" Value="{x:Static system:Double.NaN}" />
        <Setter Property="hc:InfoElement.MinContentHeight" Value="{StaticResource DefaultControlHeight}" />
    </Style>
    <ControlTemplate x:Key="ComboBoxPlusTopTemplate" TargetType="{x:Type hc:ComboBox}">
        <ControlTemplate.Resources>
            <Storyboard Name="StoryboardShow">
                <ThicknessAnimation TargetName="TextBlockError" TargetProperty="Margin" To="9,0,0,-18" Duration="0:0:.2" />
            </Storyboard>
            <Storyboard Name="StoryboardHidden">
                <ThicknessAnimation TargetName="TextBlockError" TargetProperty="Margin" To="9,0,0,4" Duration="0:0:0" />
            </Storyboard>
        </ControlTemplate.Resources>
        <ControlTemplate.Triggers>
            <Trigger Property="ItemsControl.HasItems" Value="false">
                <Setter TargetName="dropDownBorder" Property="Height" Value="95" />
            </Trigger>
            <Trigger Property="hc:DropDownElement.ConsistentWidth" Value="True">
                <Setter TargetName="dropDownBorder" Value="{Binding ActualWidth , ElementName=toggleButton}" Property="MaxWidth" />
                <Setter TargetName="dropDownBorder" Value="{Binding ActualWidth , ElementName=toggleButton}" Property="MinWidth" />
            </Trigger>
            <Trigger Property="hc:DropDownElement.AutoWidth" Value="True">
                <Setter TargetName="dropDownBorder" Value="{x:Static system:Double.MaxValue}" Property="MaxWidth" />
                <Setter TargetName="dropDownBorder" Value="{Binding ActualHeight , ElementName=toggleButton}" Property="MinWidth" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="ItemsControl.IsGrouping" Value="true" />
                    <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false" />
                </MultiTrigger.Conditions>
                <Setter Property="ScrollViewer.CanContentScroll" Value="false" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition SourceName="toggleButton" Property="UIElement.IsMouseOver" Value="true" />
                    <Condition SourceName="PART_Popup" Property="IsOpen" Value="false" />
                </MultiTrigger.Conditions>
                <Setter Value="{DynamicResource SecondaryBorderBrush}" Property="BorderBrush" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition SourceName="ButtonClear" Property="UIElement.IsMouseOver" Value="true" />
                    <Condition SourceName="PART_Popup" Property="IsOpen" Value="false" />
                </MultiTrigger.Conditions>
                <Setter Value="{DynamicResource SecondaryBorderBrush}" Property="BorderBrush" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition SourceName="toggleButton" Property="UIElement.IsMouseOver" Value="true" />
                    <Condition Property="hc:ComboBox.ShowClearButton" Value="True" />
                </MultiTrigger.Conditions>
                <Setter TargetName="ButtonClear" Property="Visibility" Value="Visible" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition SourceName="ButtonClear" Property="UIElement.IsMouseOver" Value="true" />
                    <Condition Property="hc:ComboBox.ShowClearButton" Value="True" />
                </MultiTrigger.Conditions>
                <Setter TargetName="ButtonClear" Property="Visibility" Value="Visible" />
            </MultiTrigger>
            <Trigger SourceName="PART_Popup" Property="IsOpen" Value="True">
                <Setter Value="{DynamicResource PrimaryBrush}" Property="BorderBrush" />
            </Trigger>
            <Trigger Property="UIElement.IsFocused" Value="True">
                <Setter Value="{DynamicResource PrimaryBrush}" Property="BorderBrush" />
            </Trigger>
            <Trigger Property="hc:ComboBox.IsError" Value="true">
                <Trigger.EnterActions>
                    <BeginStoryboard Storyboard="{StaticResource StoryboardShow}" />
                </Trigger.EnterActions>
                <Trigger.ExitActions>
                    <BeginStoryboard Storyboard="{StaticResource StoryboardHidden}" />
                </Trigger.ExitActions>
                <Setter Value="{DynamicResource DangerBrush}" Property="BorderBrush" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter TargetName="toggleButton" Property="UIElement.Opacity" Value="0.4" />
                <Setter TargetName="contentPresenter" Property="UIElement.Opacity" Value="0.4" />
            </Trigger>
        </ControlTemplate.Triggers>
        <Grid>
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition MinHeight="{Binding Path=(hc:InfoElement.MinContentHeight), RelativeSource={RelativeSource TemplatedParent}}" Height="{Binding Path=(hc:InfoElement.ContentHeight), RelativeSource={RelativeSource TemplatedParent}}" />
            </Grid.RowDefinitions>
            <Grid.ColumnDefinitions>
                <ColumnDefinition />
                <ColumnDefinition Width="Auto" MinWidth="30" />
            </Grid.ColumnDefinitions>
            <DockPanel Grid.ColumnSpan="2" LastChildFill="True" Margin="{TemplateBinding Padding}" Visibility="{Binding Path=(hc:InfoElement.Title), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource String2VisibilityConverter}}" HorizontalAlignment="{Binding Path=(hc:TitleElement.HorizontalAlignment), RelativeSource={RelativeSource TemplatedParent}}">
                <ContentPresenter DockPanel.Dock="Right" Foreground="{DynamicResource DangerBrush}" Margin="4,0,0,0" Content="{Binding Path=(hc:InfoElement.Symbol), RelativeSource={RelativeSource TemplatedParent}}" Visibility="{Binding Path=(hc:InfoElement.Necessary), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource Boolean2VisibilityConverter}}" />
                <TextBlock AutoTooltip="True" TextWrapping="NoWrap" TextTrimming="CharacterEllipsis" Margin="1,0,1,0" Text="{Binding Path=(hc:InfoElement.Title), RelativeSource={RelativeSource TemplatedParent}}" />
            </DockPanel>
            <Popup Name="PART_Popup" Grid.Row="1" Grid.Column="0" AllowsTransparency="true" Grid.ColumnSpan="2" Margin="1" PopupAnimation="{StaticResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}" Placement="Bottom" PlacementTarget="{Binding ElementName=toggleButton}" IsOpen="{Binding IsDropDownOpen , Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}">
                <Decorator Margin="8 0">
                    <Border Name="dropDownBorder" BorderThickness="0,1,0,0" Effect="{StaticResource EffectShadow2}" Margin="0,0,0,8" MaxHeight="{TemplateBinding MaxDropDownHeight}" BorderBrush="{DynamicResource BorderBrush}" Background="{DynamicResource RegionBrush}" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}" MinWidth="{Binding ActualWidth , ElementName=toggleButton}">
                        <hc:ToggleBlock VerticalContentAlignment="Stretch" HorizontalContentAlignment="Stretch" IsChecked="{Binding HasItems , RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}" UnCheckedContent="{hc:Empty}">
                            <hc:ToggleBlock.CheckedContent>
                                <ScrollViewer Margin="0,4">
                                    <ItemsPresenter Name="ItemsPresenter" DirectionalNavigation="Contained" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                                </ScrollViewer>
                            </hc:ToggleBlock.CheckedContent>
                        </hc:ToggleBlock>
                    </Border>
                </Decorator>
            </Popup>
            <TextBlock Name="TextBlockError" Grid.Column="0" Grid.ColumnSpan="2" TextBlock.FontSize="12" Text="{TemplateBinding ErrorStr}" VerticalAlignment="Bottom" Margin="9,0,0,4" Foreground="{DynamicResource DangerBrush}" Grid.Row="1" />
            <ToggleButton Name="toggleButton" Grid.Row="1" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" Padding="{TemplateBinding Padding}" Grid.Column="0" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Grid.ColumnSpan="2" Style="{StaticResource ComboBoxWatermarkToggleButton}" Content="{Binding Path=(hc:InfoElement.Placeholder), RelativeSource={RelativeSource TemplatedParent}}" IsChecked="{Binding IsDropDownOpen , Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" />
            <Border Grid.Row="1" Grid.Column="0" Margin="1,0">
                <ContentPresenter Name="contentPresenter" Margin="{TemplateBinding Padding}" ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}" ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}" Content="{TemplateBinding SelectionBoxItem}" ContentStringFormat="{TemplateBinding SelectionBoxItemStringFormat}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" IsHitTestVisible="false" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
            </Border>
            <Button Name="ButtonClear" Grid.Row="1" Command="interactivity:ControlCommands.Clear" Margin="0,0,26,0" Visibility="Collapsed" Width="16" Grid.Column="1" Style="{StaticResource ButtonIcon}" Padding="0" Geometry="{StaticResource DeleteFillCircleGeometry}" Foreground="{TemplateBinding BorderBrush}" />
        </Grid>
    </ControlTemplate>
    <ControlTemplate x:Key="ComboBoxPlusLeftTemplate" TargetType="{x:Type hc:ComboBox}">
        <ControlTemplate.Resources>
            <Storyboard Name="StoryboardShow">
                <ThicknessAnimation TargetName="TextBlockError" TargetProperty="Margin" To="9,0,0,-18" Duration="0:0:.2" />
            </Storyboard>
            <Storyboard Name="StoryboardHidden">
                <ThicknessAnimation TargetName="TextBlockError" TargetProperty="Margin" To="9,0,0,4" Duration="0:0:0" />
            </Storyboard>
        </ControlTemplate.Resources>
        <ControlTemplate.Triggers>
            <Trigger Property="ItemsControl.HasItems" Value="false">
                <Setter TargetName="dropDownBorder" Property="Height" Value="95" />
            </Trigger>
            <Trigger Property="hc:DropDownElement.ConsistentWidth" Value="True">
                <Setter TargetName="dropDownBorder" Value="{Binding ActualWidth , ElementName=toggleButton}" Property="MaxWidth" />
                <Setter TargetName="dropDownBorder" Value="{Binding ActualWidth , ElementName=toggleButton}" Property="MinWidth" />
            </Trigger>
            <Trigger Property="hc:DropDownElement.AutoWidth" Value="True">
                <Setter TargetName="dropDownBorder" Value="{x:Static system:Double.MaxValue}" Property="MaxWidth" />
                <Setter TargetName="dropDownBorder" Value="{Binding ActualHeight , ElementName=toggleButton}" Property="MinWidth" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="ItemsControl.IsGrouping" Value="true" />
                    <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false" />
                </MultiTrigger.Conditions>
                <Setter Property="ScrollViewer.CanContentScroll" Value="false" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition SourceName="toggleButton" Property="UIElement.IsMouseOver" Value="true" />
                    <Condition SourceName="PART_Popup" Property="IsOpen" Value="false" />
                </MultiTrigger.Conditions>
                <Setter Value="{DynamicResource SecondaryBorderBrush}" Property="BorderBrush" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition SourceName="ButtonClear" Property="UIElement.IsMouseOver" Value="true" />
                    <Condition SourceName="PART_Popup" Property="IsOpen" Value="false" />
                </MultiTrigger.Conditions>
                <Setter Value="{DynamicResource SecondaryBorderBrush}" Property="BorderBrush" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition SourceName="toggleButton" Property="UIElement.IsMouseOver" Value="true" />
                    <Condition Property="hc:ComboBox.ShowClearButton" Value="True" />
                </MultiTrigger.Conditions>
                <Setter TargetName="ButtonClear" Property="Visibility" Value="Visible" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition SourceName="ButtonClear" Property="UIElement.IsMouseOver" Value="true" />
                    <Condition Property="hc:ComboBox.ShowClearButton" Value="True" />
                </MultiTrigger.Conditions>
                <Setter TargetName="ButtonClear" Property="Visibility" Value="Visible" />
            </MultiTrigger>
            <Trigger SourceName="PART_Popup" Property="IsOpen" Value="True">
                <Setter Value="{DynamicResource PrimaryBrush}" Property="BorderBrush" />
            </Trigger>
            <Trigger Property="UIElement.IsFocused" Value="True">
                <Setter Value="{DynamicResource PrimaryBrush}" Property="BorderBrush" />
            </Trigger>
            <Trigger Property="hc:ComboBox.IsError" Value="true">
                <Trigger.EnterActions>
                    <BeginStoryboard Storyboard="{StaticResource StoryboardShow}" />
                </Trigger.EnterActions>
                <Trigger.ExitActions>
                    <BeginStoryboard Storyboard="{StaticResource StoryboardHidden}" />
                </Trigger.ExitActions>
                <Setter Value="{DynamicResource DangerBrush}" Property="BorderBrush" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter TargetName="toggleButton" Property="UIElement.Opacity" Value="0.4" />
                <Setter TargetName="contentPresenter" Property="UIElement.Opacity" Value="0.4" />
            </Trigger>
        </ControlTemplate.Triggers>
        <Grid Name="templateRoot" SnapsToDevicePixels="true" MinHeight="{Binding Path=(hc:InfoElement.MinContentHeight), RelativeSource={RelativeSource TemplatedParent}}" Height="{Binding Path=(hc:InfoElement.ContentHeight), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource Double2GridLengthConverter}}">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="{Binding Path=(hc:InfoElement.TitleWidth), RelativeSource={RelativeSource TemplatedParent}}" />
                <ColumnDefinition />
                <ColumnDefinition Width="Auto" MinWidth="30" />
            </Grid.ColumnDefinitions>
            <DockPanel LastChildFill="True" Visibility="{Binding Path=(hc:InfoElement.Title), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource String2VisibilityConverter}}" HorizontalAlignment="{Binding Path=(hc:TitleElement.HorizontalAlignment), RelativeSource={RelativeSource TemplatedParent}}" VerticalAlignment="{Binding Path=(hc:TitleElement.VerticalAlignment), RelativeSource={RelativeSource TemplatedParent}}" Margin="{Binding Path=(hc:TitleElement.MarginOnTheLeft), RelativeSource={RelativeSource TemplatedParent}}">
                <ContentPresenter DockPanel.Dock="Right" Foreground="{DynamicResource DangerBrush}" Margin="4,0,0,0" Content="{Binding Path=(hc:InfoElement.Symbol), RelativeSource={RelativeSource TemplatedParent}}" Visibility="{Binding Path=(hc:InfoElement.Necessary), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource Boolean2VisibilityConverter}}" />
                <TextBlock AutoTooltip="True" TextWrapping="NoWrap" TextTrimming="CharacterEllipsis" Text="{Binding Path=(hc:InfoElement.Title), RelativeSource={RelativeSource TemplatedParent}}" />
            </DockPanel>
            <Popup Name="PART_Popup" Grid.Column="1" AllowsTransparency="true" Grid.ColumnSpan="2" Margin="1" PopupAnimation="{StaticResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}" Placement="Bottom" PlacementTarget="{Binding ElementName=toggleButton}" IsOpen="{Binding IsDropDownOpen , Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}">
                <Decorator Margin="8 0">
                    <Border Name="dropDownBorder" BorderThickness="0,1,0,0" Effect="{StaticResource EffectShadow2}" Margin="0,0,0,8" MaxHeight="{TemplateBinding MaxDropDownHeight}" BorderBrush="{DynamicResource BorderBrush}" Background="{DynamicResource RegionBrush}" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}" MinWidth="{Binding ActualWidth , ElementName=toggleButton}">
                        <hc:ToggleBlock VerticalContentAlignment="Stretch" HorizontalContentAlignment="Stretch" IsChecked="{Binding HasItems , RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}" UnCheckedContent="{hc:Empty}">
                            <hc:ToggleBlock.CheckedContent>
                                <ScrollViewer Margin="0,4">
                                    <ItemsPresenter Name="ItemsPresenter" DirectionalNavigation="Contained" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                                </ScrollViewer>
                            </hc:ToggleBlock.CheckedContent>
                        </hc:ToggleBlock>
                    </Border>
                </Decorator>
            </Popup>
            <TextBlock Name="TextBlockError" Grid.Column="1" Grid.ColumnSpan="2" TextBlock.FontSize="12" Text="{TemplateBinding ErrorStr}" VerticalAlignment="Bottom" Margin="9,0,0,4" Foreground="{DynamicResource DangerBrush}" />
            <ToggleButton Name="toggleButton" Grid.Column="1" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" Padding="{TemplateBinding Padding}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Grid.ColumnSpan="2" Style="{StaticResource ComboBoxWatermarkToggleButton}" Content="{Binding Path=(hc:InfoElement.Placeholder), RelativeSource={RelativeSource TemplatedParent}}" IsChecked="{Binding IsDropDownOpen , Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" />
            <Border Grid.Column="1" Margin="1,0">
                <ContentPresenter Name="contentPresenter" Margin="{TemplateBinding Padding}" ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}" ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}" Content="{TemplateBinding SelectionBoxItem}" ContentStringFormat="{TemplateBinding SelectionBoxItemStringFormat}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" IsHitTestVisible="false" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
            </Border>
            <Button Name="ButtonClear" Command="interactivity:ControlCommands.Clear" Margin="0,0,26,0" Visibility="Collapsed" Width="16" Grid.Column="2" Style="{StaticResource ButtonIcon}" Padding="0" Geometry="{StaticResource DeleteFillCircleGeometry}" Foreground="{TemplateBinding BorderBrush}" />
        </Grid>
    </ControlTemplate>
    <ControlTemplate x:Key="ComboBoxPlusEditableTopTemplate" TargetType="{x:Type hc:ComboBox}">
        <ControlTemplate.Resources>
            <Storyboard Name="StoryboardShow">
                <ThicknessAnimation TargetName="TextBlockError" TargetProperty="Margin" To="9,0,0,-18" Duration="0:0:.2" />
            </Storyboard>
            <Storyboard Name="StoryboardHidden">
                <ThicknessAnimation TargetName="TextBlockError" TargetProperty="Margin" To="9,0,0,4" Duration="0:0:0" />
            </Storyboard>
        </ControlTemplate.Resources>
        <ControlTemplate.Triggers>
            <Trigger Property="ItemsControl.HasItems" Value="false">
                <Setter TargetName="dropDownBorder" Property="Height" Value="95" />
            </Trigger>
            <Trigger Property="hc:DropDownElement.ConsistentWidth" Value="True">
                <Setter TargetName="dropDownBorder" Value="{Binding ActualWidth , ElementName=toggleButton}" Property="MaxWidth" />
                <Setter TargetName="dropDownBorder" Value="{Binding ActualWidth , ElementName=toggleButton}" Property="MinWidth" />
            </Trigger>
            <Trigger Property="hc:DropDownElement.AutoWidth" Value="True">
                <Setter TargetName="dropDownBorder" Value="{x:Static system:Double.MaxValue}" Property="MaxWidth" />
                <Setter TargetName="dropDownBorder" Value="{Binding ActualHeight , ElementName=toggleButton}" Property="MinWidth" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="ItemsControl.IsGrouping" Value="true" />
                    <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false" />
                </MultiTrigger.Conditions>
                <Setter Property="ScrollViewer.CanContentScroll" Value="false" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition SourceName="border" Property="UIElement.IsMouseOver" Value="true" />
                    <Condition SourceName="PART_EditableTextBox" Property="UIElement.IsFocused" Value="false" />
                </MultiTrigger.Conditions>
                <Setter Value="{DynamicResource SecondaryBorderBrush}" Property="BorderBrush" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition SourceName="toggleButton" Property="UIElement.IsMouseOver" Value="true" />
                    <Condition SourceName="PART_EditableTextBox" Property="UIElement.IsFocused" Value="false" />
                </MultiTrigger.Conditions>
                <Setter Value="{DynamicResource SecondaryBorderBrush}" Property="BorderBrush" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition SourceName="ButtonClear" Property="UIElement.IsMouseOver" Value="true" />
                    <Condition SourceName="PART_EditableTextBox" Property="UIElement.IsFocused" Value="false" />
                </MultiTrigger.Conditions>
                <Setter Value="{DynamicResource SecondaryBorderBrush}" Property="BorderBrush" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition SourceName="toggleButton" Property="UIElement.IsMouseOver" Value="true" />
                    <Condition SourceName="PART_EditableTextBox" Property="UIElement.IsFocused" Value="true" />
                </MultiTrigger.Conditions>
                <Setter Value="{DynamicResource PrimaryBrush}" Property="BorderBrush" />
            </MultiTrigger>
            <Trigger SourceName="PART_EditableTextBox" Property="UIElement.IsFocused" Value="True">
                <Setter Value="{DynamicResource PrimaryBrush}" Property="BorderBrush" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition SourceName="toggleButton" Property="UIElement.IsMouseOver" Value="true" />
                    <Condition Property="hc:ComboBox.ShowClearButton" Value="True" />
                </MultiTrigger.Conditions>
                <Setter TargetName="ButtonClear" Property="Visibility" Value="Visible" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition SourceName="border" Property="UIElement.IsMouseOver" Value="true" />
                    <Condition Property="hc:ComboBox.ShowClearButton" Value="True" />
                </MultiTrigger.Conditions>
                <Setter TargetName="ButtonClear" Property="Visibility" Value="Visible" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition SourceName="ButtonClear" Property="UIElement.IsMouseOver" Value="true" />
                    <Condition Property="hc:ComboBox.ShowClearButton" Value="True" />
                </MultiTrigger.Conditions>
                <Setter TargetName="ButtonClear" Property="Visibility" Value="Visible" />
            </MultiTrigger>
            <Trigger Property="hc:ComboBox.IsError" Value="true">
                <Trigger.EnterActions>
                    <BeginStoryboard Storyboard="{StaticResource StoryboardShow}" />
                </Trigger.EnterActions>
                <Trigger.ExitActions>
                    <BeginStoryboard Storyboard="{StaticResource StoryboardHidden}" />
                </Trigger.ExitActions>
                <Setter Value="{DynamicResource DangerBrush}" Property="BorderBrush" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter TargetName="toggleButton" Property="UIElement.Opacity" Value="0.4" />
                <Setter TargetName="border" Property="UIElement.Opacity" Value="0.4" />
            </Trigger>
        </ControlTemplate.Triggers>
        <Grid Name="templateRoot" SnapsToDevicePixels="true">
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition MinHeight="{Binding Path=(hc:InfoElement.MinContentHeight), RelativeSource={RelativeSource TemplatedParent}}" Height="{Binding Path=(hc:InfoElement.ContentHeight), RelativeSource={RelativeSource TemplatedParent}}" />
            </Grid.RowDefinitions>
            <Grid.ColumnDefinitions>
                <ColumnDefinition />
                <ColumnDefinition Width="Auto" MinWidth="30" />
            </Grid.ColumnDefinitions>
            <DockPanel Grid.ColumnSpan="2" LastChildFill="True" Margin="{TemplateBinding Padding}" Visibility="{Binding Path=(hc:InfoElement.Title), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource String2VisibilityConverter}}" HorizontalAlignment="{Binding Path=(hc:TitleElement.HorizontalAlignment), RelativeSource={RelativeSource TemplatedParent}}">
                <ContentPresenter DockPanel.Dock="Right" Foreground="{DynamicResource DangerBrush}" Margin="4,0,0,0" Content="{Binding Path=(hc:InfoElement.Symbol), RelativeSource={RelativeSource TemplatedParent}}" Visibility="{Binding Path=(hc:InfoElement.Necessary), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource Boolean2VisibilityConverter}}" />
                <TextBlock AutoTooltip="True" TextWrapping="NoWrap" TextTrimming="CharacterEllipsis" Margin="1,0,1,0" Text="{Binding Path=(hc:InfoElement.Title), RelativeSource={RelativeSource TemplatedParent}}" />
            </DockPanel>
            <Popup Name="PART_Popup" Grid.Column="0" Grid.Row="1" AllowsTransparency="true" Grid.ColumnSpan="2" PopupAnimation="{StaticResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}" Placement="Bottom" PlacementTarget="{Binding ElementName=toggleButton}" IsOpen="{Binding IsDropDownOpen , RelativeSource={RelativeSource TemplatedParent}}">
                <Decorator Margin="8 0">
                    <Border Name="dropDownBorder" BorderThickness="0,1,0,0" Effect="{StaticResource EffectShadow2}" Margin="0,0,0,8" MaxHeight="{TemplateBinding MaxDropDownHeight}" BorderBrush="{DynamicResource BorderBrush}" Background="{DynamicResource RegionBrush}" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}" MinWidth="{Binding ActualWidth , ElementName=toggleButton}">
                        <hc:ToggleBlock VerticalContentAlignment="Stretch" HorizontalContentAlignment="Stretch" IsChecked="{Binding HasItems , RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}" UnCheckedContent="{hc:Empty}">
                            <hc:ToggleBlock.CheckedContent>
                                <ScrollViewer Margin="0,4">
                                    <ItemsPresenter Name="ItemsPresenter" DirectionalNavigation="Contained" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                                </ScrollViewer>
                            </hc:ToggleBlock.CheckedContent>
                        </hc:ToggleBlock>
                    </Border>
                </Decorator>
            </Popup>
            <TextBlock Name="TextBlockError" Grid.Column="0" Grid.ColumnSpan="2" TextBlock.FontSize="12" Text="{TemplateBinding ErrorStr}" VerticalAlignment="Bottom" Margin="9,0,0,4" Foreground="{DynamicResource DangerBrush}" Grid.Row="1" />
            <ToggleButton Name="toggleButton" Grid.Row="1" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" Padding="{TemplateBinding Padding}" Grid.Column="0" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Grid.ColumnSpan="2" Style="{StaticResource ComboBoxWatermarkToggleButton}" Content="{Binding Path=(hc:InfoElement.Placeholder), RelativeSource={RelativeSource TemplatedParent}}" IsChecked="{Binding IsDropDownOpen , Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" />
            <Border Name="border" Grid.Row="1" Grid.Column="0" Margin="-1,1">
                <TextBox Name="PART_EditableTextBox" Padding="{TemplateBinding Padding}" Background="{TemplateBinding Background}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" Style="{StaticResource ComboBoxEditableTextBox}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" IsReadOnly="{Binding IsReadOnly , RelativeSource={RelativeSource TemplatedParent}}" />
            </Border>
            <Button Name="ButtonClear" Grid.Column="1" Grid.Row="1" Command="interactivity:ControlCommands.Clear" Margin="0,0,26,0" Visibility="Collapsed" Width="16" Style="{StaticResource ButtonIcon}" Padding="0" Geometry="{StaticResource DeleteFillCircleGeometry}" Foreground="{TemplateBinding BorderBrush}" />
        </Grid>
    </ControlTemplate>
    <ControlTemplate x:Key="ComboBoxPlusEditableTopAutoCompleteTemplate" TargetType="{x:Type hc:ComboBox}">
        <ControlTemplate.Resources>
            <Storyboard Name="StoryboardShow">
                <ThicknessAnimation TargetName="TextBlockError" TargetProperty="Margin" To="9,0,0,-18" Duration="0:0:.2" />
            </Storyboard>
            <Storyboard Name="StoryboardHidden">
                <ThicknessAnimation TargetName="TextBlockError" TargetProperty="Margin" To="9,0,0,4" Duration="0:0:0" />
            </Storyboard>
        </ControlTemplate.Resources>
        <ControlTemplate.Triggers>
            <Trigger Property="ItemsControl.HasItems" Value="false">
                <Setter TargetName="dropDownBorder" Property="Height" Value="95" />
                <Setter TargetName="dropDownBorder_AutoComplete" Property="Height" Value="95" />
            </Trigger>
            <Trigger Property="hc:DropDownElement.ConsistentWidth" Value="True">
                <Setter TargetName="dropDownBorder" Value="{Binding ActualWidth , ElementName=toggleButton}" Property="MaxWidth" />
                <Setter TargetName="dropDownBorder" Value="{Binding ActualWidth , ElementName=toggleButton}" Property="MinWidth" />
                <Setter TargetName="dropDownBorder_AutoComplete" Value="{Binding ActualWidth , ElementName=toggleButton}" Property="MaxWidth" />
                <Setter TargetName="dropDownBorder_AutoComplete" Value="{Binding ActualWidth , ElementName=toggleButton}" Property="MinWidth" />
            </Trigger>
            <Trigger Property="hc:DropDownElement.AutoWidth" Value="True">
                <Setter TargetName="dropDownBorder" Value="{x:Static system:Double.MaxValue}" Property="MaxWidth" />
                <Setter TargetName="dropDownBorder" Value="{Binding ActualHeight , ElementName=toggleButton}" Property="MinWidth" />
                <Setter TargetName="dropDownBorder_AutoComplete" Value="{x:Static system:Double.MaxValue}" Property="MaxWidth" />
                <Setter TargetName="dropDownBorder_AutoComplete" Value="{Binding ActualHeight , ElementName=toggleButton}" Property="MinWidth" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="ItemsControl.IsGrouping" Value="true" />
                    <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false" />
                </MultiTrigger.Conditions>
                <Setter Property="ScrollViewer.CanContentScroll" Value="false" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition SourceName="border" Property="UIElement.IsMouseOver" Value="true" />
                    <Condition SourceName="PART_EditableTextBox" Property="UIElement.IsFocused" Value="false" />
                </MultiTrigger.Conditions>
                <Setter Value="{DynamicResource SecondaryBorderBrush}" Property="BorderBrush" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition SourceName="toggleButton" Property="UIElement.IsMouseOver" Value="true" />
                    <Condition SourceName="PART_EditableTextBox" Property="UIElement.IsFocused" Value="false" />
                </MultiTrigger.Conditions>
                <Setter Value="{DynamicResource SecondaryBorderBrush}" Property="BorderBrush" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition SourceName="ButtonClear" Property="UIElement.IsMouseOver" Value="true" />
                    <Condition SourceName="PART_EditableTextBox" Property="UIElement.IsFocused" Value="false" />
                </MultiTrigger.Conditions>
                <Setter Value="{DynamicResource SecondaryBorderBrush}" Property="BorderBrush" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition SourceName="toggleButton" Property="UIElement.IsMouseOver" Value="true" />
                    <Condition SourceName="PART_EditableTextBox" Property="UIElement.IsFocused" Value="true" />
                </MultiTrigger.Conditions>
                <Setter Value="{DynamicResource PrimaryBrush}" Property="BorderBrush" />
            </MultiTrigger>
            <Trigger SourceName="PART_EditableTextBox" Property="UIElement.IsFocused" Value="True">
                <Setter Value="{DynamicResource PrimaryBrush}" Property="BorderBrush" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition SourceName="toggleButton" Property="UIElement.IsMouseOver" Value="true" />
                    <Condition Property="hc:ComboBox.ShowClearButton" Value="True" />
                </MultiTrigger.Conditions>
                <Setter TargetName="ButtonClear" Property="Visibility" Value="Visible" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition SourceName="border" Property="UIElement.IsMouseOver" Value="true" />
                    <Condition Property="hc:ComboBox.ShowClearButton" Value="True" />
                </MultiTrigger.Conditions>
                <Setter TargetName="ButtonClear" Property="Visibility" Value="Visible" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition SourceName="ButtonClear" Property="UIElement.IsMouseOver" Value="true" />
                    <Condition Property="hc:ComboBox.ShowClearButton" Value="True" />
                </MultiTrigger.Conditions>
                <Setter TargetName="ButtonClear" Property="Visibility" Value="Visible" />
            </MultiTrigger>
            <Trigger Property="hc:ComboBox.IsError" Value="true">
                <Trigger.EnterActions>
                    <BeginStoryboard Storyboard="{StaticResource StoryboardShow}" />
                </Trigger.EnterActions>
                <Trigger.ExitActions>
                    <BeginStoryboard Storyboard="{StaticResource StoryboardHidden}" />
                </Trigger.ExitActions>
                <Setter Value="{DynamicResource DangerBrush}" Property="BorderBrush" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter TargetName="toggleButton" Property="UIElement.Opacity" Value="0.4" />
                <Setter TargetName="border" Property="UIElement.Opacity" Value="0.4" />
            </Trigger>
        </ControlTemplate.Triggers>
        <Grid Name="templateRoot" SnapsToDevicePixels="true">
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition MinHeight="{Binding Path=(hc:InfoElement.MinContentHeight), RelativeSource={RelativeSource TemplatedParent}}" Height="{Binding Path=(hc:InfoElement.ContentHeight), RelativeSource={RelativeSource TemplatedParent}}" />
            </Grid.RowDefinitions>
            <Grid.ColumnDefinitions>
                <ColumnDefinition />
                <ColumnDefinition Width="Auto" MinWidth="30" />
            </Grid.ColumnDefinitions>
            <DockPanel Grid.ColumnSpan="2" LastChildFill="True" Margin="{TemplateBinding Padding}" Visibility="{Binding Path=(hc:InfoElement.Title), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource String2VisibilityConverter}}" HorizontalAlignment="{Binding Path=(hc:TitleElement.HorizontalAlignment), RelativeSource={RelativeSource TemplatedParent}}">
                <ContentPresenter DockPanel.Dock="Right" Foreground="{DynamicResource DangerBrush}" Margin="4,0,0,0" Content="{Binding Path=(hc:InfoElement.Symbol), RelativeSource={RelativeSource TemplatedParent}}" Visibility="{Binding Path=(hc:InfoElement.Necessary), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource Boolean2VisibilityConverter}}" />
                <TextBlock AutoTooltip="True" TextWrapping="NoWrap" TextTrimming="CharacterEllipsis" Margin="1,0,1,0" Text="{Binding Path=(hc:InfoElement.Title), RelativeSource={RelativeSource TemplatedParent}}" />
            </DockPanel>
            <Popup Name="PART_Popup" Grid.Column="0" Grid.Row="1" AllowsTransparency="true" Grid.ColumnSpan="2" PopupAnimation="{StaticResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}" Placement="Bottom" PlacementTarget="{Binding ElementName=toggleButton}" IsOpen="{Binding IsDropDownOpen , RelativeSource={RelativeSource TemplatedParent}}">
                <Decorator Margin="8 0">
                    <Border Name="dropDownBorder" BorderThickness="0,1,0,0" Effect="{StaticResource EffectShadow2}" Margin="0,0,0,8" MaxHeight="{TemplateBinding MaxDropDownHeight}" BorderBrush="{DynamicResource BorderBrush}" Background="{DynamicResource RegionBrush}" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}" MinWidth="{Binding ActualWidth , ElementName=toggleButton}">
                        <hc:ToggleBlock VerticalContentAlignment="Stretch" HorizontalContentAlignment="Stretch" IsChecked="{Binding HasItems , RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}" UnCheckedContent="{hc:Empty}">
                            <hc:ToggleBlock.CheckedContent>
                                <ScrollViewer Margin="0,4">
                                    <ItemsPresenter Name="ItemsPresenter" DirectionalNavigation="Contained" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                                </ScrollViewer>
                            </hc:ToggleBlock.CheckedContent>
                        </hc:ToggleBlock>
                    </Border>
                </Decorator>
            </Popup>
            <Popup Name="PART_Popup_AutoComplete" Grid.Column="0" Grid.Row="1" StaysOpen="False" AllowsTransparency="true" Grid.ColumnSpan="2" PopupAnimation="{StaticResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}" Placement="Bottom" PlacementTarget="{Binding ElementName=toggleButton}">
                <Decorator Margin="8 0">
                    <Border Name="dropDownBorder_AutoComplete" BorderThickness="0,1,0,0" Effect="{StaticResource EffectShadow2}" Margin="0,0,0,8" MaxHeight="{TemplateBinding MaxDropDownHeight}" BorderBrush="{DynamicResource BorderBrush}" Background="{DynamicResource RegionBrush}" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}" MinWidth="{Binding ActualWidth , ElementName=toggleButton}">
                        <hc:ToggleBlock VerticalContentAlignment="Stretch" HorizontalContentAlignment="Stretch" IsChecked="{Binding HasItems , RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}" UnCheckedContent="{hc:Empty}">
                            <hc:ToggleBlock.CheckedContent>
                                <ScrollViewer Margin="0,4">
                                    <StackPanel Name="PART_AutoCompletePanel" DirectionalNavigation="Contained" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                                </ScrollViewer>
                            </hc:ToggleBlock.CheckedContent>
                        </hc:ToggleBlock>
                    </Border>
                </Decorator>
            </Popup>
            <TextBlock Name="TextBlockError" Grid.Column="0" Grid.ColumnSpan="2" TextBlock.FontSize="12" Text="{TemplateBinding ErrorStr}" VerticalAlignment="Bottom" Margin="9,0,0,4" Foreground="{DynamicResource DangerBrush}" Grid.Row="1" />
            <ToggleButton Name="toggleButton" Grid.Row="1" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" Padding="{TemplateBinding Padding}" Grid.Column="0" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Grid.ColumnSpan="2" Style="{StaticResource ComboBoxWatermarkToggleButton}" Content="{Binding Path=(hc:InfoElement.Placeholder), RelativeSource={RelativeSource TemplatedParent}}" IsChecked="{Binding IsDropDownOpen , Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" />
            <Border Name="border" Grid.Row="1" Grid.Column="0" Margin="-1,1">
                <TextBox Name="PART_EditableTextBox" Padding="{TemplateBinding Padding}" Background="{TemplateBinding Background}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" Style="{StaticResource ComboBoxEditableTextBox}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" IsReadOnly="{Binding IsReadOnly , RelativeSource={RelativeSource TemplatedParent}}" />
            </Border>
            <Button Name="ButtonClear" Grid.Column="1" Grid.Row="1" Command="interactivity:ControlCommands.Clear" Margin="0,0,26,0" Visibility="Collapsed" Width="16" Style="{StaticResource ButtonIcon}" Padding="0" Geometry="{StaticResource DeleteFillCircleGeometry}" Foreground="{TemplateBinding BorderBrush}" />
        </Grid>
    </ControlTemplate>
    <ControlTemplate x:Key="ComboBoxPlusEditableLeftTemplate" TargetType="{x:Type hc:ComboBox}">
        <ControlTemplate.Resources>
            <Storyboard Name="StoryboardShow">
                <ThicknessAnimation TargetName="TextBlockError" TargetProperty="Margin" To="9,0,0,-18" Duration="0:0:.2" />
            </Storyboard>
            <Storyboard Name="StoryboardHidden">
                <ThicknessAnimation TargetName="TextBlockError" TargetProperty="Margin" To="9,0,0,4" Duration="0:0:0" />
            </Storyboard>
        </ControlTemplate.Resources>
        <ControlTemplate.Triggers>
            <Trigger Property="ItemsControl.HasItems" Value="false">
                <Setter TargetName="dropDownBorder" Property="Height" Value="95" />
            </Trigger>
            <Trigger Property="hc:DropDownElement.ConsistentWidth" Value="True">
                <Setter TargetName="dropDownBorder" Value="{Binding ActualWidth , ElementName=toggleButton}" Property="MaxWidth" />
                <Setter TargetName="dropDownBorder" Value="{Binding ActualWidth , ElementName=toggleButton}" Property="MinWidth" />
            </Trigger>
            <Trigger Property="hc:DropDownElement.AutoWidth" Value="True">
                <Setter TargetName="dropDownBorder" Value="{x:Static system:Double.MaxValue}" Property="MaxWidth" />
                <Setter TargetName="dropDownBorder" Value="{Binding ActualHeight , ElementName=toggleButton}" Property="MinWidth" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="ItemsControl.IsGrouping" Value="true" />
                    <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false" />
                </MultiTrigger.Conditions>
                <Setter Property="ScrollViewer.CanContentScroll" Value="false" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition SourceName="border" Property="UIElement.IsMouseOver" Value="true" />
                    <Condition SourceName="PART_EditableTextBox" Property="UIElement.IsFocused" Value="false" />
                </MultiTrigger.Conditions>
                <Setter Value="{DynamicResource SecondaryBorderBrush}" Property="BorderBrush" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition SourceName="toggleButton" Property="UIElement.IsMouseOver" Value="true" />
                    <Condition SourceName="PART_EditableTextBox" Property="UIElement.IsFocused" Value="false" />
                </MultiTrigger.Conditions>
                <Setter Value="{DynamicResource SecondaryBorderBrush}" Property="BorderBrush" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition SourceName="ButtonClear" Property="UIElement.IsMouseOver" Value="true" />
                    <Condition SourceName="PART_EditableTextBox" Property="UIElement.IsFocused" Value="false" />
                </MultiTrigger.Conditions>
                <Setter Value="{DynamicResource SecondaryBorderBrush}" Property="BorderBrush" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition SourceName="toggleButton" Property="UIElement.IsMouseOver" Value="true" />
                    <Condition SourceName="PART_EditableTextBox" Property="UIElement.IsFocused" Value="true" />
                </MultiTrigger.Conditions>
                <Setter Value="{DynamicResource PrimaryBrush}" Property="BorderBrush" />
            </MultiTrigger>
            <Trigger SourceName="PART_EditableTextBox" Property="UIElement.IsFocused" Value="True">
                <Setter Value="{DynamicResource PrimaryBrush}" Property="BorderBrush" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition SourceName="toggleButton" Property="UIElement.IsMouseOver" Value="true" />
                    <Condition Property="hc:ComboBox.ShowClearButton" Value="True" />
                </MultiTrigger.Conditions>
                <Setter TargetName="ButtonClear" Property="Visibility" Value="Visible" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition SourceName="border" Property="UIElement.IsMouseOver" Value="true" />
                    <Condition Property="hc:ComboBox.ShowClearButton" Value="True" />
                </MultiTrigger.Conditions>
                <Setter TargetName="ButtonClear" Property="Visibility" Value="Visible" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition SourceName="ButtonClear" Property="UIElement.IsMouseOver" Value="true" />
                    <Condition Property="hc:ComboBox.ShowClearButton" Value="True" />
                </MultiTrigger.Conditions>
                <Setter TargetName="ButtonClear" Property="Visibility" Value="Visible" />
            </MultiTrigger>
            <Trigger Property="hc:ComboBox.IsError" Value="true">
                <Trigger.EnterActions>
                    <BeginStoryboard Storyboard="{StaticResource StoryboardShow}" />
                </Trigger.EnterActions>
                <Trigger.ExitActions>
                    <BeginStoryboard Storyboard="{StaticResource StoryboardHidden}" />
                </Trigger.ExitActions>
                <Setter Value="{DynamicResource DangerBrush}" Property="BorderBrush" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter TargetName="toggleButton" Property="UIElement.Opacity" Value="0.4" />
                <Setter TargetName="border" Property="UIElement.Opacity" Value="0.4" />
            </Trigger>
        </ControlTemplate.Triggers>
        <Grid Name="templateRoot" SnapsToDevicePixels="true" MinHeight="{Binding Path=(hc:InfoElement.MinContentHeight), RelativeSource={RelativeSource TemplatedParent}}" Height="{Binding Path=(hc:InfoElement.ContentHeight), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource Double2GridLengthConverter}}">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="{Binding Path=(hc:InfoElement.TitleWidth), RelativeSource={RelativeSource TemplatedParent}}" />
                <ColumnDefinition />
                <ColumnDefinition Width="Auto" MinWidth="30" />
            </Grid.ColumnDefinitions>
            <DockPanel LastChildFill="True" Visibility="{Binding Path=(hc:InfoElement.Title), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource String2VisibilityConverter}}" HorizontalAlignment="{Binding Path=(hc:TitleElement.HorizontalAlignment), RelativeSource={RelativeSource TemplatedParent}}" VerticalAlignment="{Binding Path=(hc:TitleElement.VerticalAlignment), RelativeSource={RelativeSource TemplatedParent}}" Margin="{Binding Path=(hc:TitleElement.MarginOnTheLeft), RelativeSource={RelativeSource TemplatedParent}}">
                <ContentPresenter DockPanel.Dock="Right" Foreground="{DynamicResource DangerBrush}" Margin="4,0,0,0" Content="{Binding Path=(hc:InfoElement.Symbol), RelativeSource={RelativeSource TemplatedParent}}" Visibility="{Binding Path=(hc:InfoElement.Necessary), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource Boolean2VisibilityConverter}}" />
                <TextBlock AutoTooltip="True" TextWrapping="NoWrap" TextTrimming="CharacterEllipsis" Text="{Binding Path=(hc:InfoElement.Title), RelativeSource={RelativeSource TemplatedParent}}" />
            </DockPanel>
            <Popup Name="PART_Popup" Grid.Column="1" AllowsTransparency="true" Grid.ColumnSpan="2" PopupAnimation="{StaticResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}" Placement="Bottom" PlacementTarget="{Binding ElementName=toggleButton}" IsOpen="{Binding IsDropDownOpen , RelativeSource={RelativeSource TemplatedParent}}">
                <Decorator Margin="8 0">
                    <Border Name="dropDownBorder" BorderThickness="0,1,0,0" Effect="{StaticResource EffectShadow2}" Margin="0,0,0,8" MaxHeight="{TemplateBinding MaxDropDownHeight}" BorderBrush="{DynamicResource BorderBrush}" Background="{DynamicResource RegionBrush}" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}" MinWidth="{Binding ActualWidth , ElementName=toggleButton}">
                        <hc:ToggleBlock VerticalContentAlignment="Stretch" HorizontalContentAlignment="Stretch" IsChecked="{Binding HasItems , RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}" UnCheckedContent="{hc:Empty}">
                            <hc:ToggleBlock.CheckedContent>
                                <ScrollViewer Margin="0,4">
                                    <ItemsPresenter Name="ItemsPresenter" DirectionalNavigation="Contained" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                                </ScrollViewer>
                            </hc:ToggleBlock.CheckedContent>
                        </hc:ToggleBlock>
                    </Border>
                </Decorator>
            </Popup>
            <TextBlock Name="TextBlockError" Grid.Column="1" Grid.ColumnSpan="2" Text="{TemplateBinding ErrorStr}" VerticalAlignment="Bottom" Margin="9,0,0,4" Foreground="{DynamicResource DangerBrush}" />
            <ToggleButton Name="toggleButton" Grid.Column="1" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" Padding="{TemplateBinding Padding}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Grid.ColumnSpan="2" Style="{StaticResource ComboBoxWatermarkToggleButton}" Content="{Binding Path=(hc:InfoElement.Placeholder), RelativeSource={RelativeSource TemplatedParent}}" IsChecked="{Binding IsDropDownOpen , Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" />
            <Border Name="border" Grid.Column="1" Background="Transparent" Margin="-1,1">
                <TextBox Name="PART_EditableTextBox" Padding="{TemplateBinding Padding}" Background="{TemplateBinding Background}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" Style="{StaticResource ComboBoxEditableTextBox}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" IsReadOnly="{Binding IsReadOnly , RelativeSource={RelativeSource TemplatedParent}}" />
            </Border>
            <Button Name="ButtonClear" Command="interactivity:ControlCommands.Clear" Margin="0,0,26,0" Visibility="Collapsed" Width="16" Grid.Column="2" Style="{StaticResource ButtonIcon}" Padding="0" Geometry="{StaticResource DeleteFillCircleGeometry}" Foreground="{TemplateBinding BorderBrush}" />
        </Grid>
    </ControlTemplate>
    <ControlTemplate x:Key="ComboBoxPlusEditableLeftAutoCompleteTemplate" TargetType="{x:Type hc:ComboBox}">
        <ControlTemplate.Resources>
            <Storyboard Name="StoryboardShow">
                <ThicknessAnimation TargetName="TextBlockError" TargetProperty="Margin" To="9,0,0,-18" Duration="0:0:.2" />
            </Storyboard>
            <Storyboard Name="StoryboardHidden">
                <ThicknessAnimation TargetName="TextBlockError" TargetProperty="Margin" To="9,0,0,4" Duration="0:0:0" />
            </Storyboard>
        </ControlTemplate.Resources>
        <ControlTemplate.Triggers>
            <Trigger Property="ItemsControl.HasItems" Value="false">
                <Setter TargetName="dropDownBorder" Property="Height" Value="95" />
                <Setter TargetName="dropDownBorder_AutoComplete" Property="Height" Value="95" />
            </Trigger>
            <Trigger Property="hc:DropDownElement.ConsistentWidth" Value="True">
                <Setter TargetName="dropDownBorder" Value="{Binding ActualWidth , ElementName=toggleButton}" Property="MaxWidth" />
                <Setter TargetName="dropDownBorder" Value="{Binding ActualWidth , ElementName=toggleButton}" Property="MinWidth" />
                <Setter TargetName="dropDownBorder_AutoComplete" Value="{Binding ActualWidth , ElementName=toggleButton}" Property="MaxWidth" />
                <Setter TargetName="dropDownBorder_AutoComplete" Value="{Binding ActualWidth , ElementName=toggleButton}" Property="MinWidth" />
            </Trigger>
            <Trigger Property="hc:DropDownElement.AutoWidth" Value="True">
                <Setter TargetName="dropDownBorder" Value="{x:Static system:Double.MaxValue}" Property="MaxWidth" />
                <Setter TargetName="dropDownBorder" Value="{Binding ActualHeight , ElementName=toggleButton}" Property="MinWidth" />
                <Setter TargetName="dropDownBorder_AutoComplete" Value="{x:Static system:Double.MaxValue}" Property="MaxWidth" />
                <Setter TargetName="dropDownBorder_AutoComplete" Value="{Binding ActualHeight , ElementName=toggleButton}" Property="MinWidth" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="ItemsControl.IsGrouping" Value="true" />
                    <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false" />
                </MultiTrigger.Conditions>
                <Setter Property="ScrollViewer.CanContentScroll" Value="false" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition SourceName="border" Property="UIElement.IsMouseOver" Value="true" />
                    <Condition SourceName="PART_EditableTextBox" Property="UIElement.IsFocused" Value="false" />
                </MultiTrigger.Conditions>
                <Setter Value="{DynamicResource SecondaryBorderBrush}" Property="BorderBrush" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition SourceName="toggleButton" Property="UIElement.IsMouseOver" Value="true" />
                    <Condition SourceName="PART_EditableTextBox" Property="UIElement.IsFocused" Value="false" />
                </MultiTrigger.Conditions>
                <Setter Value="{DynamicResource SecondaryBorderBrush}" Property="BorderBrush" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition SourceName="ButtonClear" Property="UIElement.IsMouseOver" Value="true" />
                    <Condition SourceName="PART_EditableTextBox" Property="UIElement.IsFocused" Value="false" />
                </MultiTrigger.Conditions>
                <Setter Value="{DynamicResource SecondaryBorderBrush}" Property="BorderBrush" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition SourceName="toggleButton" Property="UIElement.IsMouseOver" Value="true" />
                    <Condition SourceName="PART_EditableTextBox" Property="UIElement.IsFocused" Value="true" />
                </MultiTrigger.Conditions>
                <Setter Value="{DynamicResource PrimaryBrush}" Property="BorderBrush" />
            </MultiTrigger>
            <Trigger SourceName="PART_EditableTextBox" Property="UIElement.IsFocused" Value="True">
                <Setter Value="{DynamicResource PrimaryBrush}" Property="BorderBrush" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition SourceName="toggleButton" Property="UIElement.IsMouseOver" Value="true" />
                    <Condition Property="hc:ComboBox.ShowClearButton" Value="True" />
                </MultiTrigger.Conditions>
                <Setter TargetName="ButtonClear" Property="Visibility" Value="Visible" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition SourceName="border" Property="UIElement.IsMouseOver" Value="true" />
                    <Condition Property="hc:ComboBox.ShowClearButton" Value="True" />
                </MultiTrigger.Conditions>
                <Setter TargetName="ButtonClear" Property="Visibility" Value="Visible" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition SourceName="ButtonClear" Property="UIElement.IsMouseOver" Value="true" />
                    <Condition Property="hc:ComboBox.ShowClearButton" Value="True" />
                </MultiTrigger.Conditions>
                <Setter TargetName="ButtonClear" Property="Visibility" Value="Visible" />
            </MultiTrigger>
            <Trigger Property="hc:ComboBox.IsError" Value="true">
                <Trigger.EnterActions>
                    <BeginStoryboard Storyboard="{StaticResource StoryboardShow}" />
                </Trigger.EnterActions>
                <Trigger.ExitActions>
                    <BeginStoryboard Storyboard="{StaticResource StoryboardHidden}" />
                </Trigger.ExitActions>
                <Setter Value="{DynamicResource DangerBrush}" Property="BorderBrush" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter TargetName="toggleButton" Property="UIElement.Opacity" Value="0.4" />
                <Setter TargetName="border" Property="UIElement.Opacity" Value="0.4" />
            </Trigger>
        </ControlTemplate.Triggers>
        <Grid Name="templateRoot" SnapsToDevicePixels="true" MinHeight="{Binding Path=(hc:InfoElement.MinContentHeight), RelativeSource={RelativeSource TemplatedParent}}" Height="{Binding Path=(hc:InfoElement.ContentHeight), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource Double2GridLengthConverter}}">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="{Binding Path=(hc:InfoElement.TitleWidth), RelativeSource={RelativeSource TemplatedParent}}" />
                <ColumnDefinition />
                <ColumnDefinition Width="Auto" MinWidth="30" />
            </Grid.ColumnDefinitions>
            <DockPanel LastChildFill="True" Visibility="{Binding Path=(hc:InfoElement.Title), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource String2VisibilityConverter}}" HorizontalAlignment="{Binding Path=(hc:TitleElement.HorizontalAlignment), RelativeSource={RelativeSource TemplatedParent}}" VerticalAlignment="{Binding Path=(hc:TitleElement.VerticalAlignment), RelativeSource={RelativeSource TemplatedParent}}" Margin="{Binding Path=(hc:TitleElement.MarginOnTheLeft), RelativeSource={RelativeSource TemplatedParent}}">
                <ContentPresenter DockPanel.Dock="Right" Foreground="{DynamicResource DangerBrush}" Margin="4,0,0,0" Content="{Binding Path=(hc:InfoElement.Symbol), RelativeSource={RelativeSource TemplatedParent}}" Visibility="{Binding Path=(hc:InfoElement.Necessary), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource Boolean2VisibilityConverter}}" />
                <TextBlock AutoTooltip="True" TextWrapping="NoWrap" TextTrimming="CharacterEllipsis" Text="{Binding Path=(hc:InfoElement.Title), RelativeSource={RelativeSource TemplatedParent}}" />
            </DockPanel>
            <Popup Name="PART_Popup" Grid.Column="1" AllowsTransparency="true" Grid.ColumnSpan="2" PopupAnimation="{StaticResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}" Placement="Bottom" PlacementTarget="{Binding ElementName=toggleButton}" IsOpen="{Binding IsDropDownOpen , RelativeSource={RelativeSource TemplatedParent}}">
                <Decorator Margin="8 0">
                    <Border Name="dropDownBorder" BorderThickness="0,1,0,0" Effect="{StaticResource EffectShadow2}" Margin="0,0,0,8" MaxHeight="{TemplateBinding MaxDropDownHeight}" BorderBrush="{DynamicResource BorderBrush}" Background="{DynamicResource RegionBrush}" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}" MinWidth="{Binding ActualWidth , ElementName=toggleButton}">
                        <hc:ToggleBlock VerticalContentAlignment="Stretch" HorizontalContentAlignment="Stretch" IsChecked="{Binding HasItems , RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}" UnCheckedContent="{hc:Empty}">
                            <hc:ToggleBlock.CheckedContent>
                                <ScrollViewer Margin="0,4">
                                    <ItemsPresenter Name="ItemsPresenter" DirectionalNavigation="Contained" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                                </ScrollViewer>
                            </hc:ToggleBlock.CheckedContent>
                        </hc:ToggleBlock>
                    </Border>
                </Decorator>
            </Popup>
            <Popup Name="PART_Popup_AutoComplete" Grid.Column="1" AllowsTransparency="true" Grid.ColumnSpan="2" PopupAnimation="{StaticResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}" Placement="Bottom" PlacementTarget="{Binding ElementName=toggleButton}">
                <Decorator Margin="8 0">
                    <Border Name="dropDownBorder_AutoComplete" BorderThickness="0,1,0,0" Effect="{StaticResource EffectShadow2}" Margin="0,0,0,8" MaxHeight="{TemplateBinding MaxDropDownHeight}" BorderBrush="{DynamicResource BorderBrush}" Background="{DynamicResource RegionBrush}" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}" MinWidth="{Binding ActualWidth , ElementName=toggleButton}">
                        <hc:ToggleBlock VerticalContentAlignment="Stretch" HorizontalContentAlignment="Stretch" IsChecked="{Binding HasItems , RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}" UnCheckedContent="{hc:Empty}">
                            <hc:ToggleBlock.CheckedContent>
                                <ScrollViewer Margin="0,4">
                                    <StackPanel Name="PART_AutoCompletePanel" DirectionalNavigation="Contained" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                                </ScrollViewer>
                            </hc:ToggleBlock.CheckedContent>
                        </hc:ToggleBlock>
                    </Border>
                </Decorator>
            </Popup>
            <TextBlock Name="TextBlockError" Grid.Column="1" Grid.ColumnSpan="2" Text="{TemplateBinding ErrorStr}" VerticalAlignment="Bottom" Margin="9,0,0,4" Foreground="{DynamicResource DangerBrush}" />
            <ToggleButton Name="toggleButton" Grid.Column="1" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" Padding="{TemplateBinding Padding}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Grid.ColumnSpan="2" Style="{StaticResource ComboBoxWatermarkToggleButton}" Content="{Binding Path=(hc:InfoElement.Placeholder), RelativeSource={RelativeSource TemplatedParent}}" IsChecked="{Binding IsDropDownOpen , Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" />
            <Border Name="border" Grid.Column="1" Background="Transparent" Margin="-1,1">
                <TextBox Name="PART_EditableTextBox" Padding="{TemplateBinding Padding}" Background="{TemplateBinding Background}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" Style="{StaticResource ComboBoxEditableTextBox}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" IsReadOnly="{Binding IsReadOnly , RelativeSource={RelativeSource TemplatedParent}}" />
            </Border>
            <Button Name="ButtonClear" Command="interactivity:ControlCommands.Clear" Margin="0,0,26,0" Visibility="Collapsed" Width="16" Grid.Column="2" Style="{StaticResource ButtonIcon}" Padding="0" Geometry="{StaticResource DeleteFillCircleGeometry}" Foreground="{TemplateBinding BorderBrush}" />
        </Grid>
    </ControlTemplate>
    <Style x:Key="ComboBoxPlusBaseStyle" BasedOn="{StaticResource ComboBoxExtendBaseStyle}" TargetType="{x:Type hc:ComboBox}">
        <Style.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="ComboBox.IsEditable" Value="False" />
                    <Condition Property="hc:TitleElement.TitlePlacement" Value="Left" />
                </MultiTrigger.Conditions>
                <Setter Property="Template" Value="{StaticResource ComboBoxPlusLeftTemplate}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="ComboBox.IsEditable" Value="True" />
                    <Condition Property="hc:TitleElement.TitlePlacement" Value="Top" />
                </MultiTrigger.Conditions>
                <Setter Property="Template" Value="{StaticResource ComboBoxPlusEditableTopTemplate}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="ComboBox.IsEditable" Value="True" />
                    <Condition Property="hc:TitleElement.TitlePlacement" Value="Top" />
                    <Condition Property="hc:ComboBox.AutoComplete" Value="True" />
                </MultiTrigger.Conditions>
                <Setter Property="Template" Value="{StaticResource ComboBoxPlusEditableTopAutoCompleteTemplate}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="ComboBox.IsEditable" Value="True" />
                    <Condition Property="hc:TitleElement.TitlePlacement" Value="Left" />
                </MultiTrigger.Conditions>
                <Setter Property="Template" Value="{StaticResource ComboBoxPlusEditableLeftTemplate}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="ComboBox.IsEditable" Value="True" />
                    <Condition Property="hc:TitleElement.TitlePlacement" Value="Left" />
                    <Condition Property="hc:ComboBox.AutoComplete" Value="True" />
                </MultiTrigger.Conditions>
                <Setter Property="Template" Value="{StaticResource ComboBoxPlusEditableLeftAutoCompleteTemplate}" />
            </MultiTrigger>
        </Style.Triggers>
        <Setter Property="hc:ComboBox.IsError" Value="{Binding Path=(Validation.HasError), RelativeSource={RelativeSource Self}}" />
        <Setter Property="Template" Value="{StaticResource ComboBoxPlusTopTemplate}" />
    </Style>
    <Style x:Key="MenuItemBaseStyle" TargetType="{x:Type MenuItem}">
        <Style.Triggers>
            <Trigger Property="MenuItem.Role" Value="TopLevelHeader">
                <Setter Property="Margin" Value="0" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type MenuItem}">
                            <ControlTemplate.Triggers>
                                <Trigger Value="{x:Null}" Property="MenuItem.Icon">
                                    <Setter TargetName="Icon" Property="Visibility" Value="Collapsed" />
                                </Trigger>
                                <Trigger Property="MenuItem.IsChecked" Value="True">
                                    <Setter TargetName="GlyphPanel" Property="Visibility" Value="Visible" />
                                    <Setter TargetName="Icon" Property="Visibility" Value="Collapsed" />
                                </Trigger>
                                <Trigger Property="MenuItem.IsHighlighted" Value="True">
                                    <Setter TargetName="templateRoot" Value="{DynamicResource SecondaryRegionBrush}" Property="Background" />
                                    <Setter TargetName="menuHeaderContainer" Value="{DynamicResource PrimaryTextBrush}" Property="Foreground" />
                                </Trigger>
                                <Trigger Property="MenuItem.IsSubmenuOpen" Value="True">
                                    <Setter TargetName="templateRoot" Value="{DynamicResource BorderBrush}" Property="BorderBrush" />
                                    <Setter TargetName="templateRoot" Value="{DynamicResource RegionBrush}" Property="Background" />
                                    <Setter TargetName="menuHeaderContainer" Value="{DynamicResource PrimaryTextBrush}" Property="Foreground" />
                                </Trigger>
                            </ControlTemplate.Triggers>
                            <Border Name="templateRoot" MinWidth="44" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="1,1,1,0" Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
                                <Grid VerticalAlignment="Center" Margin="{TemplateBinding Padding}">
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="Auto" />
                                        <ColumnDefinition Width="Auto" />
                                    </Grid.ColumnDefinitions>
                                    <ContentPresenter Name="Icon" Margin="0,0,10,0" ContentSource="Icon" HorizontalAlignment="Right" Height="16" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="Center" Width="16" />
                                    <Border Name="GlyphPanel" Margin="0,0,10,0" Grid.Column="0" CornerRadius="2" Background="{DynamicResource PrimaryBrush}" ClipToBounds="False" HorizontalAlignment="Right" Height="16" Visibility="Collapsed" VerticalAlignment="Center" Width="16">
                                        <Path UseLayoutRounding="True" Width="12" Height="12" Data="{StaticResource CheckedGeometry}" StrokeThickness="2" Stretch="Uniform" Stroke="{DynamicResource TextIconBrush}" />
                                    </Border>
                                    <ContentPresenter Name="menuHeaderContainer" ContentTemplate="{TemplateBinding HeaderTemplate}" Grid.Column="1" ContentStringFormat="{TemplateBinding HeaderStringFormat}" ContentSource="Header" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                                    <Popup Name="PART_Popup" Grid.Column="0" AllowsTransparency="True" Focusable="False" Placement="Bottom" PlacementTarget="{Binding ElementName=templateRoot}" IsOpen="{Binding IsSubmenuOpen , RelativeSource={RelativeSource TemplatedParent}}">
                                        <hc:SimplePanel Effect="{StaticResource EffectShadow2}" Margin="8,0,8,8">
                                            <Border Name="SubMenuBorder" CornerRadius="0,0,2,2" BorderThickness="1" BorderBrush="{DynamicResource BorderBrush}" Background="{DynamicResource RegionBrush}">
                                                <ScrollViewer Style="{StaticResource ScrollViewerUpDown}" Margin="0,6">
                                                    <ItemsPresenter Name="ItemsPresenter" DirectionalNavigation="Cycle" IsSharedSizeScope="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" TabNavigation="Cycle" />
                                                </ScrollViewer>
                                            </Border>
                                            <Border Height="1" Background="{DynamicResource RegionBrush}" VerticalAlignment="Top" BorderThickness="1,0" BorderBrush="{DynamicResource BorderBrush}" HorizontalAlignment="Left" Popup="{Binding ElementName=PART_Popup}" />
                                        </hc:SimplePanel>
                                    </Popup>
                                </Grid>
                            </Border>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>
            <Trigger Property="MenuItem.Role" Value="TopLevelItem">
                <Setter Property="Margin" Value="0" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type MenuItem}">
                            <ControlTemplate.Triggers>
                                <Trigger Value="{x:Null}" Property="MenuItem.Icon">
                                    <Setter TargetName="Icon" Property="Visibility" Value="Collapsed" />
                                </Trigger>
                                <Trigger Property="MenuItem.IsChecked" Value="True">
                                    <Setter TargetName="GlyphPanel" Property="Visibility" Value="Visible" />
                                    <Setter TargetName="Icon" Property="Visibility" Value="Collapsed" />
                                </Trigger>
                                <Trigger Property="MenuItem.IsHighlighted" Value="True">
                                    <Setter TargetName="templateRoot" Value="{DynamicResource SecondaryRegionBrush}" Property="Background" />
                                    <Setter TargetName="menuHeaderContainer" Value="{DynamicResource PrimaryTextBrush}" Property="Foreground" />
                                </Trigger>
                                <Trigger Property="MenuItem.IsSubmenuOpen" Value="True">
                                    <Setter TargetName="templateRoot" Property="Background" Value="White" />
                                    <Setter TargetName="menuHeaderContainer" Value="{DynamicResource PrimaryTextBrush}" Property="Foreground" />
                                </Trigger>
                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="MenuItem.IsHighlighted" Value="True" />
                                        <Condition Property="IsEnabled" Value="False" />
                                    </MultiTrigger.Conditions>
                                    <Setter TargetName="templateRoot" Property="Background" Value="#0A000000" />
                                    <Setter TargetName="templateRoot" Property="BorderBrush" Value="#21000000" />
                                </MultiTrigger>
                            </ControlTemplate.Triggers>
                            <Border Name="templateRoot" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="1,1,1,0" Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
                                <Grid Margin="{TemplateBinding Padding}">
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="Auto" />
                                        <ColumnDefinition />
                                    </Grid.ColumnDefinitions>
                                    <ContentPresenter Name="Icon" Margin="0,0,10,0" HorizontalAlignment="Left" ContentSource="Icon" Height="16" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="Center" Width="16" />
                                    <Border Name="GlyphPanel" Margin="0,0,10,0" IsHitTestVisible="False" Grid.Column="0" CornerRadius="2" Background="{DynamicResource PrimaryBrush}" ClipToBounds="False" HorizontalAlignment="Right" Height="16" Visibility="Collapsed" VerticalAlignment="Center" Width="16">
                                        <Path UseLayoutRounding="True" Width="12" Height="12" Data="{StaticResource CheckedGeometry}" StrokeThickness="2" Stretch="Uniform" Stroke="{DynamicResource TextIconBrush}" />
                                    </Border>
                                    <ContentPresenter Name="menuHeaderContainer" ContentTemplate="{TemplateBinding HeaderTemplate}" Grid.Column="1" ContentStringFormat="{TemplateBinding HeaderStringFormat}" ContentSource="Header" HorizontalAlignment="Left" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="Center" />
                                </Grid>
                            </Border>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>
            <Trigger Property="MenuItem.Role" Value="SubmenuHeader">
                <Setter Property="DockPanel.Dock" Value="Top" />
                <Setter Property="Foreground" Value="{DynamicResource PrimaryTextBrush}" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type MenuItem}">
                            <ControlTemplate.Triggers>
                                <Trigger Property="MenuItem.IsChecked" Value="True">
                                    <Setter TargetName="GlyphPanel" Property="Visibility" Value="Visible" />
                                </Trigger>
                                <Trigger Property="hc:MenuAttach.IsEnabledAnimation" Value="false">
                                    <Setter TargetName="anim" Property="hc:TransitioningContentControl.TransitionMode" Value="Custom" />
                                    <Setter TargetName="anim" Property="hc:TransitioningContentControl.TransitionStoryboard" Value="{Storyboard}" />
                                </Trigger>
                            </ControlTemplate.Triggers>
                            <hc:TransitioningContentControl Name="anim" TransitionMode="{Binding Path=(hc:MenuAttach.AnimationMode), RelativeSource={RelativeSource TemplatedParent}}">
                                <Border Name="Bd" MinWidth="240" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
                                    <Grid Name="Grid" Margin="{TemplateBinding Padding}">
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="26" />
                                            <ColumnDefinition Width="*" />
                                            <ColumnDefinition Width="30" />
                                            <ColumnDefinition SharedSizeGroup="MenuItemIGTColumnGroup" Width="Auto" />
                                            <ColumnDefinition Width="20" />
                                        </Grid.ColumnDefinitions>
                                        <ContentPresenter Name="Icon" Margin="0,0,10,0" ContentSource="Icon" HorizontalAlignment="Right" Height="16" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="Center" Width="16" />
                                        <Border Name="GlyphPanel" Margin="0,0,10,0" IsHitTestVisible="False" Grid.Column="0" CornerRadius="2" Background="{DynamicResource PrimaryBrush}" ClipToBounds="False" HorizontalAlignment="Right" Height="16" Visibility="Hidden" VerticalAlignment="Center" Width="16">
                                            <Path UseLayoutRounding="True" Width="12" Height="12" Data="{StaticResource CheckedGeometry}" StrokeThickness="2" Stretch="Uniform" Stroke="{DynamicResource TextIconBrush}" />
                                        </Border>
                                        <ContentPresenter Name="ContentPresenter" Foreground="{TemplateBinding Foreground}" Margin="0,3" ContentTemplate="{TemplateBinding HeaderTemplate}" Grid.Column="1" ContentSource="Header" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                                        <Path Name="Path" Grid.Column="4" Width="10" Height="10" HorizontalAlignment="Left" Data="{StaticResource RightGeometry}" Stretch="Uniform" Fill="{TemplateBinding Foreground}" VerticalAlignment="Center" />
                                        <Popup Name="PART_Popup" Grid.Column="1" AllowsTransparency="True" Focusable="False" Placement="Right" VerticalOffset="-13" HorizontalOffset="10" IsOpen="{Binding IsSubmenuOpen , RelativeSource={RelativeSource TemplatedParent}}">
                                            <Border Name="SubMenuBorder" Effect="{StaticResource EffectShadow2}" Margin="8" CornerRadius="2" BorderThickness="1" BorderBrush="{DynamicResource BorderBrush}" Background="{DynamicResource RegionBrush}">
                                                <ScrollViewer Style="{StaticResource ScrollViewerUpDown}" Margin="0,6">
                                                    <ItemsPresenter Name="ItemsPresenter" DirectionalNavigation="Cycle" IsSharedSizeScope="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" TabNavigation="Cycle" />
                                                </ScrollViewer>
                                            </Border>
                                        </Popup>
                                    </Grid>
                                </Border>
                            </hc:TransitioningContentControl>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>
            <Trigger Property="MenuItem.IsHighlighted" Value="True">
                <Setter Property="Background" Value="{DynamicResource SecondaryRegionBrush}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="UIElement.Opacity" Value=".4" />
            </Trigger>
        </Style.Triggers>
        <Setter Property="Padding" Value="{StaticResource DefaultControlPadding}" />
        <Setter Property="FrameworkElement.OverridesDefaultStyle" Value="True" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="ScrollViewer.PanningMode" Value="Both" />
        <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
        <Setter Property="Foreground" Value="{DynamicResource PrimaryTextBrush}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type MenuItem}">
                    <ControlTemplate.Triggers>
                        <Trigger Property="MenuItem.IsChecked" Value="True">
                            <Setter TargetName="GlyphPanel" Property="Visibility" Value="Visible" />
                        </Trigger>
                        <Trigger Value="{x:Null}" Property="MenuItem.Icon">
                            <Setter TargetName="Icon" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="hc:MenuAttach.IsEnabledAnimation" Value="false">
                            <Setter TargetName="anim" Property="hc:TransitioningContentControl.TransitionMode" Value="Custom" />
                            <Setter TargetName="anim" Property="hc:TransitioningContentControl.TransitionStoryboard" Value="{Storyboard}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                    <hc:TransitioningContentControl Name="anim" TransitionMode="{Binding Path=(hc:MenuAttach.AnimationMode), RelativeSource={RelativeSource TemplatedParent}}">
                        <Border Name="Bd" MinWidth="240" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
                            <Grid Name="Grid" Margin="{TemplateBinding Padding}">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="26" />
                                    <ColumnDefinition Width="*" />
                                    <ColumnDefinition Width="30" />
                                    <ColumnDefinition SharedSizeGroup="MenuItemIGTColumnGroup" Width="Auto" />
                                    <ColumnDefinition Width="20" />
                                </Grid.ColumnDefinitions>
                                <ContentPresenter Name="Icon" Margin="0,0,10,0" ContentSource="Icon" HorizontalAlignment="Right" Height="16" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="Center" Width="16" />
                                <Border Name="GlyphPanel" Margin="0,0,10,0" IsHitTestVisible="False" Grid.Column="0" CornerRadius="2" Background="{DynamicResource PrimaryBrush}" ClipToBounds="False" HorizontalAlignment="Right" Height="16" Visibility="Hidden" VerticalAlignment="Center" Width="16">
                                    <Path UseLayoutRounding="True" Width="12" Height="12" Data="{StaticResource CheckedGeometry}" StrokeThickness="2" Stretch="Uniform" Stroke="{DynamicResource TextIconBrush}" />
                                </Border>
                                <ContentPresenter Name="ContentPresenter" Grid.Column="1" ContentTemplate="{TemplateBinding HeaderTemplate}" ContentSource="Header" Margin="0,3" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                                <TextBlock Name="InputGestureText" Margin="0,0,10,0" Grid.Column="3" VerticalAlignment="Center" HorizontalAlignment="Left" Text="{TemplateBinding InputGestureText}" />
                            </Grid>
                        </Border>
                    </hc:TransitioningContentControl>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="MenuBaseStyle" TargetType="{x:Type Menu}">
        <Setter Property="FrameworkElement.OverridesDefaultStyle" Value="True" />
        <Setter Property="Background" Value="{DynamicResource RegionBrush}" />
        <Setter Property="FontSize" Value="12" />
        <Setter Property="FontStyle" Value="Normal" />
        <Setter Property="FontWeight" Value="Normal" />
        <Setter Property="Foreground" Value="{DynamicResource PrimaryTextBrush}" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Menu}">
                    <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="true">
                        <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="WatermarkTextBoxBaseStyle" TargetType="{x:Type hc:WatermarkTextBox}">
        <Setter Property="Background" Value="{x:Null}" />
        <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst" />
        <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
        <Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="TextBoxBase.CaretBrush" Value="{Binding Foreground , RelativeSource={RelativeSource Self}}" />
        <Setter Property="Foreground" Value="{DynamicResource PrimaryTextBrush}" />
        <Setter Property="Padding" Value="{StaticResource DefaultInputPadding}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type hc:WatermarkTextBox}">
                    <hc:SimplePanel Name="WatermarkContent">
                        <TextBlock Name="PART_Watermark" Text="{TemplateBinding Watermark}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Foreground="{DynamicResource ThirdlyTextBrush}" Margin="{TemplateBinding Padding}" Visibility="{TemplateBinding Text , Converter={StaticResource String2VisibilityReConverter}}" />
                        <ScrollViewer Name="PART_ContentHost" Padding="{TemplateBinding Padding}" Margin="-2,0,-1,0" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" Focusable="false" ScrollViewer.HorizontalScrollBarVisibility="Hidden" ScrollViewer.VerticalScrollBarVisibility="Hidden" />
                    </hc:SimplePanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="TextBoxBaseStyle" TargetType="{x:Type TextBox}">
        <Setter Property="MinHeight" Value="{StaticResource DefaultControlHeight}" />
        <Setter Property="Background" Value="{DynamicResource RegionBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource PrimaryTextBrush}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="TextBoxBase.CaretBrush" Value="{DynamicResource PrimaryTextBrush}" />
        <Setter Property="hc:BorderElement.CornerRadius" Value="{StaticResource DefaultCornerRadius}" />
        <Setter Property="KeyboardNavigation.TabNavigation" Value="None" />
        <Setter Property="HorizontalContentAlignment" Value="Left" />
        <Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="UIElement.AllowDrop" Value="true" />
        <Setter Property="Padding" Value="{StaticResource DefaultInputPadding}" />
        <Setter Property="hc:TitleElement.MarginOnTheLeft" Value="0,8,6,8" />
        <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst" />
        <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Validation.ErrorTemplate" Value="{x:Null}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter TargetName="border" Property="UIElement.Opacity" Value="0.4" />
                        </Trigger>
                        <Trigger Property="UIElement.IsMouseOver" Value="true">
                            <Setter TargetName="border" Value="{DynamicResource SecondaryBorderBrush}" Property="BorderBrush" />
                        </Trigger>
                        <Trigger Property="UIElement.IsFocused" Value="true">
                            <Setter TargetName="border" Value="{DynamicResource PrimaryBrush}" Property="BorderBrush" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                    <Border Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}">
                        <ScrollViewer Name="PART_ContentHost" Padding="{TemplateBinding Padding}" Margin="-2,0,-1,0" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" Focusable="false" ScrollViewer.HorizontalScrollBarVisibility="Hidden" ScrollViewer.VerticalScrollBarVisibility="Hidden" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <ControlTemplate x:Key="TextBoxExtendTopTemplate" TargetType="{x:Type TextBox}">
        <ControlTemplate.Triggers>
            <Trigger Property="IsEnabled" Value="false">
                <Setter TargetName="border" Property="UIElement.Opacity" Value="0.4" />
                <Setter TargetName="PART_ContentHost" Property="UIElement.Opacity" Value="0.4" />
                <Setter TargetName="Placeholder" Property="UIElement.Opacity" Value="0.4" />
            </Trigger>
            <Trigger SourceName="PART_ContentHost" Property="UIElement.IsMouseOver" Value="true">
                <Setter TargetName="border" Value="{DynamicResource SecondaryBorderBrush}" Property="BorderBrush" />
            </Trigger>
            <Trigger Property="UIElement.IsFocused" Value="true">
                <Setter TargetName="border" Value="{DynamicResource PrimaryBrush}" Property="BorderBrush" />
            </Trigger>
        </ControlTemplate.Triggers>
        <Grid>
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition MinHeight="{Binding Path=(hc:InfoElement.MinContentHeight), RelativeSource={RelativeSource TemplatedParent}}" Height="{Binding Path=(hc:InfoElement.ContentHeight), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource Double2GridLengthConverter}}" />
            </Grid.RowDefinitions>
            <DockPanel LastChildFill="True" Margin="{TemplateBinding Padding}" Visibility="{Binding Path=(hc:InfoElement.Title), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource String2VisibilityConverter}}" HorizontalAlignment="{Binding Path=(hc:TitleElement.HorizontalAlignment), RelativeSource={RelativeSource TemplatedParent}}">
                <ContentPresenter DockPanel.Dock="Right" Foreground="{DynamicResource DangerBrush}" Margin="4,0,0,0" Content="{Binding Path=(hc:InfoElement.Symbol), RelativeSource={RelativeSource TemplatedParent}}" Visibility="{Binding Path=(hc:InfoElement.Necessary), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource Boolean2VisibilityConverter}}" />
                <TextBlock AutoTooltip="True" TextWrapping="NoWrap" TextTrimming="CharacterEllipsis" Margin="1,0,1,0" Text="{Binding Path=(hc:InfoElement.Title), RelativeSource={RelativeSource TemplatedParent}}" />
            </DockPanel>
            <Border Name="border" Grid.Row="1" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}" />
            <TextBlock Name="Placeholder" Padding="1" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Margin="{TemplateBinding Padding}" Grid.Row="1" HorizontalAlignment="Stretch" Style="{StaticResource TextBlockDefaultThiLight}" Visibility="{TemplateBinding Text , Converter={StaticResource String2VisibilityReConverter}}" Text="{Binding Path=(hc:InfoElement.Placeholder), RelativeSource={RelativeSource TemplatedParent}}" />
            <ScrollViewer Name="PART_ContentHost" Padding="{TemplateBinding Padding}" Margin="-1,1" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" Grid.Row="1" Focusable="false" ScrollViewer.HorizontalScrollBarVisibility="Hidden" ScrollViewer.VerticalScrollBarVisibility="Hidden" />
        </Grid>
    </ControlTemplate>
    <ControlTemplate x:Key="TextBoxExtendLeftTemplate" TargetType="{x:Type TextBox}">
        <ControlTemplate.Triggers>
            <Trigger Property="IsEnabled" Value="false">
                <Setter TargetName="border" Property="UIElement.Opacity" Value="0.4" />
                <Setter TargetName="PART_ContentHost" Property="UIElement.Opacity" Value="0.4" />
                <Setter TargetName="Placeholder" Property="UIElement.Opacity" Value="0.4" />
            </Trigger>
            <Trigger SourceName="PART_ContentHost" Property="UIElement.IsMouseOver" Value="true">
                <Setter TargetName="border" Value="{DynamicResource SecondaryBorderBrush}" Property="BorderBrush" />
            </Trigger>
            <Trigger Property="UIElement.IsFocused" Value="true">
                <Setter TargetName="border" Value="{DynamicResource PrimaryBrush}" Property="BorderBrush" />
            </Trigger>
        </ControlTemplate.Triggers>
        <Grid MinHeight="{Binding Path=(hc:InfoElement.MinContentHeight), RelativeSource={RelativeSource TemplatedParent}}" Height="{Binding Path=(hc:InfoElement.ContentHeight), RelativeSource={RelativeSource TemplatedParent}}">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="{Binding Path=(hc:InfoElement.TitleWidth), RelativeSource={RelativeSource TemplatedParent}}" />
                <ColumnDefinition />
            </Grid.ColumnDefinitions>
            <DockPanel LastChildFill="True" Visibility="{Binding Path=(hc:InfoElement.Title), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource String2VisibilityConverter}}" HorizontalAlignment="{Binding Path=(hc:TitleElement.HorizontalAlignment), RelativeSource={RelativeSource TemplatedParent}}" VerticalAlignment="{Binding Path=(hc:TitleElement.VerticalAlignment), RelativeSource={RelativeSource TemplatedParent}}" Margin="{Binding Path=(hc:TitleElement.MarginOnTheLeft), RelativeSource={RelativeSource TemplatedParent}}">
                <ContentPresenter DockPanel.Dock="Right" Foreground="{DynamicResource DangerBrush}" Margin="4,0,0,0" Content="{Binding Path=(hc:InfoElement.Symbol), RelativeSource={RelativeSource TemplatedParent}}" Visibility="{Binding Path=(hc:InfoElement.Necessary), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource Boolean2VisibilityConverter}}" />
                <TextBlock AutoTooltip="True" TextWrapping="NoWrap" TextTrimming="CharacterEllipsis" Text="{Binding Path=(hc:InfoElement.Title), RelativeSource={RelativeSource TemplatedParent}}" />
            </DockPanel>
            <Border Name="border" Grid.Column="1" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}" />
            <TextBlock Name="Placeholder" Padding="1" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Margin="{TemplateBinding Padding}" Grid.Column="1" HorizontalAlignment="Stretch" Style="{StaticResource TextBlockDefaultThiLight}" Visibility="{TemplateBinding Text , Converter={StaticResource String2VisibilityReConverter}}" Text="{Binding Path=(hc:InfoElement.Placeholder), RelativeSource={RelativeSource TemplatedParent}}" />
            <ScrollViewer Name="PART_ContentHost" Padding="{TemplateBinding Padding}" Margin="-1,1" Grid.Column="1" Focusable="false" ScrollViewer.HorizontalScrollBarVisibility="Hidden" ScrollViewer.VerticalScrollBarVisibility="Hidden" />
        </Grid>
    </ControlTemplate>
    <Style x:Key="TextBoxExtendBaseStyle" BasedOn="{StaticResource TextBoxBaseStyle}" TargetType="{x:Type TextBox}">
        <Style.Triggers>
            <Trigger Property="hc:TitleElement.TitlePlacement" Value="Left">
                <Setter Property="Template" Value="{StaticResource TextBoxExtendLeftTemplate}" />
                <Setter Property="Width" Value="Auto" />
            </Trigger>
        </Style.Triggers>
        <Setter Property="hc:InfoElement.Symbol" Value="●" />
        <Setter Property="hc:InfoElement.ContentHeight" Value="{x:Static system:Double.NaN}" />
        <Setter Property="hc:InfoElement.MinContentHeight" Value="{StaticResource DefaultControlHeight}" />
        <Setter Property="Height" Value="Auto" />
        <Setter Property="Template" Value="{StaticResource TextBoxExtendTopTemplate}" />
    </Style>
    <ControlTemplate x:Key="TextBoxPlusTopTemplate" TargetType="{x:Type hc:TextBox}">
        <ControlTemplate.Resources>
            <Storyboard Name="StoryboardShow">
                <ThicknessAnimation TargetName="TextBlockError" TargetProperty="Margin" To="9,0,0,-18" Duration="0:0:.2" />
            </Storyboard>
            <Storyboard Name="StoryboardHidden">
                <ThicknessAnimation TargetName="TextBlockError" TargetProperty="Margin" To="9,0,0,4" Duration="0:0:0" />
            </Storyboard>
        </ControlTemplate.Resources>
        <ControlTemplate.Triggers>
            <Trigger Property="IsEnabled" Value="false">
                <Setter TargetName="templateRoot" Property="UIElement.Opacity" Value="0.4" />
            </Trigger>
            <Trigger SourceName="templateRoot" Property="UIElement.IsMouseOver" Value="true">
                <Setter Value="{DynamicResource SecondaryBorderBrush}" Property="BorderBrush" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition SourceName="templateRoot" Property="UIElement.IsMouseOver" Value="true" />
                    <Condition Property="hc:TextBox.ShowClearButton" Value="True" />
                </MultiTrigger.Conditions>
                <Setter TargetName="ButtonClear" Property="Visibility" Value="Visible" />
            </MultiTrigger>
            <Trigger Property="UIElement.IsFocused" Value="true">
                <Setter TargetName="templateRoot" Value="{DynamicResource PrimaryBrush}" Property="BorderBrush" />
            </Trigger>
            <Trigger Property="hc:TextBox.IsError" Value="true">
                <Trigger.EnterActions>
                    <BeginStoryboard Storyboard="{StaticResource StoryboardShow}" />
                </Trigger.EnterActions>
                <Trigger.ExitActions>
                    <BeginStoryboard Storyboard="{StaticResource StoryboardHidden}" />
                </Trigger.ExitActions>
                <Setter TargetName="templateRoot" Value="{DynamicResource DangerBrush}" Property="BorderBrush" />
            </Trigger>
        </ControlTemplate.Triggers>
        <Grid>
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition MinHeight="{Binding Path=(hc:InfoElement.MinContentHeight), RelativeSource={RelativeSource TemplatedParent}}" Height="{Binding Path=(hc:InfoElement.ContentHeight), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource Double2GridLengthConverter}}" />
            </Grid.RowDefinitions>
            <TextBlock Name="TextBlockError" TextBlock.FontSize="12" Text="{TemplateBinding ErrorStr}" VerticalAlignment="Bottom" Margin="9,0,0,4" Foreground="{DynamicResource DangerBrush}" Grid.Row="1" />
            <DockPanel LastChildFill="True" Grid.Row="0" Margin="{TemplateBinding Padding}" Visibility="{Binding Path=(hc:InfoElement.Title), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource String2VisibilityConverter}}" HorizontalAlignment="{Binding Path=(hc:TitleElement.HorizontalAlignment), RelativeSource={RelativeSource TemplatedParent}}">
                <ContentPresenter DockPanel.Dock="Right" Foreground="{DynamicResource DangerBrush}" Margin="4,0,0,0" Content="{Binding Path=(hc:InfoElement.Symbol), RelativeSource={RelativeSource TemplatedParent}}" Visibility="{Binding Path=(hc:InfoElement.Necessary), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource Boolean2VisibilityConverter}}" />
                <TextBlock AutoTooltip="True" TextWrapping="NoWrap" TextTrimming="CharacterEllipsis" Margin="1,0,1,0" Text="{Binding Path=(hc:InfoElement.Title), RelativeSource={RelativeSource TemplatedParent}}" />
            </DockPanel>
            <Border Name="templateRoot" Grid.Row="1" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}">
                <Grid SnapsToDevicePixels="true">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="*" />
                        <ColumnDefinition Width="Auto" />
                    </Grid.ColumnDefinitions>
                    <TextBlock VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Margin="{TemplateBinding Padding}" HorizontalAlignment="Stretch" Style="{StaticResource TextBlockDefaultThiLight}" Visibility="{TemplateBinding Text , Converter={StaticResource String2VisibilityReConverter}}" Text="{Binding Path=(hc:InfoElement.Placeholder), RelativeSource={RelativeSource TemplatedParent}}" />
                    <ScrollViewer Name="PART_ContentHost" Margin="-2,0,-1,0" Grid.Column="0" Padding="{TemplateBinding Padding}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" Focusable="false" ScrollViewer.HorizontalScrollBarVisibility="Hidden" ScrollViewer.VerticalScrollBarVisibility="Hidden" />
                    <Button Name="ButtonClear" Height="{x:Static system:Double.NaN}" Command="interactivity:ControlCommands.Clear" Margin="0,0,7,0" Visibility="Collapsed" Width="16" Grid.Column="1" Style="{StaticResource ButtonIcon}" Padding="0" Geometry="{StaticResource DeleteFillCircleGeometry}" Foreground="{Binding BorderBrush , ElementName=templateRoot}" />
                </Grid>
            </Border>
        </Grid>
    </ControlTemplate>
    <ControlTemplate x:Key="TextBoxPlusLeftTemplate" TargetType="{x:Type hc:TextBox}">
        <ControlTemplate.Resources>
            <Storyboard Name="StoryboardShow">
                <ThicknessAnimation TargetName="TextBlockError" TargetProperty="Margin" To="9,0,0,-18" Duration="0:0:.2" />
            </Storyboard>
            <Storyboard Name="StoryboardHidden">
                <ThicknessAnimation TargetName="TextBlockError" TargetProperty="Margin" To="9,0,0,4" Duration="0:0:0" />
            </Storyboard>
        </ControlTemplate.Resources>
        <ControlTemplate.Triggers>
            <Trigger Property="IsEnabled" Value="false">
                <Setter TargetName="templateRoot" Property="UIElement.Opacity" Value="0.4" />
            </Trigger>
            <Trigger SourceName="templateRoot" Property="UIElement.IsMouseOver" Value="true">
                <Setter Value="{DynamicResource SecondaryBorderBrush}" Property="BorderBrush" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition SourceName="templateRoot" Property="UIElement.IsMouseOver" Value="true" />
                    <Condition Property="hc:TextBox.ShowClearButton" Value="True" />
                </MultiTrigger.Conditions>
                <Setter TargetName="ButtonClear" Property="Visibility" Value="Visible" />
            </MultiTrigger>
            <Trigger Property="UIElement.IsFocused" Value="true">
                <Setter TargetName="templateRoot" Value="{DynamicResource PrimaryBrush}" Property="BorderBrush" />
            </Trigger>
            <Trigger Property="hc:TextBox.IsError" Value="true">
                <Trigger.EnterActions>
                    <BeginStoryboard Storyboard="{StaticResource StoryboardShow}" />
                </Trigger.EnterActions>
                <Trigger.ExitActions>
                    <BeginStoryboard Storyboard="{StaticResource StoryboardHidden}" />
                </Trigger.ExitActions>
                <Setter TargetName="templateRoot" Value="{DynamicResource DangerBrush}" Property="BorderBrush" />
            </Trigger>
        </ControlTemplate.Triggers>
        <Grid MinHeight="{Binding Path=(hc:InfoElement.MinContentHeight), RelativeSource={RelativeSource TemplatedParent}}" Height="{Binding Path=(hc:InfoElement.ContentHeight), RelativeSource={RelativeSource TemplatedParent}}">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="{Binding Path=(hc:InfoElement.TitleWidth), RelativeSource={RelativeSource TemplatedParent}}" />
                <ColumnDefinition />
            </Grid.ColumnDefinitions>
            <TextBlock Name="TextBlockError" TextBlock.FontSize="12" Text="{TemplateBinding ErrorStr}" VerticalAlignment="Bottom" Margin="9,0,0,4" Foreground="{DynamicResource DangerBrush}" Grid.Column="1" />
            <DockPanel LastChildFill="True" Grid.Column="0" Visibility="{Binding Path=(hc:InfoElement.Title), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource String2VisibilityConverter}}" HorizontalAlignment="{Binding Path=(hc:TitleElement.HorizontalAlignment), RelativeSource={RelativeSource TemplatedParent}}" VerticalAlignment="{Binding Path=(hc:TitleElement.VerticalAlignment), RelativeSource={RelativeSource TemplatedParent}}" Margin="{Binding Path=(hc:TitleElement.MarginOnTheLeft), RelativeSource={RelativeSource TemplatedParent}}">
                <ContentPresenter DockPanel.Dock="Right" Foreground="{DynamicResource DangerBrush}" Margin="4,0,0,0" Content="{Binding Path=(hc:InfoElement.Symbol), RelativeSource={RelativeSource TemplatedParent}}" Visibility="{Binding Path=(hc:InfoElement.Necessary), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource Boolean2VisibilityConverter}}" />
                <TextBlock AutoTooltip="True" TextWrapping="NoWrap" TextTrimming="CharacterEllipsis" Text="{Binding Path=(hc:InfoElement.Title), RelativeSource={RelativeSource TemplatedParent}}" />
            </DockPanel>
            <Border Name="templateRoot" Grid.Column="1" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}">
                <Grid SnapsToDevicePixels="true">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="*" />
                        <ColumnDefinition Width="Auto" />
                    </Grid.ColumnDefinitions>
                    <TextBlock VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Margin="{TemplateBinding Padding}" HorizontalAlignment="Stretch" Style="{StaticResource TextBlockDefaultThiLight}" Visibility="{TemplateBinding Text , Converter={StaticResource String2VisibilityReConverter}}" Text="{Binding Path=(hc:InfoElement.Placeholder), RelativeSource={RelativeSource TemplatedParent}}" />
                    <ScrollViewer Name="PART_ContentHost" Grid.Column="0" Margin="-2,0,-1,0" Padding="{TemplateBinding Padding}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" Focusable="false" ScrollViewer.HorizontalScrollBarVisibility="Hidden" ScrollViewer.VerticalScrollBarVisibility="Hidden" />
                    <Button Name="ButtonClear" Height="{x:Static system:Double.NaN}" Command="interactivity:ControlCommands.Clear" Margin="0,0,7,0" Visibility="Collapsed" Width="16" Grid.Column="1" Style="{StaticResource ButtonIcon}" Padding="0" Geometry="{StaticResource DeleteFillCircleGeometry}" Foreground="{Binding BorderBrush , ElementName=templateRoot}" />
                </Grid>
            </Border>
        </Grid>
    </ControlTemplate>
    <Style x:Key="TextBoxPlusBaseStyle" BasedOn="{StaticResource TextBoxExtendBaseStyle}" TargetType="{x:Type hc:TextBox}">
        <Style.Triggers>
            <Trigger Property="hc:TitleElement.TitlePlacement" Value="Left">
                <Setter Property="Template" Value="{StaticResource TextBoxPlusLeftTemplate}" />
                <Setter Property="Width" Value="Auto" />
            </Trigger>
        </Style.Triggers>
        <Setter Property="hc:TextBox.IsError" Value="{Binding Path=(Validation.HasError), RelativeSource={RelativeSource Self}}" />
        <Setter Property="Template" Value="{StaticResource TextBoxPlusTopTemplate}" />
    </Style>
    <Style x:Key="SearchBarBaseStyle" BasedOn="{StaticResource TextBoxBaseStyle}" TargetType="{x:Type hc:SearchBar}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type hc:SearchBar}">
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter TargetName="templateRoot" Property="UIElement.Opacity" Value="0.4" />
                        </Trigger>
                        <Trigger Property="UIElement.IsMouseOver" Value="true">
                            <Setter Value="{DynamicResource SecondaryBorderBrush}" Property="BorderBrush" />
                        </Trigger>
                        <Trigger Property="UIElement.IsFocused" Value="true">
                            <Setter Value="{DynamicResource PrimaryBrush}" Property="BorderBrush" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                    <Border Name="templateRoot" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition />
                                <ColumnDefinition Width="30" />
                            </Grid.ColumnDefinitions>
                            <Button Height="{x:Static system:Double.NaN}" Command="interactivity:ControlCommands.Search" Style="{StaticResource ButtonIcon}" Padding="7,6" Geometry="{StaticResource SearchGeometry}" Grid.Column="1" Focusable="False" Grid.Row="0" Foreground="{Binding BorderBrush , ElementName=templateRoot}" />
                            <ScrollViewer Name="PART_ContentHost" Margin="-2,0" Grid.Row="0" Grid.Column="0" Padding="{TemplateBinding Padding}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" Focusable="false" ScrollViewer.HorizontalScrollBarVisibility="Hidden" ScrollViewer.VerticalScrollBarVisibility="Hidden" />
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <ControlTemplate x:Key="SearchBarExtendTopTemplate" TargetType="{x:Type hc:SearchBar}">
        <ControlTemplate.Triggers>
            <Trigger Property="IsEnabled" Value="false">
                <Setter TargetName="templateRoot" Property="UIElement.Opacity" Value="0.4" />
            </Trigger>
            <Trigger Property="UIElement.IsMouseOver" Value="true">
                <Setter Value="{DynamicResource SecondaryBorderBrush}" Property="BorderBrush" />
            </Trigger>
            <Trigger Property="UIElement.IsFocused" Value="true">
                <Setter Value="{DynamicResource PrimaryBrush}" Property="BorderBrush" />
            </Trigger>
        </ControlTemplate.Triggers>
        <Grid>
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition MinHeight="{Binding Path=(hc:InfoElement.MinContentHeight), RelativeSource={RelativeSource TemplatedParent}}" Height="{Binding Path=(hc:InfoElement.ContentHeight), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource Double2GridLengthConverter}}" />
            </Grid.RowDefinitions>
            <DockPanel LastChildFill="True" Margin="{TemplateBinding Padding}" Visibility="{Binding Path=(hc:InfoElement.Title), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource String2VisibilityConverter}}" HorizontalAlignment="{Binding Path=(hc:TitleElement.HorizontalAlignment), RelativeSource={RelativeSource TemplatedParent}}">
                <ContentPresenter DockPanel.Dock="Right" Foreground="{DynamicResource DangerBrush}" Margin="4,0,0,0" Content="{Binding Path=(hc:InfoElement.Symbol), RelativeSource={RelativeSource TemplatedParent}}" Visibility="{Binding Path=(hc:InfoElement.Necessary), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource Boolean2VisibilityConverter}}" />
                <TextBlock AutoTooltip="True" TextWrapping="NoWrap" TextTrimming="CharacterEllipsis" Margin="1,0,1,0" Text="{Binding Path=(hc:InfoElement.Title), RelativeSource={RelativeSource TemplatedParent}}" />
            </DockPanel>
            <Border Name="templateRoot" Grid.Row="1" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}">
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition />
                        <ColumnDefinition Width="30" />
                    </Grid.ColumnDefinitions>
                    <Button Height="{x:Static system:Double.NaN}" Command="interactivity:ControlCommands.Search" Style="{StaticResource ButtonIcon}" Padding="7,6" Geometry="{StaticResource SearchGeometry}" Grid.Column="1" Focusable="False" Grid.Row="0" Foreground="{Binding BorderBrush , ElementName=templateRoot}" />
                    <TextBlock HorizontalAlignment="Stretch" Grid.Row="0" Grid.Column="0" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Style="{StaticResource TextBlockDefaultThiLight}" Margin="{TemplateBinding Padding}" Text="{Binding Path=(hc:InfoElement.Placeholder), RelativeSource={RelativeSource TemplatedParent}}" Visibility="{TemplateBinding Text , Converter={StaticResource String2VisibilityReConverter}}" />
                    <ScrollViewer Name="PART_ContentHost" Margin="-2,0" Grid.Row="0" Grid.Column="0" Padding="{TemplateBinding Padding}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" Focusable="false" ScrollViewer.HorizontalScrollBarVisibility="Hidden" ScrollViewer.VerticalScrollBarVisibility="Hidden" />
                </Grid>
            </Border>
        </Grid>
    </ControlTemplate>
    <ControlTemplate x:Key="SearchBarExtendLeftTemplate" TargetType="{x:Type hc:SearchBar}">
        <ControlTemplate.Triggers>
            <Trigger Property="IsEnabled" Value="false">
                <Setter TargetName="templateRoot" Property="UIElement.Opacity" Value="0.4" />
            </Trigger>
            <Trigger Property="UIElement.IsMouseOver" Value="true">
                <Setter Value="{DynamicResource SecondaryBorderBrush}" Property="BorderBrush" />
            </Trigger>
            <Trigger Property="UIElement.IsFocused" Value="true">
                <Setter Value="{DynamicResource PrimaryBrush}" Property="BorderBrush" />
            </Trigger>
        </ControlTemplate.Triggers>
        <Grid MinHeight="{Binding Path=(hc:InfoElement.MinContentHeight), RelativeSource={RelativeSource TemplatedParent}}" Height="{Binding Path=(hc:InfoElement.ContentHeight), RelativeSource={RelativeSource TemplatedParent}}">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="{Binding Path=(hc:InfoElement.TitleWidth), RelativeSource={RelativeSource TemplatedParent}}" />
                <ColumnDefinition />
            </Grid.ColumnDefinitions>
            <DockPanel LastChildFill="True" Margin="0,7,6,7" Visibility="{Binding Path=(hc:InfoElement.Title), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource String2VisibilityConverter}}" HorizontalAlignment="{Binding Path=(hc:TitleElement.HorizontalAlignment), RelativeSource={RelativeSource TemplatedParent}}" VerticalAlignment="{Binding Path=(hc:TitleElement.VerticalAlignment), RelativeSource={RelativeSource TemplatedParent}}">
                <ContentPresenter DockPanel.Dock="Right" Foreground="{DynamicResource DangerBrush}" Margin="4,0,0,0" Content="{Binding Path=(hc:InfoElement.Symbol), RelativeSource={RelativeSource TemplatedParent}}" Visibility="{Binding Path=(hc:InfoElement.Necessary), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource Boolean2VisibilityConverter}}" />
                <TextBlock AutoTooltip="True" TextWrapping="NoWrap" TextTrimming="CharacterEllipsis" Text="{Binding Path=(hc:InfoElement.Title), RelativeSource={RelativeSource TemplatedParent}}" />
            </DockPanel>
            <Border Name="templateRoot" Grid.Column="1" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}">
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition />
                        <ColumnDefinition Width="30" />
                    </Grid.ColumnDefinitions>
                    <Button Height="{x:Static system:Double.NaN}" Command="interactivity:ControlCommands.Search" Style="{StaticResource ButtonIcon}" Padding="7,6" Geometry="{StaticResource SearchGeometry}" Grid.Column="1" Focusable="False" Grid.Row="0" Foreground="{Binding BorderBrush , ElementName=templateRoot}" />
                    <TextBlock HorizontalAlignment="Stretch" Grid.Row="0" Grid.Column="0" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Style="{StaticResource TextBlockDefaultThiLight}" Margin="{TemplateBinding Padding}" Text="{Binding Path=(hc:InfoElement.Placeholder), RelativeSource={RelativeSource TemplatedParent}}" Visibility="{TemplateBinding Text , Converter={StaticResource String2VisibilityReConverter}}" />
                    <ScrollViewer Name="PART_ContentHost" Margin="-2,0" Grid.Row="0" Grid.Column="0" Padding="{TemplateBinding Padding}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" Focusable="false" ScrollViewer.HorizontalScrollBarVisibility="Hidden" ScrollViewer.VerticalScrollBarVisibility="Hidden" />
                </Grid>
            </Border>
        </Grid>
    </ControlTemplate>
    <Style x:Key="SearchBarExtendBaseStyle" BasedOn="{StaticResource SearchBarBaseStyle}" TargetType="{x:Type hc:SearchBar}">
        <Style.Triggers>
            <Trigger Property="hc:TitleElement.TitlePlacement" Value="Left">
                <Setter Property="Template" Value="{StaticResource SearchBarExtendLeftTemplate}" />
                <Setter Property="Width" Value="Auto" />
            </Trigger>
        </Style.Triggers>
        <Setter Property="Height" Value="Auto" />
        <Setter Property="hc:InfoElement.Symbol" Value="●" />
        <Setter Property="hc:InfoElement.ContentHeight" Value="{x:Static system:Double.NaN}" />
        <Setter Property="hc:InfoElement.MinContentHeight" Value="{StaticResource DefaultControlHeight}" />
        <Setter Property="Template" Value="{StaticResource SearchBarExtendTopTemplate}" />
    </Style>
    <ControlTemplate x:Key="SearchBarPlusTopTemplate" TargetType="{x:Type hc:SearchBar}">
        <ControlTemplate.Resources>
            <Storyboard Name="StoryboardShow">
                <ThicknessAnimation TargetName="TextBlockError" TargetProperty="Margin" To="9,0,0,-18" Duration="0:0:.2" />
            </Storyboard>
            <Storyboard Name="StoryboardHidden">
                <ThicknessAnimation TargetName="TextBlockError" TargetProperty="Margin" To="9,0,0,4" Duration="0:0:0" />
            </Storyboard>
        </ControlTemplate.Resources>
        <ControlTemplate.Triggers>
            <Trigger Property="IsEnabled" Value="false">
                <Setter TargetName="templateRoot" Property="UIElement.Opacity" Value="0.4" />
            </Trigger>
            <Trigger Property="UIElement.IsMouseOver" Value="true">
                <Setter Value="{DynamicResource SecondaryBorderBrush}" Property="BorderBrush" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition SourceName="templateRoot" Property="UIElement.IsMouseOver" Value="true" />
                    <Condition Property="hc:TextBox.ShowClearButton" Value="True" />
                </MultiTrigger.Conditions>
                <Setter TargetName="ButtonClear" Property="Visibility" Value="Visible" />
            </MultiTrigger>
            <Trigger Property="UIElement.IsFocused" Value="true">
                <Setter TargetName="templateRoot" Value="{DynamicResource PrimaryBrush}" Property="BorderBrush" />
            </Trigger>
            <Trigger Property="hc:TextBox.IsError" Value="true">
                <Trigger.EnterActions>
                    <BeginStoryboard Storyboard="{StaticResource StoryboardShow}" />
                </Trigger.EnterActions>
                <Trigger.ExitActions>
                    <BeginStoryboard Storyboard="{StaticResource StoryboardHidden}" />
                </Trigger.ExitActions>
                <Setter TargetName="templateRoot" Value="{DynamicResource DangerBrush}" Property="BorderBrush" />
            </Trigger>
        </ControlTemplate.Triggers>
        <Grid>
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition MinHeight="{Binding Path=(hc:InfoElement.MinContentHeight), RelativeSource={RelativeSource TemplatedParent}}" Height="{Binding Path=(hc:InfoElement.ContentHeight), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource Double2GridLengthConverter}}" />
            </Grid.RowDefinitions>
            <DockPanel LastChildFill="True" Margin="{TemplateBinding Padding}" Visibility="{Binding Path=(hc:InfoElement.Title), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource String2VisibilityConverter}}" HorizontalAlignment="{Binding Path=(hc:TitleElement.HorizontalAlignment), RelativeSource={RelativeSource TemplatedParent}}">
                <ContentPresenter DockPanel.Dock="Right" Foreground="{DynamicResource DangerBrush}" Margin="4,0,0,0" Content="{Binding Path=(hc:InfoElement.Symbol), RelativeSource={RelativeSource TemplatedParent}}" Visibility="{Binding Path=(hc:InfoElement.Necessary), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource Boolean2VisibilityConverter}}" />
                <TextBlock AutoTooltip="True" TextWrapping="NoWrap" TextTrimming="CharacterEllipsis" Margin="1,0,1,0" Text="{Binding Path=(hc:InfoElement.Title), RelativeSource={RelativeSource TemplatedParent}}" />
            </DockPanel>
            <TextBlock Name="TextBlockError" Grid.Row="1" TextBlock.FontSize="12" Text="{TemplateBinding ErrorStr}" VerticalAlignment="Bottom" Margin="9,0,0,4" Foreground="{DynamicResource DangerBrush}" />
            <Border Name="templateRoot" Grid.Row="1" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}">
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition />
                        <ColumnDefinition Width="Auto" />
                        <ColumnDefinition Width="25" />
                    </Grid.ColumnDefinitions>
                    <Button Name="ButtonClear" Height="{x:Static system:Double.NaN}" Command="interactivity:ControlCommands.Clear" Visibility="Collapsed" Width="16" Grid.Column="1" Style="{StaticResource ButtonIcon}" Padding="0,6" Geometry="{StaticResource DeleteFillCircleGeometry}" Foreground="{Binding BorderBrush , ElementName=templateRoot}" />
                    <Button Height="{x:Static system:Double.NaN}" Command="interactivity:ControlCommands.Search" Style="{StaticResource ButtonIcon}" Padding="2,6,7,6" Geometry="{StaticResource SearchGeometry}" Grid.Column="2" Focusable="False" Grid.Row="0" Foreground="{Binding BorderBrush , ElementName=templateRoot}" />
                    <TextBlock HorizontalAlignment="Stretch" Grid.Row="0" Grid.Column="0" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Style="{StaticResource TextBlockDefaultThiLight}" Margin="{TemplateBinding Padding}" Text="{Binding Path=(hc:InfoElement.Placeholder), RelativeSource={RelativeSource TemplatedParent}}" Visibility="{TemplateBinding Text , Converter={StaticResource String2VisibilityReConverter}}" />
                    <ScrollViewer Name="PART_ContentHost" Margin="-2,0" Grid.Row="0" Grid.Column="0" Padding="{TemplateBinding Padding}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" Focusable="false" ScrollViewer.HorizontalScrollBarVisibility="Hidden" ScrollViewer.VerticalScrollBarVisibility="Hidden" />
                </Grid>
            </Border>
        </Grid>
    </ControlTemplate>
    <ControlTemplate x:Key="SearchBarPlusLeftTemplate" TargetType="{x:Type hc:SearchBar}">
        <ControlTemplate.Resources>
            <Storyboard Name="StoryboardShow">
                <ThicknessAnimation TargetName="TextBlockError" TargetProperty="Margin" To="9,0,0,-18" Duration="0:0:.2" />
            </Storyboard>
            <Storyboard Name="StoryboardHidden">
                <ThicknessAnimation TargetName="TextBlockError" TargetProperty="Margin" To="9,0,0,4" Duration="0:0:0" />
            </Storyboard>
        </ControlTemplate.Resources>
        <ControlTemplate.Triggers>
            <Trigger Property="IsEnabled" Value="false">
                <Setter TargetName="templateRoot" Property="UIElement.Opacity" Value="0.4" />
            </Trigger>
            <Trigger Property="UIElement.IsMouseOver" Value="true">
                <Setter Value="{DynamicResource SecondaryBorderBrush}" Property="BorderBrush" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition SourceName="templateRoot" Property="UIElement.IsMouseOver" Value="true" />
                    <Condition Property="hc:TextBox.ShowClearButton" Value="True" />
                </MultiTrigger.Conditions>
                <Setter TargetName="ButtonClear" Property="Visibility" Value="Visible" />
            </MultiTrigger>
            <Trigger Property="UIElement.IsFocused" Value="true">
                <Setter TargetName="templateRoot" Value="{DynamicResource PrimaryBrush}" Property="BorderBrush" />
            </Trigger>
            <Trigger Property="hc:TextBox.IsError" Value="true">
                <Trigger.EnterActions>
                    <BeginStoryboard Storyboard="{StaticResource StoryboardShow}" />
                </Trigger.EnterActions>
                <Trigger.ExitActions>
                    <BeginStoryboard Storyboard="{StaticResource StoryboardHidden}" />
                </Trigger.ExitActions>
                <Setter TargetName="templateRoot" Value="{DynamicResource DangerBrush}" Property="BorderBrush" />
            </Trigger>
        </ControlTemplate.Triggers>
        <Grid MinHeight="{Binding Path=(hc:InfoElement.MinContentHeight), RelativeSource={RelativeSource TemplatedParent}}" Height="{Binding Path=(hc:InfoElement.ContentHeight), RelativeSource={RelativeSource TemplatedParent}}">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="{Binding Path=(hc:InfoElement.TitleWidth), RelativeSource={RelativeSource TemplatedParent}}" />
                <ColumnDefinition />
            </Grid.ColumnDefinitions>
            <DockPanel LastChildFill="True" Margin="0,7,6,7" Visibility="{Binding Path=(hc:InfoElement.Title), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource String2VisibilityConverter}}" HorizontalAlignment="{Binding Path=(hc:TitleElement.HorizontalAlignment), RelativeSource={RelativeSource TemplatedParent}}" VerticalAlignment="{Binding Path=(hc:TitleElement.VerticalAlignment), RelativeSource={RelativeSource TemplatedParent}}">
                <ContentPresenter DockPanel.Dock="Right" Foreground="{DynamicResource DangerBrush}" Margin="4,0,0,0" Content="{Binding Path=(hc:InfoElement.Symbol), RelativeSource={RelativeSource TemplatedParent}}" Visibility="{Binding Path=(hc:InfoElement.Necessary), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource Boolean2VisibilityConverter}}" />
                <TextBlock AutoTooltip="True" TextWrapping="NoWrap" TextTrimming="CharacterEllipsis" Text="{Binding Path=(hc:InfoElement.Title), RelativeSource={RelativeSource TemplatedParent}}" />
            </DockPanel>
            <TextBlock Name="TextBlockError" TextBlock.FontSize="12" Text="{TemplateBinding ErrorStr}" VerticalAlignment="Bottom" Margin="9,0,0,4" Foreground="{DynamicResource DangerBrush}" Grid.Column="1" />
            <Border Name="templateRoot" Grid.Column="1" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}">
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition />
                        <ColumnDefinition Width="Auto" />
                        <ColumnDefinition Width="25" />
                    </Grid.ColumnDefinitions>
                    <Button Name="ButtonClear" Height="{x:Static system:Double.NaN}" Command="interactivity:ControlCommands.Clear" Visibility="Collapsed" Width="16" Grid.Column="1" Style="{StaticResource ButtonIcon}" Padding="0,6" Geometry="{StaticResource DeleteFillCircleGeometry}" Foreground="{Binding BorderBrush , ElementName=templateRoot}" />
                    <Button Height="{x:Static system:Double.NaN}" Command="interactivity:ControlCommands.Search" Style="{StaticResource ButtonIcon}" Padding="2,6,7,6" Geometry="{StaticResource SearchGeometry}" Grid.Column="2" Focusable="False" Grid.Row="0" Foreground="{Binding BorderBrush , ElementName=templateRoot}" />
                    <TextBlock HorizontalAlignment="Stretch" Grid.Row="0" Grid.Column="0" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Style="{StaticResource TextBlockDefaultThiLight}" Margin="{TemplateBinding Padding}" Text="{Binding Path=(hc:InfoElement.Placeholder), RelativeSource={RelativeSource TemplatedParent}}" Visibility="{TemplateBinding Text , Converter={StaticResource String2VisibilityReConverter}}" />
                    <ScrollViewer Name="PART_ContentHost" Margin="-2,0" Grid.Row="0" Grid.Column="0" Padding="{TemplateBinding Padding}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" Focusable="false" ScrollViewer.HorizontalScrollBarVisibility="Hidden" ScrollViewer.VerticalScrollBarVisibility="Hidden" />
                </Grid>
            </Border>
        </Grid>
    </ControlTemplate>
    <Style x:Key="SearchBarPlusBaseStyle" BasedOn="{StaticResource SearchBarExtendBaseStyle}" TargetType="{x:Type hc:SearchBar}">
        <Style.Triggers>
            <Trigger Property="hc:TitleElement.TitlePlacement" Value="Left">
                <Setter Property="Template" Value="{StaticResource SearchBarPlusLeftTemplate}" />
                <Setter Property="Width" Value="Auto" />
            </Trigger>
        </Style.Triggers>
        <Setter Property="Template" Value="{StaticResource SearchBarPlusTopTemplate}" />
    </Style>
    <Style x:Key="{x:Type hc:Tag}" BasedOn="{StaticResource TagBaseStyle}" TargetType="{x:Type hc:Tag}" />
    <Style x:Key="{x:Type hc:TagContainer}" BasedOn="{StaticResource TagContainerBaseStyle}" TargetType="{x:Type hc:TagContainer}" />
    <Style x:Key="{x:Type hc:SearchBar}" BasedOn="{StaticResource SearchBarBaseStyle}" TargetType="{x:Type hc:SearchBar}" />
    <Style x:Key="SearchBarExtend" BasedOn="{StaticResource SearchBarExtendBaseStyle}" TargetType="{x:Type hc:SearchBar}" />
    <Style x:Key="SearchBarPlus" BasedOn="{StaticResource SearchBarPlusBaseStyle}" TargetType="{x:Type hc:SearchBar}" />
    <Style x:Key="{x:Type ComboBox}" BasedOn="{StaticResource ComboBoxBaseStyle}" TargetType="{x:Type ComboBox}" />
    <Style x:Key="ComboBox.Small" BasedOn="{StaticResource ComboBoxBaseStyle}" TargetType="{x:Type ComboBox}">
        <Setter Property="MinHeight" Value="20" />
        <Setter Property="Padding" Value="6,0" />
    </Style>
    <Style x:Key="ComboBoxExtend" BasedOn="{StaticResource ComboBoxExtendBaseStyle}" TargetType="{x:Type ComboBox}" />
    <Style x:Key="ComboBoxExtend.Small" BasedOn="{StaticResource ComboBoxExtend}" TargetType="{x:Type ComboBox}">
        <Setter Property="hc:InfoElement.MinContentHeight" Value="20" />
        <Setter Property="hc:InfoElement.ContentHeight" Value="20" />
        <Setter Property="hc:TitleElement.MarginOnTheLeft" Value="0,3,6,3" />
        <Setter Property="Padding" Value="6,0" />
    </Style>
    <Style x:Key="{x:Type hc:ComboBox}" BasedOn="{StaticResource ComboBoxPlusBaseStyle}" TargetType="{x:Type hc:ComboBox}" />
    <Style x:Key="ComboBoxPlus.Small" BasedOn="{StaticResource ComboBoxPlusBaseStyle}" TargetType="{x:Type hc:ComboBox}">
        <Setter Property="hc:InfoElement.MinContentHeight" Value="20" />
        <Setter Property="hc:InfoElement.ContentHeight" Value="20" />
        <Setter Property="hc:TitleElement.MarginOnTheLeft" Value="0,3,6,3" />
        <Setter Property="Padding" Value="6,0" />
    </Style>
    <Style x:Key="{x:Type hc:WatermarkTextBox}" BasedOn="{StaticResource WatermarkTextBoxBaseStyle}" TargetType="{x:Type hc:WatermarkTextBox}" />
    <Style x:Key="{x:Type TextBox}" BasedOn="{StaticResource TextBoxBaseStyle}" TargetType="{x:Type TextBox}" />
    <Style x:Key="TextBox.Small" BasedOn="{StaticResource TextBoxBaseStyle}" TargetType="{x:Type TextBox}">
        <Setter Property="MinHeight" Value="20" />
        <Setter Property="Padding" Value="6,0" />
    </Style>
    <Style x:Key="TextBoxExtend" BasedOn="{StaticResource TextBoxExtendBaseStyle}" TargetType="{x:Type TextBox}" />
    <Style x:Key="TextBoxExtend.Small" BasedOn="{StaticResource TextBoxExtend}" TargetType="{x:Type TextBox}">
        <Setter Property="hc:InfoElement.MinContentHeight" Value="20" />
        <Setter Property="hc:InfoElement.ContentHeight" Value="20" />
        <Setter Property="hc:TitleElement.MarginOnTheLeft" Value="0,3,6,3" />
        <Setter Property="Padding" Value="6,0" />
    </Style>
    <Style x:Key="{x:Type hc:TextBox}" BasedOn="{StaticResource TextBoxPlusBaseStyle}" TargetType="{x:Type hc:TextBox}" />
    <Style x:Key="TextBoxPlus.Small" BasedOn="{StaticResource TextBoxPlusBaseStyle}" TargetType="{x:Type hc:TextBox}">
        <Setter Property="hc:InfoElement.MinContentHeight" Value="20" />
        <Setter Property="hc:InfoElement.ContentHeight" Value="20" />
        <Setter Property="hc:TitleElement.MarginOnTheLeft" Value="0,3,6,3" />
        <Setter Property="Padding" Value="6,0" />
    </Style>
    <Style x:Key="{x:Type MenuItem}" BasedOn="{StaticResource MenuItemBaseStyle}" TargetType="{x:Type MenuItem}" />
    <Style x:Key="{x:Type Menu}" BasedOn="{StaticResource MenuBaseStyle}" TargetType="{x:Type Menu}" />
    <ControlTemplate x:Key="BadgeTextTemplate" TargetType="{x:Type hc:Badge}">
        <ControlTemplate.Triggers>
            <EventTrigger RoutedEvent="hc:Badge.ValueChanged">
                <BeginStoryboard>
                    <Storyboard AutoReverse="True">
                        <DoubleAnimation TargetName="Border" TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleX)" BeginTime="0" Duration="0:0:.1" From="1" To="1.2" EasingFunction="{StaticResource SineEaseOut}" />
                        <DoubleAnimation TargetName="Border" TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleY)" BeginTime="0" Duration="0:0:.1" From="1" To="1.2" EasingFunction="{StaticResource SineEaseOut}" />
                    </Storyboard>
                </BeginStoryboard>
            </EventTrigger>
        </ControlTemplate.Triggers>
        <hc:SimplePanel>
            <ContentPresenter />
            <Border Name="Border" RenderTransformOrigin="0.5 0.5" Style="{StaticResource BorderCircular}" Margin="{TemplateBinding BadgeMargin}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Visibility="{TemplateBinding ShowBadge , Converter={StaticResource Boolean2VisibilityConverter}}" RenderTransform="{ScaleTransform}">
                <ContentPresenter ContentSource="Text" Margin="{TemplateBinding Padding}" />
            </Border>
        </hc:SimplePanel>
    </ControlTemplate>
    <ControlTemplate x:Key="BadgeProcessingTemplate" TargetType="{x:Type hc:Badge}">
        <hc:SimplePanel>
            <ContentPresenter />
            <Ellipse Height="10" Width="10" Fill="{TemplateBinding Background}" RenderTransformOrigin="0.5 0.5" Margin="{TemplateBinding BadgeMargin}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Visibility="{TemplateBinding ShowBadge , Converter={StaticResource Boolean2VisibilityConverter}}" RenderTransform="{ScaleTransform}">
                <Ellipse.OpacityMask>
                    <RadialGradientBrush>
                        <GradientStop Offset="0" Color="Transparent" />
                        <GradientStop Offset="1" Color="Black" />
                    </RadialGradientBrush>
                </Ellipse.OpacityMask>
                <Ellipse.Triggers>
                    <EventTrigger RoutedEvent="Loaded">
                        <BeginStoryboard>
                            <Storyboard RepeatBehavior="Forever" DesiredFrameRate="20">
                                <DoubleAnimation TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleX)" BeginTime="0" Duration="0:0:1" From="1" To="2" EasingFunction="{StaticResource SineEaseOut}" />
                                <DoubleAnimation TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleY)" BeginTime="0" Duration="0:0:1" From="1" To="2" EasingFunction="{StaticResource SineEaseOut}" />
                                <DoubleAnimation TargetProperty="Opacity" BeginTime="0" Duration="0:0:1" From="1" To="0" EasingFunction="{StaticResource SineEaseOut}" />
                            </Storyboard>
                        </BeginStoryboard>
                    </EventTrigger>
                </Ellipse.Triggers>
            </Ellipse>
            <Border Margin="{TemplateBinding BadgeMargin}" Width="10" Height="10" CornerRadius="5" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Visibility="{TemplateBinding ShowBadge , Converter={StaticResource Boolean2VisibilityConverter}}" />
        </hc:SimplePanel>
    </ControlTemplate>
    <Style x:Key="BadgeBaseStyle" TargetType="{x:Type hc:Badge}">
        <Style.Triggers>
            <Trigger Property="hc:Badge.Status" Value="Dot">
                <Setter Property="Template" Value="{StaticResource BadgeDotTemplate}" />
                <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
                <Setter Property="hc:Badge.BadgeMargin" Value="0,-5,-5,0" />
            </Trigger>
            <Trigger Property="hc:Badge.Status" Value="Processing">
                <Setter Property="Template" Value="{StaticResource BadgeProcessingTemplate}" />
                <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
                <Setter Property="hc:Badge.BadgeMargin" Value="0,-5,-5,0" />
            </Trigger>
        </Style.Triggers>
        <Setter Property="Focusable" Value="False" />
        <Setter Property="Background" Value="{DynamicResource SecondaryRegionBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource TextIconBrush}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="BorderBrush" Value="{DynamicResource RegionBrush}" />
        <Setter Property="Padding" Value="6,2" />
        <Setter Property="Template" Value="{StaticResource BadgeTextTemplate}" />
        <Setter Property="HorizontalContentAlignment" Value="Right" />
        <Setter Property="VerticalContentAlignment" Value="Top" />
        <Setter Property="hc:Badge.BadgeMargin" Value="0,-10,-10,0" />
    </Style>
    <Style x:Key="CardBaseStyle" BasedOn="{StaticResource BaseStyle}" TargetType="{x:Type hc:Card}">
        <Setter Property="Background" Value="{DynamicResource RegionBrush}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
        <Setter Property="Focusable" Value="False" />
        <Setter Property="hc:BorderElement.CornerRadius" Value="{StaticResource DefaultCornerRadius}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type hc:Card}">
                    <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}">
                        <Grid>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto" />
                                <RowDefinition />
                                <RowDefinition Height="Auto" />
                            </Grid.RowDefinitions>
                            <Border BorderThickness="0,0,0,1" BorderBrush="{TemplateBinding BorderBrush}" Visibility="{TemplateBinding Header , Converter={StaticResource Object2VisibilityConverter}}">
                                <ContentPresenter ContentSource="Header" ContentTemplate="{TemplateBinding HeaderTemplate}" ContentTemplateSelector="{TemplateBinding HeaderTemplateSelector}" ContentStringFormat="{TemplateBinding HeaderStringFormat}" />
                            </Border>
                            <ContentPresenter Grid.Row="1" />
                            <Border Grid.Row="2" BorderThickness="0,1,0,0" BorderBrush="{TemplateBinding BorderBrush}" Visibility="{TemplateBinding Footer , Converter={StaticResource Object2VisibilityConverter}}">
                                <ContentPresenter ContentSource="Footer" ContentTemplate="{TemplateBinding FooterTemplate}" ContentTemplateSelector="{TemplateBinding FooterTemplateSelector}" ContentStringFormat="{TemplateBinding FooterStringFormat}" />
                            </Border>
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <ControlTemplate x:Key="ChatBubbleStringBaseTemplate" TargetType="{x:Type hc:ChatBubble}">
        <ControlTemplate.Triggers>
            <Trigger Property="hc:ChatBubble.Role" Value="Receiver">
                <Setter TargetName="Tail" Property="HorizontalAlignment" Value="Left" />
                <Setter TargetName="Tail" Property="RenderTransform">
                    <Setter.Value>
                        <TransformGroup>
                            <ScaleTransform ScaleY="1" ScaleX="-1" />
                        </TransformGroup>
                    </Setter.Value>
                </Setter>
                <Setter TargetName="Body" Property="Margin" Value="3,0,0,0" />
            </Trigger>
        </ControlTemplate.Triggers>
        <hc:SimplePanel>
            <Path Name="Tail" Data="{StaticResource BubbleTailGeometry}" Fill="{TemplateBinding Background}" HorizontalAlignment="Right" Stretch="Uniform" VerticalAlignment="Bottom" Width="15" Height="15" RenderTransformOrigin="0.5,0.5" />
            <Border Name="Body" Background="{TemplateBinding Background}" CornerRadius="15" Margin="0,0,3,0">
                <TextBlock TextWrapping="Wrap" Text="{TemplateBinding Content}" VerticalAlignment="Center" Margin="{TemplateBinding Padding}" />
            </Border>
        </hc:SimplePanel>
    </ControlTemplate>
    <ControlTemplate x:Key="ChatBubbleImageBaseTemplate" TargetType="{x:Type hc:ChatBubble}">
        <ControlTemplate.Triggers>
            <Trigger Property="hc:ChatBubble.Role" Value="Receiver">
                <Setter TargetName="Tail" Property="HorizontalAlignment" Value="Left" />
                <Setter TargetName="Tail" Property="RenderTransform">
                    <Setter.Value>
                        <TransformGroup>
                            <ScaleTransform ScaleY="1" ScaleX="-1" />
                        </TransformGroup>
                    </Setter.Value>
                </Setter>
                <Setter TargetName="Body" Property="Margin" Value="3,0,0,0" />
            </Trigger>
        </ControlTemplate.Triggers>
        <hc:SimplePanel>
            <Path Name="Tail" Data="{StaticResource BubbleTailGeometry}" Fill="{TemplateBinding Background}" HorizontalAlignment="Right" Stretch="Uniform" VerticalAlignment="Bottom" Width="15" Height="15" RenderTransformOrigin="0.5,0.5" />
            <Border Name="Body" Background="{TemplateBinding Background}" CornerRadius="15" Margin="0,0,3,0">
                <hc:SimplePanel>
                    <Image Margin="{TemplateBinding Padding}" VerticalAlignment="Center" Source="{TemplateBinding Content}" />
                    <Border BorderThickness="{TemplateBinding Padding}" BorderBrush="{TemplateBinding Background}" CornerRadius="15" Background="{x:Null}" />
                </hc:SimplePanel>
            </Border>
        </hc:SimplePanel>
    </ControlTemplate>
    <ControlTemplate x:Key="ChatBubbleAudioBaseTemplate" TargetType="{x:Type hc:ChatBubble}">
        <ControlTemplate.Triggers>
            <Trigger Property="hc:ChatBubble.Role" Value="Receiver">
                <Setter TargetName="Tail" Property="HorizontalAlignment" Value="Left" />
                <Setter TargetName="Tail" Property="RenderTransform">
                    <Setter.Value>
                        <TransformGroup>
                            <ScaleTransform ScaleY="1" ScaleX="-1" />
                        </TransformGroup>
                    </Setter.Value>
                </Setter>
                <Setter TargetName="Tail" Property="Grid.Column" Value="0" />
                <Setter TargetName="Dot" Property="Grid.Column" Value="1" />
                <Setter TargetName="Dot" Property="Margin" Value="6,0,0,0" />
                <Setter TargetName="Body" Property="Margin" Value="3,0,0,0" />
                <Setter TargetName="Body" Property="Grid.Column" Value="0" />
                <Setter TargetName="Definition1" Property="Width" Value="Auto" />
                <Setter TargetName="Definition2" Property="Width" Value="12" />
                <Setter TargetName="Audio" Property="Grid.Column" Value="0" />
                <Setter TargetName="Audio" Property="Margin" Value="0,0,6,0" />
                <Setter TargetName="Audio" Property="RenderTransform">
                    <Setter.Value>
                        <TransformGroup>
                            <ScaleTransform ScaleY="1" ScaleX="1" />
                        </TransformGroup>
                    </Setter.Value>
                </Setter>
                <Setter TargetName="Presenter" Property="Grid.Column" Value="1" />
            </Trigger>
        </ControlTemplate.Triggers>
        <Grid>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Name="Definition1" Width="12" />
                <ColumnDefinition Name="Definition2" />
            </Grid.ColumnDefinitions>
            <Ellipse Name="Dot" VerticalAlignment="Top" Fill="{DynamicResource DangerBrush}" Width="6" Height="6" Margin="0,0,6,0" Visibility="{TemplateBinding IsRead , Converter={StaticResource Boolean2VisibilityReConverter}}" />
            <Path Name="Tail" Grid.Column="1" Data="{StaticResource BubbleTailGeometry}" Fill="{TemplateBinding Background}" HorizontalAlignment="Right" Stretch="Uniform" VerticalAlignment="Bottom" Width="15" Height="15" RenderTransformOrigin="0.5,0.5" />
            <Border Name="Body" Grid.Column="1" Background="{TemplateBinding Background}" CornerRadius="15" Margin="0,0,3,0">
                <Grid VerticalAlignment="Center" Margin="{TemplateBinding Padding}">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto" />
                        <ColumnDefinition Width="Auto" />
                    </Grid.ColumnDefinitions>
                    <ContentPresenter Name="Presenter" VerticalAlignment="Center" />
                    <Path Name="Audio" Grid.Column="1" Data="{StaticResource AudioGeometry}" Fill="{TemplateBinding Foreground}" Width="16" Height="16" Margin="6,0,0,0" RenderTransformOrigin="0.5,0.5">
                        <Path.RenderTransform>
                            <TransformGroup>
                                <ScaleTransform ScaleY="1" ScaleX="-1" />
                            </TransformGroup>
                        </Path.RenderTransform>
                    </Path>
                </Grid>
            </Border>
        </Grid>
    </ControlTemplate>
    <ControlTemplate x:Key="ChatBubbleCustomBaseTemplate" TargetType="{x:Type hc:ChatBubble}">
        <ControlTemplate.Triggers>
            <Trigger Property="hc:ChatBubble.Role" Value="Receiver">
                <Setter TargetName="Tail" Property="HorizontalAlignment" Value="Left" />
                <Setter TargetName="Tail" Property="RenderTransform">
                    <Setter.Value>
                        <TransformGroup>
                            <ScaleTransform ScaleY="1" ScaleX="-1" />
                        </TransformGroup>
                    </Setter.Value>
                </Setter>
                <Setter TargetName="Body" Property="Margin" Value="3,0,0,0" />
            </Trigger>
        </ControlTemplate.Triggers>
        <hc:SimplePanel>
            <Path Name="Tail" Data="{StaticResource BubbleTailGeometry}" Fill="{TemplateBinding Background}" HorizontalAlignment="Right" Stretch="Uniform" VerticalAlignment="Bottom" Width="15" Height="15" RenderTransformOrigin="0.5,0.5" />
            <Border Name="Body" Background="{TemplateBinding Background}" CornerRadius="15" Margin="0,0,3,0">
                <ContentPresenter VerticalAlignment="Center" Margin="{TemplateBinding Padding}" />
            </Border>
        </hc:SimplePanel>
    </ControlTemplate>
    <Style x:Key="ChatBubbleBaseStyle" TargetType="{x:Type hc:ChatBubble}">
        <Style.Triggers>
            <Trigger Property="hc:ChatBubble.Role" Value="Receiver">
                <Setter Property="Background" Value="{DynamicResource BorderBrush}" />
                <Setter Property="Foreground" Value="{DynamicResource PrimaryTextBrush}" />
                <Setter Property="HorizontalAlignment" Value="Left" />
            </Trigger>
            <Trigger Property="hc:ChatBubble.Type" Value="Image">
                <Setter Property="Template" Value="{StaticResource ChatBubbleImageBaseTemplate}" />
                <Setter Property="MaxHeight" Value="280" />
            </Trigger>
            <Trigger Property="hc:ChatBubble.Type" Value="Audio">
                <Setter Property="Template" Value="{StaticResource ChatBubbleAudioBaseTemplate}" />
            </Trigger>
            <Trigger Property="hc:ChatBubble.Type" Value="Custom">
                <Setter Property="Template" Value="{StaticResource ChatBubbleCustomBaseTemplate}" />
            </Trigger>
        </Style.Triggers>
        <Setter Property="Focusable" Value="False" />
        <Setter Property="HorizontalAlignment" Value="Right" />
        <Setter Property="Background" Value="{DynamicResource DarkPrimaryBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource TextIconBrush}" />
        <Setter Property="Padding" Value="10" />
        <Setter Property="Margin" Value="10" />
        <Setter Property="MinHeight" Value="{StaticResource DefaultControlHeight}" />
        <Setter Property="Template" Value="{StaticResource ChatBubbleStringBaseTemplate}" />
        <Setter Property="hc:ChatBubble.IsRead" Value="{Binding IsSelected , RelativeSource={RelativeSource Self}}" />
        <Setter Property="MaxWidth" Value="280" />
    </Style>
    <Style x:Key="Tag4CheckComboBoxStyle" BasedOn="{StaticResource TagBaseStyle}" TargetType="{x:Type hc:Tag}">
        <Setter Property="Padding" Value="6,3,4,3" />
        <Setter Property="Height" Value="Auto" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type hc:Tag}">
                    <ControlTemplate.Triggers>
                        <Trigger SourceName="ButtonClose" Property="UIElement.IsMouseOver" Value="True">
                            <Setter Value="{StaticResource DeleteFillCircleGeometry}" TargetName="ButtonClose" Property="hc:IconElement.Geometry" />
                            <Setter TargetName="ButtonClose" Property="Padding" Value="0" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                    <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="true" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition />
                                <ColumnDefinition Width="Auto" />
                            </Grid.ColumnDefinitions>
                            <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                            <Button Name="ButtonClose" Focusable="False" Command="interactivity:ControlCommands.Close" Margin="10,0,0,0" Width="16" Height="16" Padding="0,4" Grid.Column="1" Style="{StaticResource ButtonIcon}" Geometry="{StaticResource CloseGeometry}" Foreground="{TemplateBinding Foreground}" Visibility="{TemplateBinding ShowCloseButton , Converter={StaticResource Boolean2VisibilityConverter}}" />
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="CheckComboBoxToggleButton" BasedOn="{StaticResource ComboBoxToggleButton}" TargetType="{x:Type ToggleButton}">
        <Setter Property="ButtonBase.ClickMode" Value="Release" />
    </Style>
    <Style x:Key="CheckComboBoxWatermarkToggleButton" BasedOn="{StaticResource ComboBoxWatermarkToggleButton}" TargetType="{x:Type ToggleButton}">
        <Setter Property="ButtonBase.ClickMode" Value="Release" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <ControlTemplate.Triggers>
                        <Trigger Property="ToggleButton.IsChecked" Value="True">
                            <Setter TargetName="arrow" Value="{StaticResource UpGeometry}" Property="Data" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="UIElement.Opacity" Value=".4" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition />
                            <ColumnDefinition Width="30" />
                        </Grid.ColumnDefinitions>
                        <Border Grid.ColumnSpan="2" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="true" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}" />
                        <Path Name="arrow" Grid.Column="1" Data="{StaticResource DownGeometry}" Stretch="Uniform" Fill="{TemplateBinding BorderBrush}" HorizontalAlignment="Center" Width="16" VerticalAlignment="Center" />
                        <Border Margin="1" Grid.Column="0" Visibility="{Binding SelectedItem , RelativeSource={RelativeSource AncestorType=hc:CheckComboBox}, Converter={StaticResource Object2VisibilityReConverter}}">
                            <ContentPresenter Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                        </Border>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="CheckComboBoxItemBaseStyle" TargetType="{x:Type hc:CheckComboBoxItem}">
        <Setter Property="UIElement.SnapsToDevicePixels" Value="True" />
        <Setter Property="Padding" Value="{StaticResource DefaultControlPadding}" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="MinHeight" Value="{StaticResource DefaultControlHeight}" />
        <Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type hc:CheckComboBoxItem}">
                    <ControlTemplate.Triggers>
                        <Trigger Property="UIElement.IsMouseOver" Value="True">
                            <Setter TargetName="Bd" Value="{DynamicResource SecondaryRegionBrush}" Property="Background" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                    <Border Name="Bd" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="true" Padding="{Binding Padding , RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource ThicknessSplitConverter}, ConverterParameter=1,0,1,0}">
                        <CheckBox Foreground="{TemplateBinding Foreground}" HorizontalAlignment="Stretch" MinHeight="{TemplateBinding MinHeight}" FocusVisualStyle="{x:Null}" IsChecked="{Binding IsSelected , RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay}">
                            <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                        </CheckBox>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <ControlTemplate x:Key="CheckComboBoxTemplate" TargetType="{x:Type hc:CheckComboBox}">
        <ControlTemplate.Triggers>
            <Trigger Property="ItemsControl.HasItems" Value="false">
                <Setter TargetName="dropDownBorder" Property="Height" Value="95" />
            </Trigger>
            <Trigger Property="hc:DropDownElement.ConsistentWidth" Value="True">
                <Setter TargetName="dropDownBorder" Value="{Binding ActualWidth , ElementName=toggleButton}" Property="MaxWidth" />
                <Setter TargetName="dropDownBorder" Value="{Binding ActualWidth , ElementName=toggleButton}" Property="MinWidth" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="ItemsControl.IsGrouping" Value="true" />
                    <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false" />
                </MultiTrigger.Conditions>
                <Setter Property="ScrollViewer.CanContentScroll" Value="false" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition SourceName="toggleButton" Property="UIElement.IsMouseOver" Value="true" />
                    <Condition SourceName="PART_Popup" Property="IsOpen" Value="false" />
                </MultiTrigger.Conditions>
                <Setter Value="{DynamicResource SecondaryBorderBrush}" Property="BorderBrush" />
            </MultiTrigger>
            <Trigger SourceName="PART_Popup" Property="IsOpen" Value="True">
                <Setter Value="{DynamicResource PrimaryBrush}" Property="BorderBrush" />
            </Trigger>
            <Trigger Property="UIElement.IsFocused" Value="True">
                <Setter Value="{DynamicResource PrimaryBrush}" Property="BorderBrush" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter TargetName="toggleButton" Property="UIElement.Opacity" Value="0.4" />
                <Setter TargetName="PART_Panel" Property="UIElement.Opacity" Value="0.4" />
            </Trigger>
        </ControlTemplate.Triggers>
        <Grid Name="templateRoot" SnapsToDevicePixels="true">
            <Grid.ColumnDefinitions>
                <ColumnDefinition />
                <ColumnDefinition Width="30" />
            </Grid.ColumnDefinitions>
            <Popup Name="PART_Popup" StaysOpen="False" AllowsTransparency="true" Grid.ColumnSpan="2" PopupAnimation="{StaticResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}" Placement="Bottom" PlacementTarget="{Binding ElementName=toggleButton}" IsOpen="{Binding IsDropDownOpen , RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay}">
                <Decorator Margin="8 0">
                    <Border Name="dropDownBorder" Effect="{StaticResource EffectShadow2}" BorderThickness="0,1,0,0" Margin="0,0,0,8" MaxHeight="{TemplateBinding MaxDropDownHeight}" BorderBrush="{DynamicResource BorderBrush}" Background="{DynamicResource RegionBrush}" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}">
                        <hc:ToggleBlock VerticalContentAlignment="Stretch" HorizontalContentAlignment="Stretch" IsChecked="{Binding HasItems , RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}" UnCheckedContent="{hc:Empty}">
                            <hc:ToggleBlock.CheckedContent>
                                <Grid Margin="0,4" ClipToBounds="False">
                                    <Grid.RowDefinitions>
                                        <RowDefinition Height="Auto" />
                                        <RowDefinition />
                                    </Grid.RowDefinitions>
                                    <hc:CheckComboBoxItem Name="PART_SelectAll" Style="{TemplateBinding ItemContainerStyle}" IsEnabled="{TemplateBinding ShowSelectAllButton}" HorizontalContentAlignment="Stretch" Visibility="{Binding ShowSelectAllButton , RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource Boolean2VisibilityConverter}}" Content="{ex:Lang Key={x:Static langs:LangKeys.All}}" />
                                    <ScrollViewer Name="DropDownScrollViewer" Grid.Row="1">
                                        <ItemsPresenter Name="ItemsPresenter" DirectionalNavigation="Contained" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                                    </ScrollViewer>
                                </Grid>
                            </hc:ToggleBlock.CheckedContent>
                        </hc:ToggleBlock>
                    </Border>
                </Decorator>
            </Popup>
            <ToggleButton Name="toggleButton" Grid.Column="0" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Grid.ColumnSpan="2" Style="{StaticResource CheckComboBoxToggleButton}" IsChecked="{Binding IsDropDownOpen , RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay}" />
            <Border Grid.Column="0" Margin="-1,1">
                <hc:UniformSpacingPanel Name="PART_Panel" Margin="{TemplateBinding Padding}" Spacing="4" ChildWrapping="Wrap" ItemVerticalAlignment="Center" />
            </Border>
        </Grid>
    </ControlTemplate>
    <Style x:Key="CheckComboBoxBaseStyle" TargetType="{x:Type hc:CheckComboBox}">
        <Setter Property="hc:CheckComboBox.TagStyle" Value="{StaticResource Tag4CheckComboBoxStyle}" />
        <Setter Property="ListBox.SelectionMode" Value="Multiple" />
        <Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="Background" Value="{DynamicResource RegionBrush}" />
        <Setter Property="ItemContainerStyle" Value="{StaticResource CheckComboBoxItemBaseStyle}" />
        <Setter Property="hc:BorderElement.CornerRadius" Value="{StaticResource DefaultCornerRadius}" />
        <Setter Property="hc:TitleElement.MarginOnTheLeft" Value="0,8,6,8" />
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource PrimaryTextBrush}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
        <Setter Property="MinHeight" Value="{StaticResource DefaultControlHeight}" />
        <Setter Property="ScrollViewer.CanContentScroll" Value="true" />
        <Setter Property="ScrollViewer.PanningMode" Value="Both" />
        <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
        <Setter Property="Padding" Value="6,3" />
        <Setter Property="Template" Value="{StaticResource CheckComboBoxTemplate}" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Validation.ErrorTemplate" Value="{x:Null}" />
    </Style>
    <ControlTemplate x:Key="CheckComboBoxExtendTopTemplate" TargetType="{x:Type hc:CheckComboBox}">
        <ControlTemplate.Triggers>
            <Trigger Property="ItemsControl.HasItems" Value="false">
                <Setter TargetName="dropDownBorder" Property="Height" Value="95" />
            </Trigger>
            <Trigger Property="hc:DropDownElement.ConsistentWidth" Value="True">
                <Setter TargetName="dropDownBorder" Value="{Binding ActualWidth , ElementName=toggleButton}" Property="MaxWidth" />
                <Setter TargetName="dropDownBorder" Value="{Binding ActualWidth , ElementName=toggleButton}" Property="MinWidth" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="ItemsControl.IsGrouping" Value="true" />
                    <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false" />
                </MultiTrigger.Conditions>
                <Setter Property="ScrollViewer.CanContentScroll" Value="false" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition SourceName="toggleButton" Property="UIElement.IsMouseOver" Value="true" />
                    <Condition SourceName="PART_Popup" Property="IsOpen" Value="false" />
                </MultiTrigger.Conditions>
                <Setter Value="{DynamicResource SecondaryBorderBrush}" Property="BorderBrush" />
            </MultiTrigger>
            <Trigger SourceName="PART_Popup" Property="IsOpen" Value="True">
                <Setter Value="{DynamicResource PrimaryBrush}" Property="BorderBrush" />
            </Trigger>
            <Trigger Property="UIElement.IsFocused" Value="True">
                <Setter Value="{DynamicResource PrimaryBrush}" Property="BorderBrush" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter TargetName="toggleButton" Property="UIElement.Opacity" Value="0.4" />
                <Setter TargetName="PART_Panel" Property="UIElement.Opacity" Value="0.4" />
            </Trigger>
        </ControlTemplate.Triggers>
        <Grid>
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition MinHeight="{Binding Path=(hc:InfoElement.MinContentHeight), RelativeSource={RelativeSource TemplatedParent}}" Height="{Binding Path=(hc:InfoElement.ContentHeight), RelativeSource={RelativeSource TemplatedParent}}" />
            </Grid.RowDefinitions>
            <Grid.ColumnDefinitions>
                <ColumnDefinition />
                <ColumnDefinition Width="30" />
            </Grid.ColumnDefinitions>
            <DockPanel Grid.ColumnSpan="2" LastChildFill="True" Margin="{TemplateBinding Padding}" Visibility="{Binding Path=(hc:InfoElement.Title), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource String2VisibilityConverter}}" HorizontalAlignment="{Binding Path=(hc:TitleElement.HorizontalAlignment), RelativeSource={RelativeSource TemplatedParent}}">
                <ContentPresenter DockPanel.Dock="Right" Foreground="{DynamicResource DangerBrush}" Margin="4,0,0,0" Content="{Binding Path=(hc:InfoElement.Symbol), RelativeSource={RelativeSource TemplatedParent}}" Visibility="{Binding Path=(hc:InfoElement.Necessary), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource Boolean2VisibilityConverter}}" />
                <TextBlock AutoTooltip="True" TextWrapping="NoWrap" TextTrimming="CharacterEllipsis" Margin="1,0,1,0" Text="{Binding Path=(hc:InfoElement.Title), RelativeSource={RelativeSource TemplatedParent}}" />
            </DockPanel>
            <Popup Name="PART_Popup" Grid.Row="1" Grid.Column="0" AllowsTransparency="true" Grid.ColumnSpan="2" StaysOpen="False" Margin="1" PopupAnimation="{StaticResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}" Placement="Bottom" PlacementTarget="{Binding ElementName=toggleButton}" IsOpen="{Binding IsDropDownOpen , RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay}">
                <Decorator Margin="8 0">
                    <Border Name="dropDownBorder" Effect="{StaticResource EffectShadow2}" BorderThickness="0,1,0,0" Margin="0,0,0,8" MaxHeight="{TemplateBinding MaxDropDownHeight}" BorderBrush="{DynamicResource BorderBrush}" Background="{DynamicResource RegionBrush}" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}">
                        <hc:ToggleBlock VerticalContentAlignment="Stretch" HorizontalContentAlignment="Stretch" IsChecked="{Binding HasItems , RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}" UnCheckedContent="{hc:Empty}">
                            <hc:ToggleBlock.CheckedContent>
                                <Grid Margin="0,4" ClipToBounds="False">
                                    <Grid.RowDefinitions>
                                        <RowDefinition Height="Auto" />
                                        <RowDefinition />
                                    </Grid.RowDefinitions>
                                    <hc:CheckComboBoxItem Name="PART_SelectAll" Style="{TemplateBinding ItemContainerStyle}" IsEnabled="{TemplateBinding ShowSelectAllButton}" HorizontalContentAlignment="Stretch" Visibility="{Binding ShowSelectAllButton , RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource Boolean2VisibilityConverter}}" Content="{ex:Lang Key={x:Static langs:LangKeys.All}}" />
                                    <ScrollViewer Name="DropDownScrollViewer" Grid.Row="1">
                                        <ItemsPresenter Name="ItemsPresenter" DirectionalNavigation="Contained" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                                    </ScrollViewer>
                                </Grid>
                            </hc:ToggleBlock.CheckedContent>
                        </hc:ToggleBlock>
                    </Border>
                </Decorator>
            </Popup>
            <ToggleButton Name="toggleButton" Grid.Row="1" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" Padding="{TemplateBinding Padding}" Grid.Column="0" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Grid.ColumnSpan="2" Style="{StaticResource CheckComboBoxWatermarkToggleButton}" Content="{Binding Path=(hc:InfoElement.Placeholder), RelativeSource={RelativeSource TemplatedParent}}" IsChecked="{Binding IsDropDownOpen , Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" />
            <Border Grid.Row="1" Grid.Column="0" Margin="-1,1">
                <hc:UniformSpacingPanel Name="PART_Panel" Margin="{TemplateBinding Padding}" Spacing="4" ChildWrapping="Wrap" ItemVerticalAlignment="Center" />
            </Border>
        </Grid>
    </ControlTemplate>
    <ControlTemplate x:Key="CheckComboBoxExtendLeftTemplate" TargetType="{x:Type hc:CheckComboBox}">
        <ControlTemplate.Triggers>
            <Trigger Property="ItemsControl.HasItems" Value="false">
                <Setter TargetName="dropDownBorder" Property="Height" Value="95" />
            </Trigger>
            <Trigger Property="hc:DropDownElement.ConsistentWidth" Value="True">
                <Setter TargetName="dropDownBorder" Value="{Binding ActualWidth , ElementName=toggleButton}" Property="MaxWidth" />
                <Setter TargetName="dropDownBorder" Value="{Binding ActualWidth , ElementName=toggleButton}" Property="MinWidth" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="ItemsControl.IsGrouping" Value="true" />
                    <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false" />
                </MultiTrigger.Conditions>
                <Setter Property="ScrollViewer.CanContentScroll" Value="false" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition SourceName="toggleButton" Property="UIElement.IsMouseOver" Value="true" />
                    <Condition SourceName="PART_Popup" Property="IsOpen" Value="false" />
                </MultiTrigger.Conditions>
                <Setter Value="{DynamicResource SecondaryBorderBrush}" Property="BorderBrush" />
            </MultiTrigger>
            <Trigger SourceName="PART_Popup" Property="IsOpen" Value="True">
                <Setter Value="{DynamicResource PrimaryBrush}" Property="BorderBrush" />
            </Trigger>
            <Trigger Property="UIElement.IsFocused" Value="True">
                <Setter Value="{DynamicResource PrimaryBrush}" Property="BorderBrush" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter TargetName="toggleButton" Property="UIElement.Opacity" Value="0.4" />
                <Setter TargetName="PART_Panel" Property="UIElement.Opacity" Value="0.4" />
            </Trigger>
        </ControlTemplate.Triggers>
        <Grid Name="templateRoot" SnapsToDevicePixels="true" MinHeight="{Binding Path=(hc:InfoElement.MinContentHeight), RelativeSource={RelativeSource TemplatedParent}}" Height="{Binding Path=(hc:InfoElement.ContentHeight), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource Double2GridLengthConverter}}">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="{Binding Path=(hc:InfoElement.TitleWidth), RelativeSource={RelativeSource TemplatedParent}}" />
                <ColumnDefinition />
                <ColumnDefinition Width="30" />
            </Grid.ColumnDefinitions>
            <DockPanel LastChildFill="True" Visibility="{Binding Path=(hc:InfoElement.Title), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource String2VisibilityConverter}}" HorizontalAlignment="{Binding Path=(hc:TitleElement.HorizontalAlignment), RelativeSource={RelativeSource TemplatedParent}}" VerticalAlignment="{Binding Path=(hc:TitleElement.VerticalAlignment), RelativeSource={RelativeSource TemplatedParent}}" Margin="{Binding Path=(hc:TitleElement.MarginOnTheLeft), RelativeSource={RelativeSource TemplatedParent}}">
                <ContentPresenter DockPanel.Dock="Right" Foreground="{DynamicResource DangerBrush}" Margin="4,0,0,0" Content="{Binding Path=(hc:InfoElement.Symbol), RelativeSource={RelativeSource TemplatedParent}}" Visibility="{Binding Path=(hc:InfoElement.Necessary), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource Boolean2VisibilityConverter}}" />
                <TextBlock AutoTooltip="True" TextWrapping="NoWrap" TextTrimming="CharacterEllipsis" Text="{Binding Path=(hc:InfoElement.Title), RelativeSource={RelativeSource TemplatedParent}}" />
            </DockPanel>
            <Popup Name="PART_Popup" Grid.Column="1" AllowsTransparency="true" Grid.ColumnSpan="2" StaysOpen="False" Margin="1" PopupAnimation="{StaticResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}" Placement="Bottom" PlacementTarget="{Binding ElementName=toggleButton}" IsOpen="{Binding IsDropDownOpen , Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}">
                <Decorator Margin="8 0">
                    <Border Name="dropDownBorder" Effect="{StaticResource EffectShadow2}" BorderThickness="0,1,0,0" Margin="0,0,0,8" MaxHeight="{TemplateBinding MaxDropDownHeight}" BorderBrush="{DynamicResource BorderBrush}" Background="{DynamicResource RegionBrush}" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}">
                        <hc:ToggleBlock VerticalContentAlignment="Stretch" HorizontalContentAlignment="Stretch" IsChecked="{Binding HasItems , RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}" UnCheckedContent="{hc:Empty}">
                            <hc:ToggleBlock.CheckedContent>
                                <Grid Margin="0,4" ClipToBounds="False">
                                    <Grid.RowDefinitions>
                                        <RowDefinition Height="Auto" />
                                        <RowDefinition />
                                    </Grid.RowDefinitions>
                                    <hc:CheckComboBoxItem Name="PART_SelectAll" Style="{TemplateBinding ItemContainerStyle}" IsEnabled="{TemplateBinding ShowSelectAllButton}" HorizontalContentAlignment="Stretch" Visibility="{Binding ShowSelectAllButton , RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource Boolean2VisibilityConverter}}" Content="{ex:Lang Key={x:Static langs:LangKeys.All}}" />
                                    <ScrollViewer Name="DropDownScrollViewer" Grid.Row="1">
                                        <ItemsPresenter Name="ItemsPresenter" DirectionalNavigation="Contained" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                                    </ScrollViewer>
                                </Grid>
                            </hc:ToggleBlock.CheckedContent>
                        </hc:ToggleBlock>
                    </Border>
                </Decorator>
            </Popup>
            <ToggleButton Name="toggleButton" Grid.Column="1" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" Padding="{TemplateBinding Padding}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Grid.ColumnSpan="2" Style="{StaticResource CheckComboBoxWatermarkToggleButton}" Content="{Binding Path=(hc:InfoElement.Placeholder), RelativeSource={RelativeSource TemplatedParent}}" IsChecked="{Binding IsDropDownOpen , Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" />
            <Border Grid.Column="1" Margin="-1,1">
                <hc:UniformSpacingPanel Name="PART_Panel" Margin="{TemplateBinding Padding}" Spacing="4" ChildWrapping="Wrap" ItemVerticalAlignment="Center" />
            </Border>
        </Grid>
    </ControlTemplate>
    <Style x:Key="CheckComboBoxExtendBaseStyle" BasedOn="{StaticResource CheckComboBoxBaseStyle}" TargetType="{x:Type hc:CheckComboBox}">
        <Style.Triggers>
            <Trigger Property="hc:TitleElement.TitlePlacement" Value="Left">
                <Setter Property="Template" Value="{StaticResource CheckComboBoxExtendLeftTemplate}" />
            </Trigger>
        </Style.Triggers>
        <Setter Property="Height" Value="Auto" />
        <Setter Property="Template" Value="{StaticResource CheckComboBoxExtendTopTemplate}" />
        <Setter Property="hc:InfoElement.Symbol" Value="●" />
        <Setter Property="hc:InfoElement.ContentHeight" Value="{x:Static system:Double.NaN}" />
        <Setter Property="hc:InfoElement.MinContentHeight" Value="{StaticResource DefaultControlHeight}" />
    </Style>
    <ControlTemplate x:Key="CheckComboBoxPlusTopTemplate" TargetType="{x:Type hc:CheckComboBox}">
        <ControlTemplate.Resources>
            <Storyboard Name="StoryboardShow">
                <ThicknessAnimation TargetName="TextBlockError" TargetProperty="Margin" To="9,0,0,-18" Duration="0:0:.2" />
            </Storyboard>
            <Storyboard Name="StoryboardHidden">
                <ThicknessAnimation TargetName="TextBlockError" TargetProperty="Margin" To="9,0,0,4" Duration="0:0:0" />
            </Storyboard>
        </ControlTemplate.Resources>
        <ControlTemplate.Triggers>
            <Trigger Property="ItemsControl.HasItems" Value="false">
                <Setter TargetName="dropDownBorder" Property="Height" Value="95" />
            </Trigger>
            <Trigger Property="hc:DropDownElement.ConsistentWidth" Value="True">
                <Setter TargetName="dropDownBorder" Value="{Binding ActualWidth , ElementName=toggleButton}" Property="MaxWidth" />
                <Setter TargetName="dropDownBorder" Value="{Binding ActualWidth , ElementName=toggleButton}" Property="MinWidth" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="ItemsControl.IsGrouping" Value="true" />
                    <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false" />
                </MultiTrigger.Conditions>
                <Setter Property="ScrollViewer.CanContentScroll" Value="false" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition SourceName="toggleButton" Property="UIElement.IsMouseOver" Value="true" />
                    <Condition SourceName="PART_Popup" Property="IsOpen" Value="false" />
                </MultiTrigger.Conditions>
                <Setter Value="{DynamicResource SecondaryBorderBrush}" Property="BorderBrush" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition SourceName="ButtonClear" Property="UIElement.IsMouseOver" Value="true" />
                    <Condition SourceName="PART_Popup" Property="IsOpen" Value="false" />
                </MultiTrigger.Conditions>
                <Setter Value="{DynamicResource SecondaryBorderBrush}" Property="BorderBrush" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition SourceName="toggleButton" Property="UIElement.IsMouseOver" Value="true" />
                    <Condition Property="hc:CheckComboBox.ShowClearButton" Value="True" />
                </MultiTrigger.Conditions>
                <Setter TargetName="ButtonClear" Property="Visibility" Value="Visible" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition SourceName="ButtonClear" Property="UIElement.IsMouseOver" Value="true" />
                    <Condition Property="hc:CheckComboBox.ShowClearButton" Value="True" />
                </MultiTrigger.Conditions>
                <Setter TargetName="ButtonClear" Property="Visibility" Value="Visible" />
            </MultiTrigger>
            <Trigger SourceName="PART_Popup" Property="IsOpen" Value="True">
                <Setter Value="{DynamicResource PrimaryBrush}" Property="BorderBrush" />
            </Trigger>
            <Trigger Property="UIElement.IsFocused" Value="True">
                <Setter Value="{DynamicResource PrimaryBrush}" Property="BorderBrush" />
            </Trigger>
            <Trigger Property="hc:CheckComboBox.IsError" Value="true">
                <Trigger.EnterActions>
                    <BeginStoryboard Storyboard="{StaticResource StoryboardShow}" />
                </Trigger.EnterActions>
                <Trigger.ExitActions>
                    <BeginStoryboard Storyboard="{StaticResource StoryboardHidden}" />
                </Trigger.ExitActions>
                <Setter Value="{DynamicResource DangerBrush}" Property="BorderBrush" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter TargetName="toggleButton" Property="UIElement.Opacity" Value="0.4" />
                <Setter TargetName="PART_Panel" Property="UIElement.Opacity" Value="0.4" />
            </Trigger>
        </ControlTemplate.Triggers>
        <Grid>
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition MinHeight="{Binding Path=(hc:InfoElement.MinContentHeight), RelativeSource={RelativeSource TemplatedParent}}" Height="{Binding Path=(hc:InfoElement.ContentHeight), RelativeSource={RelativeSource TemplatedParent}}" />
            </Grid.RowDefinitions>
            <Grid.ColumnDefinitions>
                <ColumnDefinition />
                <ColumnDefinition Width="Auto" MinWidth="30" />
            </Grid.ColumnDefinitions>
            <DockPanel Grid.ColumnSpan="2" LastChildFill="True" Margin="{TemplateBinding Padding}" Visibility="{Binding Path=(hc:InfoElement.Title), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource String2VisibilityConverter}}" HorizontalAlignment="{Binding Path=(hc:TitleElement.HorizontalAlignment), RelativeSource={RelativeSource TemplatedParent}}">
                <ContentPresenter DockPanel.Dock="Right" Foreground="{DynamicResource DangerBrush}" Margin="4,0,0,0" Content="{Binding Path=(hc:InfoElement.Symbol), RelativeSource={RelativeSource TemplatedParent}}" Visibility="{Binding Path=(hc:InfoElement.Necessary), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource Boolean2VisibilityConverter}}" />
                <TextBlock AutoTooltip="True" TextWrapping="NoWrap" TextTrimming="CharacterEllipsis" Margin="1,0,1,0" Text="{Binding Path=(hc:InfoElement.Title), RelativeSource={RelativeSource TemplatedParent}}" />
            </DockPanel>
            <Popup Name="PART_Popup" Grid.Row="1" Grid.Column="0" AllowsTransparency="true" Grid.ColumnSpan="2" StaysOpen="False" Margin="1" PopupAnimation="{StaticResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}" Placement="Bottom" PlacementTarget="{Binding ElementName=toggleButton}" IsOpen="{Binding IsDropDownOpen , Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}">
                <Decorator Margin="8 0">
                    <Border Name="dropDownBorder" Effect="{StaticResource EffectShadow2}" BorderThickness="0,1,0,0" Margin="0,0,0,8" MaxHeight="{TemplateBinding MaxDropDownHeight}" BorderBrush="{DynamicResource BorderBrush}" Background="{DynamicResource RegionBrush}" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}">
                        <hc:ToggleBlock VerticalContentAlignment="Stretch" HorizontalContentAlignment="Stretch" IsChecked="{Binding HasItems , RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}" UnCheckedContent="{hc:Empty}">
                            <hc:ToggleBlock.CheckedContent>
                                <Grid Margin="0,4" ClipToBounds="False">
                                    <Grid.RowDefinitions>
                                        <RowDefinition Height="Auto" />
                                        <RowDefinition />
                                    </Grid.RowDefinitions>
                                    <hc:CheckComboBoxItem Name="PART_SelectAll" Style="{TemplateBinding ItemContainerStyle}" IsEnabled="{TemplateBinding ShowSelectAllButton}" HorizontalContentAlignment="Stretch" Visibility="{Binding ShowSelectAllButton , RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource Boolean2VisibilityConverter}}" Content="{ex:Lang Key={x:Static langs:LangKeys.All}}" />
                                    <ScrollViewer Name="DropDownScrollViewer" Grid.Row="1">
                                        <ItemsPresenter Name="ItemsPresenter" DirectionalNavigation="Contained" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                                    </ScrollViewer>
                                </Grid>
                            </hc:ToggleBlock.CheckedContent>
                        </hc:ToggleBlock>
                    </Border>
                </Decorator>
            </Popup>
            <TextBlock Name="TextBlockError" Grid.Column="0" Grid.ColumnSpan="2" TextBlock.FontSize="12" Text="{TemplateBinding ErrorStr}" VerticalAlignment="Bottom" Margin="9,0,0,4" Foreground="{DynamicResource DangerBrush}" Grid.Row="1" />
            <ToggleButton Name="toggleButton" Grid.Row="1" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" Padding="{TemplateBinding Padding}" Grid.Column="0" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Grid.ColumnSpan="2" Style="{StaticResource CheckComboBoxWatermarkToggleButton}" Content="{Binding Path=(hc:InfoElement.Placeholder), RelativeSource={RelativeSource TemplatedParent}}" IsChecked="{Binding IsDropDownOpen , Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" />
            <Border Grid.Row="1" Grid.Column="0" Margin="-1,1">
                <hc:UniformSpacingPanel Name="PART_Panel" Margin="{TemplateBinding Padding}" Spacing="4" ChildWrapping="Wrap" ItemVerticalAlignment="Center" />
            </Border>
            <Button Name="ButtonClear" Height="{x:Static system:Double.NaN}" Grid.Row="1" Command="interactivity:ControlCommands.Clear" Margin="0,0,26,0" Visibility="Collapsed" Width="16" Grid.Column="1" Style="{StaticResource ButtonIcon}" Padding="0" Geometry="{StaticResource DeleteFillCircleGeometry}" Foreground="{TemplateBinding BorderBrush}" />
        </Grid>
    </ControlTemplate>
    <ControlTemplate x:Key="CheckComboBoxPlusLeftTemplate" TargetType="{x:Type hc:CheckComboBox}">
        <ControlTemplate.Resources>
            <Storyboard Name="StoryboardShow">
                <ThicknessAnimation TargetName="TextBlockError" TargetProperty="Margin" To="9,0,0,-18" Duration="0:0:.2" />
            </Storyboard>
            <Storyboard Name="StoryboardHidden">
                <ThicknessAnimation TargetName="TextBlockError" TargetProperty="Margin" To="9,0,0,4" Duration="0:0:0" />
            </Storyboard>
        </ControlTemplate.Resources>
        <ControlTemplate.Triggers>
            <Trigger Property="ItemsControl.HasItems" Value="false">
                <Setter TargetName="dropDownBorder" Property="Height" Value="95" />
            </Trigger>
            <Trigger Property="hc:DropDownElement.ConsistentWidth" Value="True">
                <Setter TargetName="dropDownBorder" Value="{Binding ActualWidth , ElementName=toggleButton}" Property="MaxWidth" />
                <Setter TargetName="dropDownBorder" Value="{Binding ActualWidth , ElementName=toggleButton}" Property="MinWidth" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="ItemsControl.IsGrouping" Value="true" />
                    <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false" />
                </MultiTrigger.Conditions>
                <Setter Property="ScrollViewer.CanContentScroll" Value="false" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition SourceName="toggleButton" Property="UIElement.IsMouseOver" Value="true" />
                    <Condition SourceName="PART_Popup" Property="IsOpen" Value="false" />
                </MultiTrigger.Conditions>
                <Setter Value="{DynamicResource SecondaryBorderBrush}" Property="BorderBrush" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition SourceName="ButtonClear" Property="UIElement.IsMouseOver" Value="true" />
                    <Condition SourceName="PART_Popup" Property="IsOpen" Value="false" />
                </MultiTrigger.Conditions>
                <Setter Value="{DynamicResource SecondaryBorderBrush}" Property="BorderBrush" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition SourceName="toggleButton" Property="UIElement.IsMouseOver" Value="true" />
                    <Condition Property="hc:CheckComboBox.ShowClearButton" Value="True" />
                </MultiTrigger.Conditions>
                <Setter TargetName="ButtonClear" Property="Visibility" Value="Visible" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition SourceName="ButtonClear" Property="UIElement.IsMouseOver" Value="true" />
                    <Condition Property="hc:CheckComboBox.ShowClearButton" Value="True" />
                </MultiTrigger.Conditions>
                <Setter TargetName="ButtonClear" Property="Visibility" Value="Visible" />
            </MultiTrigger>
            <Trigger SourceName="PART_Popup" Property="IsOpen" Value="True">
                <Setter Value="{DynamicResource PrimaryBrush}" Property="BorderBrush" />
            </Trigger>
            <Trigger Property="UIElement.IsFocused" Value="True">
                <Setter Value="{DynamicResource PrimaryBrush}" Property="BorderBrush" />
            </Trigger>
            <Trigger Property="hc:CheckComboBox.IsError" Value="true">
                <Trigger.EnterActions>
                    <BeginStoryboard Storyboard="{StaticResource StoryboardShow}" />
                </Trigger.EnterActions>
                <Trigger.ExitActions>
                    <BeginStoryboard Storyboard="{StaticResource StoryboardHidden}" />
                </Trigger.ExitActions>
                <Setter Value="{DynamicResource DangerBrush}" Property="BorderBrush" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter TargetName="toggleButton" Property="UIElement.Opacity" Value="0.4" />
                <Setter TargetName="PART_Panel" Property="UIElement.Opacity" Value="0.4" />
            </Trigger>
        </ControlTemplate.Triggers>
        <Grid Name="templateRoot" SnapsToDevicePixels="true" MinHeight="{Binding Path=(hc:InfoElement.MinContentHeight), RelativeSource={RelativeSource TemplatedParent}}" Height="{Binding Path=(hc:InfoElement.ContentHeight), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource Double2GridLengthConverter}}">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="{Binding Path=(hc:InfoElement.TitleWidth), RelativeSource={RelativeSource TemplatedParent}}" />
                <ColumnDefinition />
                <ColumnDefinition Width="Auto" MinWidth="30" />
            </Grid.ColumnDefinitions>
            <DockPanel LastChildFill="True" Visibility="{Binding Path=(hc:InfoElement.Title), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource String2VisibilityConverter}}" HorizontalAlignment="{Binding Path=(hc:TitleElement.HorizontalAlignment), RelativeSource={RelativeSource TemplatedParent}}" VerticalAlignment="{Binding Path=(hc:TitleElement.VerticalAlignment), RelativeSource={RelativeSource TemplatedParent}}" Margin="{Binding Path=(hc:TitleElement.MarginOnTheLeft), RelativeSource={RelativeSource TemplatedParent}}">
                <ContentPresenter DockPanel.Dock="Right" Foreground="{DynamicResource DangerBrush}" Margin="4,0,0,0" Content="{Binding Path=(hc:InfoElement.Symbol), RelativeSource={RelativeSource TemplatedParent}}" Visibility="{Binding Path=(hc:InfoElement.Necessary), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource Boolean2VisibilityConverter}}" />
                <TextBlock AutoTooltip="True" TextWrapping="NoWrap" TextTrimming="CharacterEllipsis" Text="{Binding Path=(hc:InfoElement.Title), RelativeSource={RelativeSource TemplatedParent}}" />
            </DockPanel>
            <Popup Name="PART_Popup" Grid.Column="1" AllowsTransparency="true" Grid.ColumnSpan="2" StaysOpen="False" Margin="1" PopupAnimation="{StaticResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}" Placement="Bottom" PlacementTarget="{Binding ElementName=toggleButton}" IsOpen="{Binding IsDropDownOpen , Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}">
                <Decorator Margin="8 0">
                    <Border Name="dropDownBorder" Effect="{StaticResource EffectShadow2}" BorderThickness="0,1,0,0" Margin="0,0,0,8" MaxHeight="{TemplateBinding MaxDropDownHeight}" BorderBrush="{DynamicResource BorderBrush}" Background="{DynamicResource RegionBrush}" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}">
                        <hc:ToggleBlock VerticalContentAlignment="Stretch" HorizontalContentAlignment="Stretch" IsChecked="{Binding HasItems , RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}" UnCheckedContent="{hc:Empty}">
                            <hc:ToggleBlock.CheckedContent>
                                <Grid Margin="0,4" ClipToBounds="False">
                                    <Grid.RowDefinitions>
                                        <RowDefinition Height="Auto" />
                                        <RowDefinition />
                                    </Grid.RowDefinitions>
                                    <hc:CheckComboBoxItem Name="PART_SelectAll" Style="{TemplateBinding ItemContainerStyle}" IsEnabled="{TemplateBinding ShowSelectAllButton}" HorizontalContentAlignment="Stretch" Visibility="{Binding ShowSelectAllButton , RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource Boolean2VisibilityConverter}}" Content="{ex:Lang Key={x:Static langs:LangKeys.All}}" />
                                    <ScrollViewer Name="DropDownScrollViewer" Grid.Row="1">
                                        <ItemsPresenter Name="ItemsPresenter" DirectionalNavigation="Contained" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                                    </ScrollViewer>
                                </Grid>
                            </hc:ToggleBlock.CheckedContent>
                        </hc:ToggleBlock>
                    </Border>
                </Decorator>
            </Popup>
            <TextBlock Name="TextBlockError" Grid.Column="1" Grid.ColumnSpan="2" TextBlock.FontSize="12" Text="{TemplateBinding ErrorStr}" VerticalAlignment="Bottom" Margin="9,0,0,4" Foreground="{DynamicResource DangerBrush}" />
            <ToggleButton Name="toggleButton" Grid.Column="1" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" Padding="{TemplateBinding Padding}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Grid.ColumnSpan="2" Style="{StaticResource CheckComboBoxWatermarkToggleButton}" Content="{Binding Path=(hc:InfoElement.Placeholder), RelativeSource={RelativeSource TemplatedParent}}" IsChecked="{Binding IsDropDownOpen , Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" />
            <Border Grid.Column="1" Margin="-1,1">
                <hc:UniformSpacingPanel Name="PART_Panel" Margin="{TemplateBinding Padding}" Spacing="4" ChildWrapping="Wrap" ItemVerticalAlignment="Center" />
            </Border>
            <Button Name="ButtonClear" Height="{x:Static system:Double.NaN}" Command="interactivity:ControlCommands.Clear" Margin="0,0,26,0" Visibility="Collapsed" Width="16" Grid.Column="2" Style="{StaticResource ButtonIcon}" Padding="0" Geometry="{StaticResource DeleteFillCircleGeometry}" Foreground="{TemplateBinding BorderBrush}" />
        </Grid>
    </ControlTemplate>
    <Style x:Key="CheckComboBoxPlusBaseStyle" BasedOn="{StaticResource CheckComboBoxExtendBaseStyle}" TargetType="{x:Type hc:CheckComboBox}">
        <Style.Triggers>
            <Trigger Property="hc:TitleElement.TitlePlacement" Value="Left">
                <Setter Property="Template" Value="{StaticResource CheckComboBoxPlusLeftTemplate}" />
            </Trigger>
        </Style.Triggers>
        <Setter Property="hc:CheckComboBox.IsError" Value="{Binding Path=(Validation.HasError), RelativeSource={RelativeSource Self}}" />
        <Setter Property="Template" Value="{StaticResource CheckComboBoxPlusTopTemplate}" />
    </Style>
    <ControlTemplate x:Key="ColorPickerSliderHorizontal" TargetType="{x:Type Slider}">
        <hc:SimplePanel>
            <Border Margin="7,0" Background="{TemplateBinding Background}" MaxHeight="11" CornerRadius="2" />
            <Border Margin="7,0" Background="{TemplateBinding Foreground}" MaxHeight="11" CornerRadius="2">
                <Border.OpacityMask>
                    <LinearGradientBrush EndPoint="0,0.5" StartPoint="1,0.5">
                        <GradientStop Color="Transparent" Offset="1" />
                        <GradientStop Color="White" Offset="0" />
                    </LinearGradientBrush>
                </Border.OpacityMask>
            </Border>
            <Track Name="PART_Track" DecreaseRepeatButton="{RepeatButton Command={x:Static Slider.DecreaseLarge}, Style={StaticResource ColorPickerSliderRepeatButtonBaseStyle}}" IncreaseRepeatButton="{RepeatButton Command={x:Static Slider.IncreaseLarge}, Style={StaticResource ColorPickerSliderRepeatButtonBaseStyle}}" Thumb="{Thumb Name=Thumb, Focusable=False, Height=13, Width=13, OverridesDefaultStyle=True, Template={StaticResource ColorPickerSliderThumbTemplate}, VerticalAlignment=Center, Effect={DropShadowEffect ShadowDepth=0, Opacity=.6}}" />
        </hc:SimplePanel>
    </ControlTemplate>
    <ControlTemplate x:Key="ColorPickerSliderVertical" TargetType="{x:Type Slider}">
        <hc:SimplePanel>
            <Border Margin="0,7" CornerRadius="2" MaxWidth="11" Background="{TemplateBinding Background}" />
            <Border Margin="0,7" CornerRadius="2" MaxWidth="11" Background="{TemplateBinding Foreground}">
                <Border.OpacityMask>
                    <LinearGradientBrush EndPoint="0,0.5" StartPoint="1,0.5">
                        <GradientStop Color="Transparent" Offset="1" />
                        <GradientStop Color="White" Offset="0" />
                    </LinearGradientBrush>
                </Border.OpacityMask>
            </Border>
            <Track Name="PART_Track" DecreaseRepeatButton="{RepeatButton Command={x:Static Slider.DecreaseLarge}, Style={StaticResource ColorPickerSliderRepeatButtonBaseStyle}}" IncreaseRepeatButton="{RepeatButton Command={x:Static Slider.IncreaseLarge}, Style={StaticResource ColorPickerSliderRepeatButtonBaseStyle}}" Thumb="{Thumb Name=Thumb, Focusable=False, Height=13, OverridesDefaultStyle=True, Template={StaticResource ColorPickerSliderThumbTemplate}, VerticalAlignment=Top, Width=13, Effect={DropShadowEffect ShadowDepth=0, Opacity=.6}}" />
        </hc:SimplePanel>
    </ControlTemplate>
    <Style x:Key="ColorPickerSlider" BasedOn="{StaticResource BaseStyle}" TargetType="{x:Type Slider}">
        <Style.Triggers>
            <Trigger Property="Slider.Orientation" Value="Vertical">
                <Setter Property="Template" Value="{StaticResource ColorPickerSliderVertical}" />
            </Trigger>
        </Style.Triggers>
        <Setter Property="Stylus.IsPressAndHoldEnabled" Value="false" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="Foreground" Value="Transparent" />
        <Setter Property="Template" Value="{StaticResource ColorPickerSliderHorizontal}" />
    </Style>
    <Style x:Key="ColorPickerBaseStyle" TargetType="{x:Type hc:ColorPicker}">
        <Setter Property="Focusable" Value="False" />
        <Setter Property="Width" Value="230" />
        <Setter Property="Background" Value="{DynamicResource RegionBrush}" />
        <Setter Property="FrameworkElement.UseLayoutRounding" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type hc:ColorPicker}">
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="122" />
                            <RowDefinition Height="110" />
                            <RowDefinition Height="62" />
                            <RowDefinition Height="62" />
                        </Grid.RowDefinitions>
                        <Border BorderThickness="1" BorderBrush="{DynamicResource BorderBrush}" Grid.RowSpan="4" Background="{TemplateBinding Background}" />
                        <hc:SimplePanel Margin="1" Grid.Row="0">
                            <Border Background="{TemplateBinding BackColor}" />
                            <Border>
                                <Border.Background>
                                    <LinearGradientBrush EndPoint="0,0.5" StartPoint="1,0.5">
                                        <GradientStop Color="White" Offset="1" />
                                        <GradientStop Color="#80ffffff" Offset=".5" />
                                        <GradientStop Color="#00ffffff" />
                                    </LinearGradientBrush>
                                </Border.Background>
                            </Border>
                            <Border>
                                <Border.Background>
                                    <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                                        <GradientStop Color="Black" Offset="1" />
                                        <GradientStop Color="#80000000" Offset=".5" />
                                        <GradientStop Color="#00000000" />
                                    </LinearGradientBrush>
                                </Border.Background>
                            </Border>
                        </hc:SimplePanel>
                        <Border Name="PART_BorderColor" Grid.Row="0" CornerRadius="2,2,0,0" ClipToBounds="True">
                            <Canvas Margin="-6">
                                <Border Name="PART_BorderPicker" Background="Transparent" Height="12" CornerRadius="6" Width="12" BorderThickness="1" BorderBrush="White" Effect="{DropShadowEffect ShadowDepth=0, Opacity=.4}" />
                            </Canvas>
                        </Border>
                        <Border Name="PART_BorderDrag" Grid.Row="0" Background="Transparent" />
                        <Grid Margin="16,16,10,0" Grid.Row="1">
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto" />
                                <RowDefinition />
                            </Grid.RowDefinitions>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition />
                                <ColumnDefinition Width="28" />
                            </Grid.ColumnDefinitions>
                            <ToggleButton Name="PART_ButtonDropper" Width="16" Height="16" Margin="0,0,10,0" Style="{StaticResource ToggleButtonCustom}" HideUncheckedElement="True" CheckedElement="{Path Stretch=Uniform, Data={StaticResource DropperGeometry}, Fill={DynamicResource DarkPrimaryBrush}}">
                                <Path Stretch="Uniform" Data="{StaticResource DropperGeometry}" Fill="{DynamicResource PrimaryTextBrush}" />
                            </ToggleButton>
                            <Border Grid.Row="0" Grid.Column="1" Width="32" Height="32" CornerRadius="16" Background="{StaticResource ColorPickerOpacityBrush}" BorderBrush="{DynamicResource BorderBrush}" BorderThickness="1" />
                            <Border Grid.Row="0" Grid.Column="1" Width="32" Height="32" CornerRadius="16" Background="{TemplateBinding SelectedBrush}" BorderBrush="{DynamicResource BorderBrush}" BorderThickness="1" />
                            <Slider Name="PART_SliderColor" LargeChange="0.01" SmallChange="0.01" Grid.ColumnSpan="2" Value="6" Maximum="6" Background="{StaticResource ColorPickerRainbowBrush}" Margin="2,1,0,0" Grid.Row="0" Grid.Column="2" VerticalAlignment="Top" Style="{StaticResource ColorPickerSlider}" IsMoveToPointEnabled="True" />
                            <Slider Name="PART_SliderOpacity" Grid.ColumnSpan="2" IsSnapToTickEnabled="True" Maximum="255" SmallChange="1" Foreground="{TemplateBinding SelectedBrushWithoutOpacity}" Background="{StaticResource ColorPickerOpacityBrush}" Margin="2,0,0,0" Grid.Row="0" Grid.Column="2" VerticalAlignment="Bottom" Style="{StaticResource ColorPickerSlider}" IsMoveToPointEnabled="True" Value="{Binding ChannelA , RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay}" />
                            <StackPanel Grid.Row="1" Grid.Column="0" Grid.ColumnSpan="3" Margin="0,14,0,0" VerticalAlignment="Top" Visibility="{Binding ShowList[0] , RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource Boolean2VisibilityConverter}}">
                                <TextBox Padding="0" HorizontalContentAlignment="Center" Width="176" FontSize="10" MaxLength="10" Height="24" Text="{Binding SelectedBrush , RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay, Converter={StaticResource Color2HexStringConverter}, UpdateSourceTrigger=LostFocus}" />
                                <TextBlock Foreground="{DynamicResource ThirdlyTextBrush}" Margin="0,2,0,0" TextBlock.FontSize="10" Text="HEX" HorizontalAlignment="Center" />
                            </StackPanel>
                            <UniformGrid Name="PART_PanelRgb" Rows="1" Grid.Row="1" Grid.Column="0" Grid.ColumnSpan="3" Margin="-2,14,-2,0" VerticalAlignment="Top" Visibility="{Binding ShowList[1] , RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource Boolean2VisibilityConverter}}">
                                <StackPanel Margin="2,0">
                                    <hc:NumericUpDown HorizontalContentAlignment="Center" Padding="2,0" Tag="R" ShowUpDownButton="False" Maximum="255" Minimum="0" FontSize="10" Height="24" Value="{Binding ChannelR , RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay}" />
                                    <TextBlock Foreground="{DynamicResource ThirdlyTextBrush}" Margin="0,2,0,0" TextBlock.FontSize="10" Text="R" HorizontalAlignment="Center" />
                                </StackPanel>
                                <StackPanel Margin="2,0">
                                    <hc:NumericUpDown HorizontalContentAlignment="Center" Padding="0" Tag="G" ShowUpDownButton="False" Maximum="255" Minimum="0" FontSize="10" Height="24" Value="{Binding ChannelG , RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay}" />
                                    <TextBlock Foreground="{DynamicResource ThirdlyTextBrush}" Margin="0,2,0,0" TextBlock.FontSize="10" Text="G" HorizontalAlignment="Center" />
                                </StackPanel>
                                <StackPanel Margin="2,0">
                                    <hc:NumericUpDown HorizontalContentAlignment="Center" Padding="0" Tag="B" ShowUpDownButton="False" Maximum="255" Minimum="0" FontSize="10" Height="24" Value="{Binding ChannelB , RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay}" />
                                    <TextBlock Foreground="{DynamicResource ThirdlyTextBrush}" Margin="0,2,0,0" TextBlock.FontSize="10" Text="B" HorizontalAlignment="Center" />
                                </StackPanel>
                                <StackPanel Margin="2,0">
                                    <hc:NumericUpDown HorizontalContentAlignment="Center" Padding="0" ShowUpDownButton="False" Maximum="255" Minimum="0" FontSize="10" Height="24" Value="{Binding ChannelA , RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />
                                    <TextBlock Foreground="{DynamicResource ThirdlyTextBrush}" Margin="0,2,0,0" TextBlock.FontSize="10" Text="A" HorizontalAlignment="Center" />
                                </StackPanel>
                            </UniformGrid>
                            <Button Command="interactivity:ControlCommands.Switch" Padding="6" FontSize="8" BorderThickness="0" HorizontalAlignment="Right" Height="24" Width="20" Grid.Column="3" Grid.Row="1" Content="{Path Fill=#323534, Style={StaticResource UpDownPathStyle}}" />
                        </Grid>
                        <Border Grid.Row="2" BorderThickness="0,1,0,0" BorderBrush="{DynamicResource BorderBrush}">
                            <WrapPanel Name="PART_PanelColor" Margin="6" HorizontalAlignment="Center" />
                        </Border>
                        <Border Grid.Row="3" BorderThickness="0,1,0,0" BorderBrush="{DynamicResource BorderBrush}">
                            <StackPanel Orientation="Horizontal" HorizontalAlignment="Center" VerticalAlignment="Center">
                                <Button Command="interactivity:ControlCommands.Cancel" Width="80" Margin="0,0,16,0" Content="{ex:Lang Key={x:Static langs:LangKeys.Cancel}}" />
                                <Button Command="interactivity:ControlCommands.Confirm" Width="80" Style="{StaticResource ButtonPrimary}" Content="{ex:Lang Key={x:Static langs:LangKeys.Confirm}}" />
                            </StackPanel>
                        </Border>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ContextMenuBaseStyle" TargetType="{x:Type ContextMenu}">
        <Setter Property="Background" Value="{DynamicResource RegionBrush}" />
        <Setter Property="UIElement.SnapsToDevicePixels" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ContextMenu}">
                    <Border Effect="{StaticResource EffectShadow2}" Margin="8" Background="{TemplateBinding Background}" CornerRadius="2" MaxHeight="{TemplateBinding MaxHeight}" BorderThickness="1" BorderBrush="{DynamicResource BorderBrush}">
                        <ScrollViewer Style="{StaticResource ScrollViewerUpDown}" Margin="0,6">
                            <ItemsPresenter />
                        </ScrollViewer>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="CoverViewContentBaseStyle" TargetType="{x:Type hc:CoverViewContent}">
        <Setter Property="Focusable" Value="False" />
        <Setter Property="Background" Value="{DynamicResource RegionBrush}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
        <Setter Property="Margin" Value="0,0,0,8" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type hc:CoverViewContent}">
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="16" />
                            <RowDefinition />
                        </Grid.RowDefinitions>
                        <Border Name="PART_Triangle" Visibility="Visible" Grid.Row="0" Width="30" Height="30" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}" RenderTransformOrigin="0.5,0.5" HorizontalAlignment="Left" VerticalAlignment="Top" Grid.RowSpan="2">
                            <Border.RenderTransform>
                                <TransformGroup>
                                    <TranslateTransform X="5" Y="5" />
                                    <RotateTransform Angle="45" />
                                </TransformGroup>
                            </Border.RenderTransform>
                        </Border>
                        <Border Name="PART_Content" MinHeight="30" Height="0" Grid.Row="1" Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}">
                            <ContentPresenter Margin="{TemplateBinding Padding}" />
                        </Border>
                        <Rectangle SnapsToDevicePixels="True" Grid.Row="1" VerticalAlignment="Top" HorizontalAlignment="Left" Width="28" Height="1" Fill="{TemplateBinding Background}" Visibility="{Binding Visibility , ElementName=PART_Triangle}" Margin="{Binding Margin , ElementName=PART_Triangle}">
                            <Rectangle.RenderTransform>
                                <TransformGroup>
                                    <TranslateTransform X="1" />
                                </TransformGroup>
                            </Rectangle.RenderTransform>
                        </Rectangle>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="CoverViewBaseStyle" TargetType="{x:Type hc:CoverView}">
        <Setter Property="Focusable" Value="False" />
        <Setter Property="hc:SimpleItemsControl.ItemContainerStyle" Value="{StaticResource CoverViewItemBaseStyle}" />
        <Setter Property="hc:CoverView.CoverViewContentStyle" Value="{StaticResource CoverViewContentBaseStyle}" />
        <Setter Property="hc:RegularItemsControl.ItemMargin" Value="8" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type hc:CoverView}">
                    <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}">
                        <ScrollViewer>
                            <WrapPanel Name="PART_Panel" />
                        </ScrollViewer>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="DatePickerTextBoxStyle" TargetType="{x:Type DatePickerTextBox}">
        <Setter Property="Foreground" Value="{Binding Foreground , RelativeSource={RelativeSource AncestorType=DatePicker}}" />
        <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst" />
        <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
        <Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="TextBoxBase.CaretBrush" Value="{DynamicResource PrimaryTextBrush}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DatePickerTextBox}">
                    <hc:SimplePanel>
                        <TextBlock VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Margin="{TemplateBinding Padding}" Foreground="{DynamicResource ThirdlyTextBrush}" Text="{Binding Path=(hc:InfoElement.Placeholder), RelativeSource={RelativeSource AncestorType=DatePicker}}" Visibility="{TemplateBinding Text , Converter={StaticResource String2VisibilityReConverter}}" />
                        <ScrollViewer Name="PART_ContentHost" Margin="-2,0" Padding="{TemplateBinding Padding}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" />
                    </hc:SimplePanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="DatePickerBaseStyle" TargetType="{x:Type DatePicker}">
        <Setter Property="Foreground" Value="{DynamicResource PrimaryTextBrush}" />
        <Setter Property="DatePicker.CalendarStyle" Value="{StaticResource CalendarBaseStyle}" />
        <Setter Property="hc:BorderElement.CornerRadius" Value="{StaticResource DefaultCornerRadius}" />
        <Setter Property="DatePicker.IsTodayHighlighted" Value="True" />
        <Setter Property="DatePicker.SelectedDateFormat" Value="Short" />
        <Setter Property="Background" Value="{DynamicResource RegionBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
        <Setter Property="MinHeight" Value="{StaticResource DefaultControlHeight}" />
        <Setter Property="Padding" Value="{StaticResource DefaultInputPadding}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Validation.ErrorTemplate" Value="{x:Null}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DatePicker}">
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter TargetName="templateRoot" Property="UIElement.Opacity" Value="0.4" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="UIElement.IsMouseOver" Value="true" />
                                <Condition SourceName="PART_Popup" Property="IsOpen" Value="false" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="templateRoot" Value="{DynamicResource SecondaryBorderBrush}" Property="BorderBrush" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="UIElement.IsMouseOver" Value="true" />
                                <Condition SourceName="PART_Popup" Property="IsOpen" Value="true" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="templateRoot" Value="{DynamicResource PrimaryBrush}" Property="BorderBrush" />
                        </MultiTrigger>
                        <Trigger SourceName="PART_TextBox" Property="UIElement.IsFocused" Value="true">
                            <Setter TargetName="templateRoot" Value="{DynamicResource PrimaryBrush}" Property="BorderBrush" />
                        </Trigger>
                        <Trigger SourceName="PART_Popup" Property="IsOpen" Value="True">
                            <Setter TargetName="templateRoot" Value="{DynamicResource PrimaryBrush}" Property="BorderBrush" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                    <Border Name="templateRoot" BorderBrush="{DynamicResource BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}">
                        <Grid Name="PART_Root" HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*" />
                                <ColumnDefinition Width="30" />
                            </Grid.ColumnDefinitions>
                            <Button Name="PART_Button" Height="{x:Static system:Double.NaN}" Style="{StaticResource ButtonIcon}" Padding="7,6" Geometry="{StaticResource CalendarGeometry}" Grid.Column="1" Focusable="False" Grid.Row="0" Foreground="{Binding BorderBrush , ElementName=templateRoot}" />
                            <DatePickerTextBox Name="PART_TextBox" Padding="{TemplateBinding Padding}" Grid.Column="0" Focusable="{TemplateBinding Focusable}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" Grid.Row="0" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" Style="{StaticResource DatePickerTextBoxStyle}" />
                            <Popup Name="PART_Popup" Grid.Column="0" PopupAnimation="{StaticResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}" AllowsTransparency="True" Placement="Bottom" StaysOpen="False" PlacementTarget="{Binding ElementName=templateRoot}" />
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <ControlTemplate x:Key="DatePickerExtendTopTemplate" TargetType="{x:Type DatePicker}">
        <ControlTemplate.Triggers>
            <Trigger Property="IsEnabled" Value="false">
                <Setter TargetName="templateRoot" Property="UIElement.Opacity" Value="0.4" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition SourceName="templateRoot" Property="UIElement.IsMouseOver" Value="true" />
                    <Condition SourceName="PART_Popup" Property="IsOpen" Value="false" />
                </MultiTrigger.Conditions>
                <Setter TargetName="templateRoot" Value="{DynamicResource SecondaryBorderBrush}" Property="BorderBrush" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition SourceName="templateRoot" Property="UIElement.IsMouseOver" Value="true" />
                    <Condition SourceName="PART_Popup" Property="IsOpen" Value="true" />
                </MultiTrigger.Conditions>
                <Setter TargetName="templateRoot" Value="{DynamicResource PrimaryBrush}" Property="BorderBrush" />
            </MultiTrigger>
            <Trigger SourceName="PART_TextBox" Property="UIElement.IsFocused" Value="true">
                <Setter TargetName="templateRoot" Value="{DynamicResource PrimaryBrush}" Property="BorderBrush" />
            </Trigger>
            <Trigger SourceName="PART_Popup" Property="IsOpen" Value="True">
                <Setter TargetName="templateRoot" Value="{DynamicResource PrimaryBrush}" Property="BorderBrush" />
            </Trigger>
        </ControlTemplate.Triggers>
        <Grid>
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition MinHeight="{Binding Path=(hc:InfoElement.MinContentHeight), RelativeSource={RelativeSource TemplatedParent}}" Height="{Binding Path=(hc:InfoElement.ContentHeight), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource Double2GridLengthConverter}}" />
            </Grid.RowDefinitions>
            <DockPanel LastChildFill="True" Margin="{TemplateBinding Padding}" Visibility="{Binding Path=(hc:InfoElement.Title), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource String2VisibilityConverter}}" HorizontalAlignment="{Binding Path=(hc:TitleElement.HorizontalAlignment), RelativeSource={RelativeSource TemplatedParent}}">
                <ContentPresenter DockPanel.Dock="Right" Foreground="{DynamicResource DangerBrush}" Margin="4,0,0,0" Content="{Binding Path=(hc:InfoElement.Symbol), RelativeSource={RelativeSource TemplatedParent}}" Visibility="{Binding Path=(hc:InfoElement.Necessary), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource Boolean2VisibilityConverter}}" />
                <TextBlock AutoTooltip="True" TextWrapping="NoWrap" TextTrimming="CharacterEllipsis" Margin="1,0,1,0" Text="{Binding Path=(hc:InfoElement.Title), RelativeSource={RelativeSource TemplatedParent}}" />
            </DockPanel>
            <Border Name="templateRoot" Grid.Row="1" BorderBrush="{DynamicResource BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}">
                <Grid Name="PART_Root" HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="*" />
                        <ColumnDefinition Width="30" />
                    </Grid.ColumnDefinitions>
                    <Button Name="PART_Button" Height="{x:Static system:Double.NaN}" Style="{StaticResource ButtonIcon}" Padding="7,6" Geometry="{StaticResource CalendarGeometry}" Grid.Column="1" Focusable="False" Grid.Row="0" Foreground="{Binding BorderBrush , ElementName=templateRoot}" />
                    <DatePickerTextBox Name="PART_TextBox" Padding="{TemplateBinding Padding}" Grid.Column="0" Focusable="{TemplateBinding Focusable}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" Grid.Row="0" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" Style="{StaticResource DatePickerTextBoxStyle}" />
                    <Popup Name="PART_Popup" Grid.Column="0" PopupAnimation="{StaticResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}" AllowsTransparency="True" Placement="Bottom" StaysOpen="False" PlacementTarget="{Binding ElementName=templateRoot}" />
                </Grid>
            </Border>
        </Grid>
    </ControlTemplate>
    <ControlTemplate x:Key="DatePickerExtendLeftTemplate" TargetType="{x:Type DatePicker}">
        <ControlTemplate.Triggers>
            <Trigger Property="IsEnabled" Value="false">
                <Setter TargetName="templateRoot" Property="UIElement.Opacity" Value="0.4" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition SourceName="templateRoot" Property="UIElement.IsMouseOver" Value="true" />
                    <Condition SourceName="PART_Popup" Property="IsOpen" Value="false" />
                </MultiTrigger.Conditions>
                <Setter TargetName="templateRoot" Value="{DynamicResource SecondaryBorderBrush}" Property="BorderBrush" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition SourceName="templateRoot" Property="UIElement.IsMouseOver" Value="true" />
                    <Condition SourceName="PART_Popup" Property="IsOpen" Value="true" />
                </MultiTrigger.Conditions>
                <Setter TargetName="templateRoot" Value="{DynamicResource PrimaryBrush}" Property="BorderBrush" />
            </MultiTrigger>
            <Trigger SourceName="PART_TextBox" Property="UIElement.IsFocused" Value="true">
                <Setter TargetName="templateRoot" Value="{DynamicResource PrimaryBrush}" Property="BorderBrush" />
            </Trigger>
            <Trigger SourceName="PART_Popup" Property="IsOpen" Value="True">
                <Setter TargetName="templateRoot" Value="{DynamicResource PrimaryBrush}" Property="BorderBrush" />
            </Trigger>
        </ControlTemplate.Triggers>
        <Grid MinHeight="{Binding Path=(hc:InfoElement.MinContentHeight), RelativeSource={RelativeSource TemplatedParent}}" Height="{Binding Path=(hc:InfoElement.ContentHeight), RelativeSource={RelativeSource TemplatedParent}}">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="{Binding Path=(hc:InfoElement.TitleWidth), RelativeSource={RelativeSource TemplatedParent}}" />
                <ColumnDefinition />
            </Grid.ColumnDefinitions>
            <DockPanel LastChildFill="True" Margin="0,7,6,7" Visibility="{Binding Path=(hc:InfoElement.Title), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource String2VisibilityConverter}}" HorizontalAlignment="{Binding Path=(hc:TitleElement.HorizontalAlignment), RelativeSource={RelativeSource TemplatedParent}}" VerticalAlignment="{Binding Path=(hc:TitleElement.VerticalAlignment), RelativeSource={RelativeSource TemplatedParent}}">
                <ContentPresenter DockPanel.Dock="Right" Foreground="{DynamicResource DangerBrush}" Margin="4,0,0,0" Content="{Binding Path=(hc:InfoElement.Symbol), RelativeSource={RelativeSource TemplatedParent}}" Visibility="{Binding Path=(hc:InfoElement.Necessary), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource Boolean2VisibilityConverter}}" />
                <TextBlock AutoTooltip="True" TextWrapping="NoWrap" TextTrimming="CharacterEllipsis" Text="{Binding Path=(hc:InfoElement.Title), RelativeSource={RelativeSource TemplatedParent}}" />
            </DockPanel>
            <Border Name="templateRoot" Grid.Column="1" BorderBrush="{DynamicResource BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}">
                <Grid Name="PART_Root" HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="*" />
                        <ColumnDefinition Width="30" />
                    </Grid.ColumnDefinitions>
                    <Button Name="PART_Button" Height="{x:Static system:Double.NaN}" Style="{StaticResource ButtonIcon}" Padding="7,6" Geometry="{StaticResource CalendarGeometry}" Grid.Column="1" Focusable="False" Grid.Row="0" Foreground="{Binding BorderBrush , ElementName=templateRoot}" />
                    <DatePickerTextBox Name="PART_TextBox" Padding="{TemplateBinding Padding}" Grid.Column="0" Focusable="{TemplateBinding Focusable}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" Grid.Row="0" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" Style="{StaticResource DatePickerTextBoxStyle}" />
                    <Popup Name="PART_Popup" Grid.Column="0" PopupAnimation="{StaticResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}" AllowsTransparency="True" Placement="Bottom" StaysOpen="False" PlacementTarget="{Binding ElementName=templateRoot}" />
                </Grid>
            </Border>
        </Grid>
    </ControlTemplate>
    <Style x:Key="DatePickerExtendBaseStyle" BasedOn="{StaticResource DatePickerBaseStyle}" TargetType="{x:Type DatePicker}">
        <Style.Triggers>
            <Trigger Property="hc:TitleElement.TitlePlacement" Value="Left">
                <Setter Property="Template" Value="{StaticResource DatePickerExtendLeftTemplate}" />
                <Setter Property="Width" Value="Auto" />
            </Trigger>
        </Style.Triggers>
        <Setter Property="Height" Value="Auto" />
        <Setter Property="hc:InfoElement.Symbol" Value="●" />
        <Setter Property="hc:InfoElement.ContentHeight" Value="{x:Static system:Double.NaN}" />
        <Setter Property="hc:InfoElement.MinContentHeight" Value="{StaticResource DefaultControlHeight}" />
        <Setter Property="Template" Value="{StaticResource DatePickerExtendTopTemplate}" />
    </Style>
    <ControlTemplate x:Key="DatePickerPlusTopTemplate" TargetType="{x:Type hc:DatePicker}">
        <ControlTemplate.Resources>
            <Storyboard Name="StoryboardShow">
                <ThicknessAnimation TargetName="TextBlockError" TargetProperty="Margin" To="9,0,0,-18" Duration="0:0:.2" />
            </Storyboard>
            <Storyboard Name="StoryboardHidden">
                <ThicknessAnimation TargetName="TextBlockError" TargetProperty="Margin" To="9,0,0,4" Duration="0:0:0" />
            </Storyboard>
        </ControlTemplate.Resources>
        <ControlTemplate.Triggers>
            <Trigger Property="IsEnabled" Value="false">
                <Setter TargetName="templateRoot" Property="UIElement.Opacity" Value="0.4" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition SourceName="templateRoot" Property="UIElement.IsMouseOver" Value="true" />
                    <Condition SourceName="PART_Popup" Property="IsOpen" Value="false" />
                </MultiTrigger.Conditions>
                <Setter TargetName="templateRoot" Value="{DynamicResource SecondaryBorderBrush}" Property="BorderBrush" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition SourceName="templateRoot" Property="UIElement.IsMouseOver" Value="true" />
                    <Condition SourceName="PART_Popup" Property="IsOpen" Value="true" />
                </MultiTrigger.Conditions>
                <Setter TargetName="templateRoot" Value="{DynamicResource PrimaryBrush}" Property="BorderBrush" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition SourceName="templateRoot" Property="UIElement.IsMouseOver" Value="true" />
                    <Condition Property="hc:DatePicker.ShowClearButton" Value="True" />
                </MultiTrigger.Conditions>
                <Setter TargetName="ButtonClear" Property="Visibility" Value="Visible" />
            </MultiTrigger>
            <Trigger SourceName="PART_TextBox" Property="UIElement.IsFocused" Value="true">
                <Setter TargetName="templateRoot" Value="{DynamicResource PrimaryBrush}" Property="BorderBrush" />
            </Trigger>
            <Trigger SourceName="PART_Popup" Property="IsOpen" Value="True">
                <Setter TargetName="templateRoot" Value="{DynamicResource PrimaryBrush}" Property="BorderBrush" />
            </Trigger>
            <Trigger Property="hc:DatePicker.IsError" Value="true">
                <Trigger.EnterActions>
                    <BeginStoryboard Storyboard="{StaticResource StoryboardShow}" />
                </Trigger.EnterActions>
                <Trigger.ExitActions>
                    <BeginStoryboard Storyboard="{StaticResource StoryboardHidden}" />
                </Trigger.ExitActions>
                <Setter TargetName="templateRoot" Value="{DynamicResource DangerBrush}" Property="BorderBrush" />
            </Trigger>
        </ControlTemplate.Triggers>
        <Grid>
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition MinHeight="{Binding Path=(hc:InfoElement.MinContentHeight), RelativeSource={RelativeSource TemplatedParent}}" Height="{Binding Path=(hc:InfoElement.ContentHeight), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource Double2GridLengthConverter}}" />
            </Grid.RowDefinitions>
            <DockPanel LastChildFill="True" Margin="{TemplateBinding Padding}" Visibility="{Binding Path=(hc:InfoElement.Title), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource String2VisibilityConverter}}" HorizontalAlignment="{Binding Path=(hc:TitleElement.HorizontalAlignment), RelativeSource={RelativeSource TemplatedParent}}">
                <ContentPresenter DockPanel.Dock="Right" Foreground="{DynamicResource DangerBrush}" Margin="4,0,0,0" Content="{Binding Path=(hc:InfoElement.Symbol), RelativeSource={RelativeSource TemplatedParent}}" Visibility="{Binding Path=(hc:InfoElement.Necessary), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource Boolean2VisibilityConverter}}" />
                <TextBlock AutoTooltip="True" TextWrapping="NoWrap" TextTrimming="CharacterEllipsis" Margin="1,0,1,0" Text="{Binding Path=(hc:InfoElement.Title), RelativeSource={RelativeSource TemplatedParent}}" />
            </DockPanel>
            <TextBlock Name="TextBlockError" TextBlock.FontSize="12" Grid.Row="1" Text="{TemplateBinding ErrorStr}" VerticalAlignment="Bottom" Margin="9,0,0,4" Foreground="{DynamicResource DangerBrush}" />
            <Border Name="templateRoot" Grid.Row="1" BorderBrush="{DynamicResource BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}">
                <Grid Name="PART_Root" HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition />
                        <ColumnDefinition Width="Auto" />
                        <ColumnDefinition Width="25" />
                    </Grid.ColumnDefinitions>
                    <Button Name="ButtonClear" Height="{x:Static system:Double.NaN}" Command="interactivity:ControlCommands.Clear" Visibility="Collapsed" Width="16" Grid.Column="1" Style="{StaticResource ButtonIcon}" Padding="0,6" Geometry="{StaticResource DeleteFillCircleGeometry}" Foreground="{Binding BorderBrush , ElementName=templateRoot}" />
                    <Button Name="PART_Button" Height="{x:Static system:Double.NaN}" Style="{StaticResource ButtonIcon}" Padding="2,6,7,6" Geometry="{StaticResource CalendarGeometry}" Grid.Column="2" Focusable="False" Grid.Row="0" Foreground="{Binding BorderBrush , ElementName=templateRoot}" />
                    <DatePickerTextBox Name="PART_TextBox" Padding="{TemplateBinding Padding}" Grid.Column="0" Focusable="{TemplateBinding Focusable}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" Grid.Row="0" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" Style="{StaticResource DatePickerTextBoxStyle}" />
                    <Popup Name="PART_Popup" Grid.Column="0" PopupAnimation="{StaticResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}" AllowsTransparency="True" Placement="Bottom" StaysOpen="False" PlacementTarget="{Binding ElementName=templateRoot}" />
                </Grid>
            </Border>
        </Grid>
    </ControlTemplate>
    <ControlTemplate x:Key="DatePickerPlusLeftTemplate" TargetType="{x:Type hc:DatePicker}">
        <ControlTemplate.Resources>
            <Storyboard Name="StoryboardShow">
                <ThicknessAnimation TargetName="TextBlockError" TargetProperty="Margin" To="9,0,0,-18" Duration="0:0:.2" />
            </Storyboard>
            <Storyboard Name="StoryboardHidden">
                <ThicknessAnimation TargetName="TextBlockError" TargetProperty="Margin" To="9,0,0,4" Duration="0:0:0" />
            </Storyboard>
        </ControlTemplate.Resources>
        <ControlTemplate.Triggers>
            <Trigger Property="IsEnabled" Value="false">
                <Setter TargetName="templateRoot" Property="UIElement.Opacity" Value="0.4" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition SourceName="templateRoot" Property="UIElement.IsMouseOver" Value="true" />
                    <Condition SourceName="PART_Popup" Property="IsOpen" Value="false" />
                </MultiTrigger.Conditions>
                <Setter TargetName="templateRoot" Value="{DynamicResource SecondaryBorderBrush}" Property="BorderBrush" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition SourceName="templateRoot" Property="UIElement.IsMouseOver" Value="true" />
                    <Condition SourceName="PART_Popup" Property="IsOpen" Value="true" />
                </MultiTrigger.Conditions>
                <Setter TargetName="templateRoot" Value="{DynamicResource PrimaryBrush}" Property="BorderBrush" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition SourceName="templateRoot" Property="UIElement.IsMouseOver" Value="true" />
                    <Condition Property="hc:DatePicker.ShowClearButton" Value="True" />
                </MultiTrigger.Conditions>
                <Setter TargetName="ButtonClear" Property="Visibility" Value="Visible" />
            </MultiTrigger>
            <Trigger SourceName="PART_TextBox" Property="UIElement.IsFocused" Value="true">
                <Setter TargetName="templateRoot" Value="{DynamicResource PrimaryBrush}" Property="BorderBrush" />
            </Trigger>
            <Trigger SourceName="PART_Popup" Property="IsOpen" Value="True">
                <Setter TargetName="templateRoot" Value="{DynamicResource PrimaryBrush}" Property="BorderBrush" />
            </Trigger>
            <Trigger Property="hc:DatePicker.IsError" Value="true">
                <Trigger.EnterActions>
                    <BeginStoryboard Storyboard="{StaticResource StoryboardShow}" />
                </Trigger.EnterActions>
                <Trigger.ExitActions>
                    <BeginStoryboard Storyboard="{StaticResource StoryboardHidden}" />
                </Trigger.ExitActions>
                <Setter TargetName="templateRoot" Value="{DynamicResource DangerBrush}" Property="BorderBrush" />
            </Trigger>
        </ControlTemplate.Triggers>
        <Grid MinHeight="{Binding Path=(hc:InfoElement.MinContentHeight), RelativeSource={RelativeSource TemplatedParent}}" Height="{Binding Path=(hc:InfoElement.ContentHeight), RelativeSource={RelativeSource TemplatedParent}}">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="{Binding Path=(hc:InfoElement.TitleWidth), RelativeSource={RelativeSource TemplatedParent}}" />
                <ColumnDefinition />
            </Grid.ColumnDefinitions>
            <DockPanel LastChildFill="True" Margin="0,7,6,7" Visibility="{Binding Path=(hc:InfoElement.Title), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource String2VisibilityConverter}}" HorizontalAlignment="{Binding Path=(hc:TitleElement.HorizontalAlignment), RelativeSource={RelativeSource TemplatedParent}}" VerticalAlignment="{Binding Path=(hc:TitleElement.VerticalAlignment), RelativeSource={RelativeSource TemplatedParent}}">
                <ContentPresenter DockPanel.Dock="Right" Foreground="{DynamicResource DangerBrush}" Margin="4,0,0,0" Content="{Binding Path=(hc:InfoElement.Symbol), RelativeSource={RelativeSource TemplatedParent}}" Visibility="{Binding Path=(hc:InfoElement.Necessary), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource Boolean2VisibilityConverter}}" />
                <TextBlock AutoTooltip="True" TextWrapping="NoWrap" TextTrimming="CharacterEllipsis" Text="{Binding Path=(hc:InfoElement.Title), RelativeSource={RelativeSource TemplatedParent}}" />
            </DockPanel>
            <TextBlock Name="TextBlockError" TextBlock.FontSize="12" Text="{TemplateBinding ErrorStr}" VerticalAlignment="Bottom" Margin="9,0,0,4" Foreground="{DynamicResource DangerBrush}" Grid.Column="1" />
            <Border Name="templateRoot" Grid.Column="1" BorderBrush="{DynamicResource BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}">
                <Grid Name="PART_Root" HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition />
                        <ColumnDefinition Width="Auto" />
                        <ColumnDefinition Width="25" />
                    </Grid.ColumnDefinitions>
                    <Button Name="ButtonClear" Height="{x:Static system:Double.NaN}" Command="interactivity:ControlCommands.Clear" Visibility="Collapsed" Width="16" Grid.Column="1" Style="{StaticResource ButtonIcon}" Padding="0,6" Geometry="{StaticResource DeleteFillCircleGeometry}" Foreground="{Binding BorderBrush , ElementName=templateRoot}" />
                    <Button Name="PART_Button" Height="{x:Static system:Double.NaN}" Style="{StaticResource ButtonIcon}" Padding="2,6,7,6" Geometry="{StaticResource CalendarGeometry}" Grid.Column="2" Focusable="False" Foreground="{Binding BorderBrush , ElementName=templateRoot}" />
                    <DatePickerTextBox Name="PART_TextBox" Padding="{TemplateBinding Padding}" Grid.Column="0" Focusable="{TemplateBinding Focusable}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" Style="{StaticResource DatePickerTextBoxStyle}" />
                    <Popup Name="PART_Popup" Grid.Column="0" PopupAnimation="{StaticResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}" AllowsTransparency="True" Placement="Bottom" StaysOpen="False" PlacementTarget="{Binding ElementName=templateRoot}" />
                </Grid>
            </Border>
        </Grid>
    </ControlTemplate>
    <Style x:Key="DatePickerPlusBaseStyle" BasedOn="{StaticResource DatePickerExtendBaseStyle}" TargetType="{x:Type hc:DatePicker}">
        <Style.Triggers>
            <Trigger Property="hc:TitleElement.TitlePlacement" Value="Left">
                <Setter Property="Template" Value="{StaticResource DatePickerPlusLeftTemplate}" />
                <Setter Property="Width" Value="Auto" />
            </Trigger>
        </Style.Triggers>
        <Setter Property="hc:DatePicker.IsError" Value="{Binding Path=(Validation.HasError), RelativeSource={RelativeSource Self}}" />
        <Setter Property="hc:DatePicker.CaretBrush" Value="{DynamicResource PrimaryTextBrush}" />
        <Setter Property="Template" Value="{StaticResource DatePickerPlusTopTemplate}" />
    </Style>
    <Style x:Key="DateTimePickerBaseStyle" TargetType="{x:Type hc:DateTimePicker}">
        <Setter Property="Foreground" Value="{DynamicResource PrimaryTextBrush}" />
        <Setter Property="hc:BorderElement.CornerRadius" Value="{StaticResource DefaultCornerRadius}" />
        <Setter Property="Padding" Value="{StaticResource DefaultInputPadding}" />
        <Setter Property="Background" Value="{DynamicResource RegionBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
        <Setter Property="MinHeight" Value="{StaticResource DefaultControlHeight}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="hc:DateTimePicker.CaretBrush" Value="{DynamicResource PrimaryTextBrush}" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Validation.ErrorTemplate" Value="{x:Null}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type hc:DateTimePicker}">
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter TargetName="templateRoot" Property="UIElement.Opacity" Value="0.4" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="UIElement.IsMouseOver" Value="true" />
                                <Condition SourceName="PART_Popup" Property="IsOpen" Value="false" />
                            </MultiTrigger.Conditions>
                            <Setter Value="{DynamicResource SecondaryBorderBrush}" Property="BorderBrush" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="UIElement.IsMouseOver" Value="true" />
                                <Condition SourceName="PART_Popup" Property="IsOpen" Value="true" />
                            </MultiTrigger.Conditions>
                            <Setter Value="{DynamicResource PrimaryBrush}" Property="BorderBrush" />
                        </MultiTrigger>
                        <Trigger SourceName="PART_TextBox" Property="UIElement.IsFocused" Value="true">
                            <Setter Value="{DynamicResource PrimaryBrush}" Property="BorderBrush" />
                        </Trigger>
                        <Trigger SourceName="PART_Popup" Property="IsOpen" Value="True">
                            <Setter Value="{DynamicResource PrimaryBrush}" Property="BorderBrush" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                    <Border Name="templateRoot" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}">
                        <Grid Name="PART_Root" HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*" />
                                <ColumnDefinition Width="30" />
                            </Grid.ColumnDefinitions>
                            <Button Name="PART_Button" Height="{x:Static system:Double.NaN}" Style="{StaticResource ButtonIcon}" Padding="7,6" Geometry="{StaticResource ClockGeometry}" Grid.Column="1" Focusable="False" Grid.Row="0" Foreground="{Binding BorderBrush , ElementName=templateRoot}" />
                            <hc:WatermarkTextBox Name="PART_TextBox" CaretBrush="{TemplateBinding CaretBrush}" Foreground="{TemplateBinding Foreground}" Padding="{TemplateBinding Padding}" HorizontalAlignment="Stretch" Grid.Column="0" Focusable="{TemplateBinding Focusable}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" Grid.Row="0" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" />
                            <Popup Name="PART_Popup" Grid.Column="0" PopupAnimation="{StaticResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}" AllowsTransparency="True" Placement="Bottom" StaysOpen="False" PlacementTarget="{Binding ElementName=templateRoot}" />
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <ControlTemplate x:Key="DateTimePickerExtendTopTemplate" TargetType="{x:Type hc:DateTimePicker}">
        <ControlTemplate.Triggers>
            <Trigger Property="IsEnabled" Value="false">
                <Setter TargetName="templateRoot" Property="UIElement.Opacity" Value="0.4" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition SourceName="templateRoot" Property="UIElement.IsMouseOver" Value="true" />
                    <Condition SourceName="PART_Popup" Property="IsOpen" Value="false" />
                </MultiTrigger.Conditions>
                <Setter Value="{DynamicResource SecondaryBorderBrush}" Property="BorderBrush" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition SourceName="templateRoot" Property="UIElement.IsMouseOver" Value="true" />
                    <Condition SourceName="PART_Popup" Property="IsOpen" Value="true" />
                </MultiTrigger.Conditions>
                <Setter Value="{DynamicResource PrimaryBrush}" Property="BorderBrush" />
            </MultiTrigger>
            <Trigger SourceName="PART_TextBox" Property="UIElement.IsFocused" Value="true">
                <Setter TargetName="templateRoot" Value="{DynamicResource PrimaryBrush}" Property="BorderBrush" />
            </Trigger>
            <Trigger SourceName="PART_Popup" Property="IsOpen" Value="True">
                <Setter Value="{DynamicResource PrimaryBrush}" Property="BorderBrush" />
            </Trigger>
        </ControlTemplate.Triggers>
        <Grid>
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition MinHeight="{Binding Path=(hc:InfoElement.MinContentHeight), RelativeSource={RelativeSource TemplatedParent}}" Height="{Binding Path=(hc:InfoElement.ContentHeight), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource Double2GridLengthConverter}}" />
            </Grid.RowDefinitions>
            <DockPanel LastChildFill="True" Margin="{TemplateBinding Padding}" Visibility="{Binding Path=(hc:InfoElement.Title), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource String2VisibilityConverter}}" HorizontalAlignment="{Binding Path=(hc:TitleElement.HorizontalAlignment), RelativeSource={RelativeSource TemplatedParent}}">
                <ContentPresenter DockPanel.Dock="Right" Foreground="{DynamicResource DangerBrush}" Margin="4,0,0,0" Content="{Binding Path=(hc:InfoElement.Symbol), RelativeSource={RelativeSource TemplatedParent}}" Visibility="{Binding Path=(hc:InfoElement.Necessary), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource Boolean2VisibilityConverter}}" />
                <TextBlock AutoTooltip="True" TextWrapping="NoWrap" TextTrimming="CharacterEllipsis" Margin="1,0,1,0" Text="{Binding Path=(hc:InfoElement.Title), RelativeSource={RelativeSource TemplatedParent}}" />
            </DockPanel>
            <Border Name="templateRoot" Grid.Row="1" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}">
                <Grid Name="PART_Root" HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="*" />
                        <ColumnDefinition Width="30" />
                    </Grid.ColumnDefinitions>
                    <Button Name="PART_Button" Height="{x:Static system:Double.NaN}" Style="{StaticResource ButtonIcon}" Padding="7,6" Geometry="{StaticResource ClockGeometry}" Grid.Column="1" Focusable="False" Grid.Row="0" Foreground="{Binding BorderBrush , ElementName=templateRoot}" />
                    <hc:WatermarkTextBox Name="PART_TextBox" CaretBrush="{TemplateBinding CaretBrush}" Foreground="{TemplateBinding Foreground}" Padding="{TemplateBinding Padding}" HorizontalAlignment="Stretch" Grid.Column="0" Focusable="{TemplateBinding Focusable}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" Grid.Row="0" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" Watermark="{Binding Path=(hc:InfoElement.Placeholder), RelativeSource={RelativeSource TemplatedParent}}" />
                    <Popup Name="PART_Popup" Grid.Column="0" PopupAnimation="{StaticResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}" AllowsTransparency="True" Placement="Bottom" StaysOpen="False" PlacementTarget="{Binding ElementName=templateRoot}" />
                </Grid>
            </Border>
        </Grid>
    </ControlTemplate>
    <ControlTemplate x:Key="DateTimePickerExtendLeftTemplate" TargetType="{x:Type hc:DateTimePicker}">
        <ControlTemplate.Triggers>
            <Trigger Property="IsEnabled" Value="false">
                <Setter TargetName="templateRoot" Property="UIElement.Opacity" Value="0.4" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition SourceName="templateRoot" Property="UIElement.IsMouseOver" Value="true" />
                    <Condition SourceName="PART_Popup" Property="IsOpen" Value="false" />
                </MultiTrigger.Conditions>
                <Setter Value="{DynamicResource SecondaryBorderBrush}" Property="BorderBrush" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition SourceName="templateRoot" Property="UIElement.IsMouseOver" Value="true" />
                    <Condition SourceName="PART_Popup" Property="IsOpen" Value="true" />
                </MultiTrigger.Conditions>
                <Setter Value="{DynamicResource PrimaryBrush}" Property="BorderBrush" />
            </MultiTrigger>
            <Trigger SourceName="PART_TextBox" Property="UIElement.IsFocused" Value="true">
                <Setter TargetName="templateRoot" Value="{DynamicResource PrimaryBrush}" Property="BorderBrush" />
            </Trigger>
            <Trigger SourceName="PART_Popup" Property="IsOpen" Value="True">
                <Setter Value="{DynamicResource PrimaryBrush}" Property="BorderBrush" />
            </Trigger>
        </ControlTemplate.Triggers>
        <Grid MinHeight="{Binding Path=(hc:InfoElement.MinContentHeight), RelativeSource={RelativeSource TemplatedParent}}" Height="{Binding Path=(hc:InfoElement.ContentHeight), RelativeSource={RelativeSource TemplatedParent}}">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="{Binding Path=(hc:InfoElement.TitleWidth), RelativeSource={RelativeSource TemplatedParent}}" />
                <ColumnDefinition />
            </Grid.ColumnDefinitions>
            <DockPanel LastChildFill="True" Margin="0,7,6,7" Visibility="{Binding Path=(hc:InfoElement.Title), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource String2VisibilityConverter}}" HorizontalAlignment="{Binding Path=(hc:TitleElement.HorizontalAlignment), RelativeSource={RelativeSource TemplatedParent}}" VerticalAlignment="{Binding Path=(hc:TitleElement.VerticalAlignment), RelativeSource={RelativeSource TemplatedParent}}">
                <ContentPresenter DockPanel.Dock="Right" Foreground="{DynamicResource DangerBrush}" Margin="4,0,0,0" Content="{Binding Path=(hc:InfoElement.Symbol), RelativeSource={RelativeSource TemplatedParent}}" Visibility="{Binding Path=(hc:InfoElement.Necessary), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource Boolean2VisibilityConverter}}" />
                <TextBlock AutoTooltip="True" TextWrapping="NoWrap" TextTrimming="CharacterEllipsis" Text="{Binding Path=(hc:InfoElement.Title), RelativeSource={RelativeSource TemplatedParent}}" />
            </DockPanel>
            <Border Name="templateRoot" Grid.Column="1" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}">
                <Grid Name="PART_Root" HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="*" />
                        <ColumnDefinition Width="30" />
                    </Grid.ColumnDefinitions>
                    <Button Name="PART_Button" Height="{x:Static system:Double.NaN}" Style="{StaticResource ButtonIcon}" Padding="7,6" Geometry="{StaticResource ClockGeometry}" Grid.Column="1" Focusable="False" Grid.Row="0" Foreground="{Binding BorderBrush , ElementName=templateRoot}" />
                    <hc:WatermarkTextBox Name="PART_TextBox" CaretBrush="{TemplateBinding CaretBrush}" Foreground="{TemplateBinding Foreground}" Padding="{TemplateBinding Padding}" HorizontalAlignment="Stretch" Grid.Column="0" Focusable="{TemplateBinding Focusable}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" Grid.Row="0" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" Watermark="{Binding Path=(hc:InfoElement.Placeholder), RelativeSource={RelativeSource TemplatedParent}}" />
                    <Popup Name="PART_Popup" Grid.Column="0" PopupAnimation="{StaticResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}" AllowsTransparency="True" Placement="Bottom" StaysOpen="False" PlacementTarget="{Binding ElementName=templateRoot}" />
                </Grid>
            </Border>
        </Grid>
    </ControlTemplate>
    <Style x:Key="DateTimePickerExtendBaseStyle" BasedOn="{StaticResource DateTimePickerBaseStyle}" TargetType="{x:Type hc:DateTimePicker}">
        <Style.Triggers>
            <Trigger Property="hc:TitleElement.TitlePlacement" Value="Left">
                <Setter Property="Template" Value="{StaticResource DateTimePickerExtendLeftTemplate}" />
                <Setter Property="Width" Value="Auto" />
            </Trigger>
        </Style.Triggers>
        <Setter Property="Height" Value="Auto" />
        <Setter Property="hc:InfoElement.Symbol" Value="●" />
        <Setter Property="hc:InfoElement.ContentHeight" Value="{x:Static system:Double.NaN}" />
        <Setter Property="hc:InfoElement.MinContentHeight" Value="{StaticResource DefaultControlHeight}" />
        <Setter Property="Template" Value="{StaticResource DateTimePickerExtendTopTemplate}" />
    </Style>
    <ControlTemplate x:Key="DateTimePickerPlusTopTemplate" TargetType="{x:Type hc:DateTimePicker}">
        <ControlTemplate.Resources>
            <Storyboard Name="StoryboardShow">
                <ThicknessAnimation TargetName="TextBlockError" TargetProperty="Margin" To="9,0,0,-18" Duration="0:0:.2" />
            </Storyboard>
            <Storyboard Name="StoryboardHidden">
                <ThicknessAnimation TargetName="TextBlockError" TargetProperty="Margin" To="9,0,0,4" Duration="0:0:0" />
            </Storyboard>
        </ControlTemplate.Resources>
        <ControlTemplate.Triggers>
            <Trigger Property="IsEnabled" Value="false">
                <Setter TargetName="templateRoot" Property="UIElement.Opacity" Value="0.4" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition SourceName="templateRoot" Property="UIElement.IsMouseOver" Value="true" />
                    <Condition SourceName="PART_Popup" Property="IsOpen" Value="false" />
                </MultiTrigger.Conditions>
                <Setter Value="{DynamicResource SecondaryBorderBrush}" Property="BorderBrush" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition SourceName="templateRoot" Property="UIElement.IsMouseOver" Value="true" />
                    <Condition SourceName="PART_Popup" Property="IsOpen" Value="true" />
                </MultiTrigger.Conditions>
                <Setter Value="{DynamicResource PrimaryBrush}" Property="BorderBrush" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition SourceName="templateRoot" Property="UIElement.IsMouseOver" Value="true" />
                    <Condition Property="hc:DateTimePicker.ShowClearButton" Value="True" />
                </MultiTrigger.Conditions>
                <Setter TargetName="ButtonClear" Property="Visibility" Value="Visible" />
            </MultiTrigger>
            <Trigger SourceName="PART_TextBox" Property="UIElement.IsFocused" Value="true">
                <Setter TargetName="templateRoot" Value="{DynamicResource PrimaryBrush}" Property="BorderBrush" />
            </Trigger>
            <Trigger SourceName="PART_Popup" Property="IsOpen" Value="True">
                <Setter Value="{DynamicResource PrimaryBrush}" Property="BorderBrush" />
            </Trigger>
            <Trigger Property="hc:DateTimePicker.IsError" Value="true">
                <Trigger.EnterActions>
                    <BeginStoryboard Storyboard="{StaticResource StoryboardShow}" />
                </Trigger.EnterActions>
                <Trigger.ExitActions>
                    <BeginStoryboard Storyboard="{StaticResource StoryboardHidden}" />
                </Trigger.ExitActions>
                <Setter TargetName="templateRoot" Value="{DynamicResource DangerBrush}" Property="BorderBrush" />
            </Trigger>
        </ControlTemplate.Triggers>
        <Grid>
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition MinHeight="{Binding Path=(hc:InfoElement.MinContentHeight), RelativeSource={RelativeSource TemplatedParent}}" Height="{Binding Path=(hc:InfoElement.ContentHeight), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource Double2GridLengthConverter}}" />
            </Grid.RowDefinitions>
            <DockPanel LastChildFill="True" Margin="{TemplateBinding Padding}" Visibility="{Binding Path=(hc:InfoElement.Title), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource String2VisibilityConverter}}" HorizontalAlignment="{Binding Path=(hc:TitleElement.HorizontalAlignment), RelativeSource={RelativeSource TemplatedParent}}">
                <ContentPresenter DockPanel.Dock="Right" Foreground="{DynamicResource DangerBrush}" Margin="4,0,0,0" Content="{Binding Path=(hc:InfoElement.Symbol), RelativeSource={RelativeSource TemplatedParent}}" Visibility="{Binding Path=(hc:InfoElement.Necessary), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource Boolean2VisibilityConverter}}" />
                <TextBlock AutoTooltip="True" TextWrapping="NoWrap" TextTrimming="CharacterEllipsis" Margin="1,0,1,0" Text="{Binding Path=(hc:InfoElement.Title), RelativeSource={RelativeSource TemplatedParent}}" />
            </DockPanel>
            <TextBlock Name="TextBlockError" TextBlock.FontSize="12" Grid.Row="1" Text="{TemplateBinding ErrorStr}" VerticalAlignment="Bottom" Margin="9,0,0,4" Foreground="{DynamicResource DangerBrush}" />
            <Border Name="templateRoot" Grid.Row="1" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}">
                <Grid Name="PART_Root" HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition />
                        <ColumnDefinition Width="Auto" />
                        <ColumnDefinition Width="25" />
                    </Grid.ColumnDefinitions>
                    <Button Name="ButtonClear" Height="{x:Static system:Double.NaN}" Command="interactivity:ControlCommands.Clear" Visibility="Collapsed" Width="16" Grid.Column="1" Style="{StaticResource ButtonIcon}" Padding="0,6" Geometry="{StaticResource DeleteFillCircleGeometry}" Foreground="{Binding BorderBrush , ElementName=templateRoot}" />
                    <Button Name="PART_Button" Height="{x:Static system:Double.NaN}" Style="{StaticResource ButtonIcon}" Padding="2,6,7,6" Geometry="{StaticResource ClockGeometry}" Grid.Column="2" Focusable="False" Grid.Row="0" Foreground="{Binding BorderBrush , ElementName=templateRoot}" />
                    <hc:WatermarkTextBox Name="PART_TextBox" CaretBrush="{TemplateBinding CaretBrush}" Foreground="{TemplateBinding Foreground}" Padding="{TemplateBinding Padding}" HorizontalAlignment="Stretch" Grid.Column="0" Focusable="{TemplateBinding Focusable}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" Grid.Row="0" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" Watermark="{Binding Path=(hc:InfoElement.Placeholder), RelativeSource={RelativeSource TemplatedParent}}" />
                    <Popup Name="PART_Popup" Grid.Column="0" PopupAnimation="{StaticResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}" AllowsTransparency="True" Placement="Bottom" StaysOpen="False" PlacementTarget="{Binding ElementName=templateRoot}" />
                </Grid>
            </Border>
        </Grid>
    </ControlTemplate>
    <ControlTemplate x:Key="DateTimePickerPlusLeftTemplate" TargetType="{x:Type hc:DateTimePicker}">
        <ControlTemplate.Resources>
            <Storyboard Name="StoryboardShow">
                <ThicknessAnimation TargetName="TextBlockError" TargetProperty="Margin" To="9,0,0,-18" Duration="0:0:.2" />
            </Storyboard>
            <Storyboard Name="StoryboardHidden">
                <ThicknessAnimation TargetName="TextBlockError" TargetProperty="Margin" To="9,0,0,4" Duration="0:0:0" />
            </Storyboard>
        </ControlTemplate.Resources>
        <ControlTemplate.Triggers>
            <Trigger Property="IsEnabled" Value="false">
                <Setter TargetName="templateRoot" Property="UIElement.Opacity" Value="0.4" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition SourceName="templateRoot" Property="UIElement.IsMouseOver" Value="true" />
                    <Condition SourceName="PART_Popup" Property="IsOpen" Value="false" />
                </MultiTrigger.Conditions>
                <Setter Value="{DynamicResource SecondaryBorderBrush}" Property="BorderBrush" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition SourceName="templateRoot" Property="UIElement.IsMouseOver" Value="true" />
                    <Condition SourceName="PART_Popup" Property="IsOpen" Value="true" />
                </MultiTrigger.Conditions>
                <Setter Value="{DynamicResource PrimaryBrush}" Property="BorderBrush" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition SourceName="templateRoot" Property="UIElement.IsMouseOver" Value="true" />
                    <Condition Property="hc:DateTimePicker.ShowClearButton" Value="True" />
                </MultiTrigger.Conditions>
                <Setter TargetName="ButtonClear" Property="Visibility" Value="Visible" />
            </MultiTrigger>
            <Trigger SourceName="PART_TextBox" Property="UIElement.IsFocused" Value="true">
                <Setter TargetName="templateRoot" Value="{DynamicResource PrimaryBrush}" Property="BorderBrush" />
            </Trigger>
            <Trigger SourceName="PART_Popup" Property="IsOpen" Value="True">
                <Setter Value="{DynamicResource PrimaryBrush}" Property="BorderBrush" />
            </Trigger>
            <Trigger Property="hc:DateTimePicker.IsError" Value="true">
                <Trigger.EnterActions>
                    <BeginStoryboard Storyboard="{StaticResource StoryboardShow}" />
                </Trigger.EnterActions>
                <Trigger.ExitActions>
                    <BeginStoryboard Storyboard="{StaticResource StoryboardHidden}" />
                </Trigger.ExitActions>
                <Setter TargetName="templateRoot" Value="{DynamicResource DangerBrush}" Property="BorderBrush" />
            </Trigger>
        </ControlTemplate.Triggers>
        <Grid MinHeight="{Binding Path=(hc:InfoElement.MinContentHeight), RelativeSource={RelativeSource TemplatedParent}}" Height="{Binding Path=(hc:InfoElement.ContentHeight), RelativeSource={RelativeSource TemplatedParent}}">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="{Binding Path=(hc:InfoElement.TitleWidth), RelativeSource={RelativeSource TemplatedParent}}" />
                <ColumnDefinition />
            </Grid.ColumnDefinitions>
            <DockPanel LastChildFill="True" Margin="0,7,6,7" Visibility="{Binding Path=(hc:InfoElement.Title), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource String2VisibilityConverter}}" HorizontalAlignment="{Binding Path=(hc:TitleElement.HorizontalAlignment), RelativeSource={RelativeSource TemplatedParent}}" VerticalAlignment="{Binding Path=(hc:TitleElement.VerticalAlignment), RelativeSource={RelativeSource TemplatedParent}}">
                <ContentPresenter DockPanel.Dock="Right" Foreground="{DynamicResource DangerBrush}" Margin="4,0,0,0" Content="{Binding Path=(hc:InfoElement.Symbol), RelativeSource={RelativeSource TemplatedParent}}" Visibility="{Binding Path=(hc:InfoElement.Necessary), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource Boolean2VisibilityConverter}}" />
                <TextBlock AutoTooltip="True" TextWrapping="NoWrap" TextTrimming="CharacterEllipsis" Text="{Binding Path=(hc:InfoElement.Title), RelativeSource={RelativeSource TemplatedParent}}" />
            </DockPanel>
            <TextBlock Name="TextBlockError" TextBlock.FontSize="12" Text="{TemplateBinding ErrorStr}" VerticalAlignment="Bottom" Margin="9,0,0,4" Foreground="{DynamicResource DangerBrush}" Grid.Column="1" />
            <Border Name="templateRoot" Grid.Column="1" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}">
                <Grid Name="PART_Root" HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition />
                        <ColumnDefinition Width="Auto" />
                        <ColumnDefinition Width="25" />
                    </Grid.ColumnDefinitions>
                    <Button Name="ButtonClear" Height="{x:Static system:Double.NaN}" Command="interactivity:ControlCommands.Clear" Visibility="Collapsed" Width="16" Grid.Column="1" Style="{StaticResource ButtonIcon}" Padding="0,6" Geometry="{StaticResource DeleteFillCircleGeometry}" Foreground="{Binding BorderBrush , ElementName=templateRoot}" />
                    <Button Name="PART_Button" Height="{x:Static system:Double.NaN}" Style="{StaticResource ButtonIcon}" Padding="2,6,7,6" Geometry="{StaticResource ClockGeometry}" Grid.Column="2" Focusable="False" Grid.Row="0" Foreground="{Binding BorderBrush , ElementName=templateRoot}" />
                    <hc:WatermarkTextBox Name="PART_TextBox" CaretBrush="{TemplateBinding CaretBrush}" Foreground="{TemplateBinding Foreground}" Padding="{TemplateBinding Padding}" HorizontalAlignment="Stretch" Grid.Column="0" Focusable="{TemplateBinding Focusable}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" Grid.Row="0" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" Watermark="{Binding Path=(hc:InfoElement.Placeholder), RelativeSource={RelativeSource TemplatedParent}}" />
                    <Popup Name="PART_Popup" Grid.Column="0" PopupAnimation="{StaticResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}" AllowsTransparency="True" Placement="Bottom" StaysOpen="False" PlacementTarget="{Binding ElementName=templateRoot}" />
                </Grid>
            </Border>
        </Grid>
    </ControlTemplate>
    <Style x:Key="DateTimePickerPlusBaseStyle" BasedOn="{StaticResource DateTimePickerExtendBaseStyle}" TargetType="{x:Type hc:DateTimePicker}">
        <Style.Triggers>
            <Trigger Property="hc:TitleElement.TitlePlacement" Value="Left">
                <Setter Property="Template" Value="{StaticResource DateTimePickerPlusLeftTemplate}" />
                <Setter Property="Width" Value="Auto" />
            </Trigger>
        </Style.Triggers>
        <Setter Property="hc:DateTimePicker.IsError" Value="{Binding Path=(Validation.HasError), RelativeSource={RelativeSource Self}}" />
        <Setter Property="Template" Value="{StaticResource DateTimePickerPlusTopTemplate}" />
    </Style>
    <Style x:Key="DialogBaseStyle" TargetType="{x:Type hc:Dialog}">
        <Setter Property="Focusable" Value="False" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type hc:Dialog}">
                    <Border Background="{DynamicResource DarkOpacityBrush}">
                        <ContentPresenter Margin="{TemplateBinding Padding}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="DividerBaseStyle" TargetType="{x:Type hc:Divider}">
        <Style.Triggers>
            <Trigger Property="hc:Divider.Content" Value="{x:Null}">
                <Setter Property="Padding" Value="0" />
            </Trigger>
            <Trigger Property="hc:Divider.Orientation" Value="Vertical">
                <Setter Property="Margin" Value="6,0" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type hc:Divider}">
                            <Line HorizontalAlignment="Center" StrokeDashArray="{TemplateBinding LineStrokeDashArray}" Stroke="{TemplateBinding LineStroke}" Y2="1" StrokeThickness="{TemplateBinding LineStrokeThickness}" Stretch="Fill" StrokeEndLineCap="Square" StrokeStartLineCap="Square" />
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
        <Setter Property="Focusable" Value="False" />
        <Setter Property="Margin" Value="0,24" />
        <Setter Property="Padding" Value="24,0" />
        <Setter Property="hc:Divider.LineStroke" Value="{DynamicResource BorderBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource PrimaryTextBrush}" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type hc:Divider}">
                    <ControlTemplate.Triggers>
                        <Trigger Value="{x:Null}" Property="hc:Divider.Content">
                            <Setter Property="Padding" Value="0" />
                        </Trigger>
                        <Trigger Property="HorizontalContentAlignment" Value="Left">
                            <Setter TargetName="ColStart" Property="hc:Col.Layout" Value="0" />
                            <Setter TargetName="ColStart" Property="hc:Col.IsFixed" Value="True" />
                            <Setter TargetName="ColStart" Property="Width" Value="20" />
                            <Setter TargetName="ColEnd" Property="hc:Col.Layout" Value="24" />
                        </Trigger>
                        <Trigger Property="HorizontalContentAlignment" Value="Right">
                            <Setter TargetName="ColEnd" Property="hc:Col.Layout" Value="0" />
                            <Setter TargetName="ColEnd" Property="hc:Col.IsFixed" Value="True" />
                            <Setter TargetName="ColEnd" Property="Width" Value="20" />
                            <Setter TargetName="ColStart" Property="hc:Col.Layout" Value="24" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                    <hc:Row>
                        <hc:Col Name="ColStart" Layout="12">
                            <Line VerticalAlignment="Center" StrokeDashArray="{TemplateBinding LineStrokeDashArray}" Stroke="{TemplateBinding LineStroke}" X2="1" StrokeThickness="{TemplateBinding LineStrokeThickness}" Stretch="Fill" StrokeEndLineCap="Square" StrokeStartLineCap="Square" />
                        </hc:Col>
                        <hc:Col Layout="0">
                            <ContentPresenter Margin="{TemplateBinding Padding}" ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}" ContentStringFormat="{TemplateBinding ContentStringFormat}" ContentTemplate="{TemplateBinding ContentTemplate}" />
                        </hc:Col>
                        <hc:Col Name="ColEnd" Layout="12">
                            <Line VerticalAlignment="Center" StrokeDashArray="{TemplateBinding LineStrokeDashArray}" Stroke="{TemplateBinding LineStroke}" X2="1" StrokeThickness="{TemplateBinding LineStrokeThickness}" Stretch="Fill" StrokeEndLineCap="Square" StrokeStartLineCap="Square" />
                        </hc:Col>
                    </hc:Row>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="DrawerBaseStyle" TargetType="{x:Type hc:Drawer}">
        <Setter Property="hc:Drawer.Dock" Value="Right" />
        <Setter Property="hc:Drawer.MaskBrush" Value="{DynamicResource DarkOpacityBrush}" />
    </Style>
    <DrawingBrush x:Key="EmptySimpleLogo" PresentationOptions:Freeze="True">
        <DrawingBrush.Drawing>
            <DrawingGroup PresentationOptions:Freeze="True">
                <GeometryDrawing PresentationOptions:Freeze="True" Brush="{DynamicResource SecondaryRegionBrush}" Geometry="F1 M 1638,1024 0,0 0,844,8 C 0,942,250667 361,096533,1021,269333 806,536533,1021,269333 1251,976533,1021,269333 1613,038933,942,250666 1613,038933,844,8 1613,038933,747,383467 1251,9424,668,398933 806,536533,668,398933 361,096533,668,398933 0,747,383467 0,844,8 Z" />
                <GeometryDrawing PresentationOptions:Freeze="True" Brush="{DynamicResource BorderBrush}" Geometry="F1 M 1638,1024 0,0 1398,784,580,164267 L 214,254933,580,164267 214,254933,330,6496 473,873067,35,771733 C 486,4,13,1072 509,1328,0,477867 531,797333,0,477867 L 1081,2416,0,477867 C 1103,940267,0,477867 1126,638933,13,1072 1141,725867,38,2976 L 1398,818133,330,6496 1398,818133,580,164267 M 239,479467,555,008 L 1373,627733,555,008 1373,627733,338,261333 1121,553067,50,858667 C 1108,992,33,245867 1096,362667,23,210667 1081,2416,23,210667 L 531,797333,23,210667 C 516,676266,23,210667 504,081066,33,28 493,9776,48,401067 L 239,445333,340,753067 239,445333,554,973867 Z" />
                <GeometryDrawing PresentationOptions:Freeze="True" Brush="{DynamicResource SecondaryRegionBrush}" Geometry="F1 M 1638,1024 0,0 1048,4736,413,832533 C 1048,4736,373,521066 1073,664,340,753066 1103,940267,340,753067 L 1386,222933,340,753067 1386,222933,796,945067 C 1386,222933,849,851734 1353,454933,895,249067 1310,583467,895,249067 L 302,455467,895,249067 C 262,109867,895,249067 226,850134,852,3776 226,850133,796,945067 L 226,850133,340,753067 509,1328,340,753067 C 539,374933,340,753067 564,565333,373,521067 564,565333,413,832533 564,565333,454,143999 589,755733,486,912 619,997867,486,912 L 993,041067,486,912 C 1023,2832,489,437867 1048,4736,454,144 1048,4736,413,832533 Z" />
                <GeometryDrawing PresentationOptions:Freeze="True" Brush="{DynamicResource BorderBrush}" Geometry="F1 M 1638,1024 0,0 1310,583467,907,844267 L 302,455467,907,844267 C 254,5664,907,844267 214,2208,857,429334 214,2208,796,910933 L 214,2208,328,192 509,1328,328,192 C 546,9184,328,192 577,160533,365,9776 577,160533,413,866667 577,160533,446,634667 597,2992,474,350934 619,997867,474,350933 L 993,041067,474,350933 C 1015,7056,474,350933 1035,8784,446,634666 1035,8784,413,866667 1035,8784,365,9776 1066,120533,328,192 1103,940267,328,192 L 1398,818133,328,192 1398,818133,796,9792 C 1398,818133,857,463467 1360,9984,907,8784 1310,583467,907,8784 M 239,445333,353,348267 L 239,445333,796,945067 C 239,445333,844,834134 267,1616,882,619734 302,455467,882,619733 L 1310,583467,882,619733 C 1345,877334,882,619733 1373,5936,844,834133 1373,5936,796,945067 L 1373,5936,353,348267 1103,940267,353,348267 C 1081,2416,353,348267 1061,0688,381,064534 1061,0688,413,832533 1061,0688,461,7216 1030,826667,499,5072 993,041067,499,5072 L 619,997867,499,5072 C 582,212267,499,5072 551,970134,461,7216 551,970133,413,832533 551,970133,381,064533 531,831466,350,8224 509,1328,350,8224 L 239,445333,350,8224 239,445333,353,348267 Z" />
            </DrawingGroup>
        </DrawingBrush.Drawing>
    </DrawingBrush>
    <Rectangle x:Key="LogoRectangle4Empty" HorizontalAlignment="Center" Width="64" Height="41" Fill="{StaticResource EmptySimpleLogo}" />
    <TextBlock x:Key="DescriptionTextBlock4Empty" Margin="0,10,0,0" HorizontalAlignment="Center" Foreground="{DynamicResource ThirdlyTextBrush}" Text="{ex:Lang Key={x:Static langs:LangKeys.NoData}}" />
    <Style x:Key="EmptyBaseStyle" TargetType="{x:Type hc:Empty}">
        <Setter Property="hc:Empty.Logo" Value="{StaticResource LogoRectangle4Empty}" />
        <Setter Property="hc:Empty.Description" Value="{StaticResource DescriptionTextBlock4Empty}" />
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="Visibility" Value="{Binding Path=(hc:Empty.ShowEmpty), RelativeSource={RelativeSource Self}, Converter={StaticResource Boolean2VisibilityConverter}}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type hc:Empty}">
                    <hc:SimpleStackPanel>
                        <ContentPresenter ContentSource="Logo" />
                        <ContentPresenter ContentSource="Description" />
                        <ContentPresenter HorizontalAlignment="Center" />
                    </hc:SimpleStackPanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <ControlTemplate x:Key="ExpanderLeftTemplate" TargetType="{x:Type Expander}">
        <ControlTemplate.Triggers>
            <Trigger Property="Expander.IsExpanded" Value="true">
                <Setter TargetName="BorderHeader" Value="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource CornerRadiusSplitConverter}, ConverterParameter=0,1,1,0}" Property="Border.CornerRadius" />
                <Setter TargetName="ExpandSite" Property="Visibility" Value="Visible" />
                <Setter TargetName="PathArrow" Value="{StaticResource DownGeometry}" Property="Data" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="UIElement.Opacity" Value=".4" />
            </Trigger>
        </ControlTemplate.Triggers>
        <Grid>
            <Grid.ColumnDefinitions>
                <ColumnDefinition />
                <ColumnDefinition Width="Auto" />
            </Grid.ColumnDefinitions>
            <Border Name="BorderHeader" Grid.Column="1" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}">
                <ToggleButton VerticalAlignment="Stretch" VerticalContentAlignment="Stretch" Focusable="False" Padding="0,0,0,10" Foreground="{TemplateBinding Foreground}" MinWidth="{TemplateBinding MinWidth}" Style="{StaticResource ToggleButtonCustom}" IsChecked="{Binding IsExpanded , Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition />
                            <ColumnDefinition Width="32" />
                        </Grid.ColumnDefinitions>
                        <Grid.LayoutTransform>
                            <TransformGroup>
                                <RotateTransform Angle="-90" />
                            </TransformGroup>
                        </Grid.LayoutTransform>
                        <ContentPresenter ContentSource="Header" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                        <Path Name="PathArrow" IsHitTestVisible="False" Grid.Column="1" Stretch="Uniform" Fill="{TemplateBinding Foreground}" Data="{StaticResource UpGeometry}" Margin="0,0,10,0" Width="12" Height="12" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalAlignment="Right" />
                    </Grid>
                </ToggleButton>
            </Border>
            <ContentPresenter Name="ExpandSite" Visibility="Collapsed" Grid.Column="0" />
        </Grid>
    </ControlTemplate>
    <ControlTemplate x:Key="ExpanderUpTemplate" TargetType="{x:Type Expander}">
        <ControlTemplate.Triggers>
            <Trigger Property="Expander.IsExpanded" Value="true">
                <Setter TargetName="BorderHeader" Value="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource CornerRadiusSplitConverter}, ConverterParameter=0,0,1,1}" Property="Border.CornerRadius" />
                <Setter TargetName="ExpandSite" Property="Visibility" Value="Visible" />
                <Setter TargetName="PathArrow" Value="{StaticResource DownGeometry}" Property="Data" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="UIElement.Opacity" Value=".4" />
            </Trigger>
        </ControlTemplate.Triggers>
        <Grid>
            <Grid.RowDefinitions>
                <RowDefinition />
                <RowDefinition Height="Auto" />
            </Grid.RowDefinitions>
            <Border Name="BorderHeader" Grid.Row="1" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}">
                <ToggleButton HorizontalAlignment="Stretch" HorizontalContentAlignment="Stretch" Focusable="False" Padding="10,0,0,0" Foreground="{TemplateBinding Foreground}" MinHeight="{TemplateBinding MinHeight}" Style="{StaticResource ToggleButtonCustom}" IsChecked="{Binding IsExpanded , Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition />
                            <ColumnDefinition Width="32" />
                        </Grid.ColumnDefinitions>
                        <ContentPresenter ContentSource="Header" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                        <Path Name="PathArrow" IsHitTestVisible="False" Grid.Column="1" Stretch="Uniform" Fill="{TemplateBinding Foreground}" Data="{StaticResource UpGeometry}" Margin="0,0,10,0" Width="12" Height="12" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalAlignment="Right" />
                    </Grid>
                </ToggleButton>
            </Border>
            <ContentPresenter Name="ExpandSite" Visibility="Collapsed" Grid.Row="0" />
        </Grid>
    </ControlTemplate>
    <ControlTemplate x:Key="ExpanderRightTemplate" TargetType="{x:Type Expander}">
        <ControlTemplate.Triggers>
            <Trigger Property="Expander.IsExpanded" Value="true">
                <Setter TargetName="BorderHeader" Value="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource CornerRadiusSplitConverter}, ConverterParameter=1,0,0,1}" Property="Border.CornerRadius" />
                <Setter TargetName="ExpandSite" Property="Visibility" Value="Visible" />
                <Setter TargetName="PathArrow" Value="{StaticResource UpGeometry}" Property="Data" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="UIElement.Opacity" Value=".4" />
            </Trigger>
        </ControlTemplate.Triggers>
        <Grid>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition />
            </Grid.ColumnDefinitions>
            <Border Name="BorderHeader" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}">
                <ToggleButton VerticalAlignment="Stretch" VerticalContentAlignment="Stretch" Focusable="False" Padding="0,0,0,10" Foreground="{TemplateBinding Foreground}" MinWidth="{TemplateBinding MinWidth}" Style="{StaticResource ToggleButtonCustom}" IsChecked="{Binding IsExpanded , Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition />
                            <ColumnDefinition Width="32" />
                        </Grid.ColumnDefinitions>
                        <Grid.LayoutTransform>
                            <TransformGroup>
                                <RotateTransform Angle="-90" />
                            </TransformGroup>
                        </Grid.LayoutTransform>
                        <ContentPresenter ContentSource="Header" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                        <Path Name="PathArrow" IsHitTestVisible="False" Grid.Column="1" Stretch="Uniform" Fill="{TemplateBinding Foreground}" Data="{StaticResource DownGeometry}" Margin="0,0,10,0" Width="12" Height="12" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalAlignment="Right" />
                    </Grid>
                </ToggleButton>
            </Border>
            <ContentPresenter Name="ExpandSite" Visibility="Collapsed" Grid.Column="1" />
        </Grid>
    </ControlTemplate>
    <ControlTemplate x:Key="ExpanderDownTemplate" TargetType="{x:Type Expander}">
        <ControlTemplate.Triggers>
            <Trigger Property="Expander.IsExpanded" Value="true">
                <Setter TargetName="BorderHeader" Value="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource CornerRadiusSplitConverter}, ConverterParameter=1,1,0,0}" Property="Border.CornerRadius" />
                <Setter TargetName="ExpandSite" Property="Visibility" Value="Visible" />
                <Setter TargetName="PathArrow" Value="{StaticResource UpGeometry}" Property="Data" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="UIElement.Opacity" Value=".4" />
            </Trigger>
        </ControlTemplate.Triggers>
        <Grid>
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition />
            </Grid.RowDefinitions>
            <Border Name="BorderHeader" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}">
                <ToggleButton HorizontalAlignment="Stretch" HorizontalContentAlignment="Stretch" Focusable="False" Padding="10,0,0,0" Foreground="{TemplateBinding Foreground}" Width="{TemplateBinding Width}" Height="{TemplateBinding MinHeight}" Style="{StaticResource ToggleButtonCustom}" IsChecked="{Binding IsExpanded , Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition />
                            <ColumnDefinition Width="32" />
                        </Grid.ColumnDefinitions>
                        <ContentPresenter ContentSource="Header" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                        <Path Name="PathArrow" IsHitTestVisible="False" Grid.Column="1" Stretch="Uniform" Fill="{TemplateBinding Foreground}" Data="{StaticResource DownGeometry}" Margin="0,0,10,0" Width="12" Height="12" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalAlignment="Right" />
                    </Grid>
                </ToggleButton>
            </Border>
            <ContentPresenter Name="ExpandSite" Visibility="Collapsed" Grid.Row="1" />
        </Grid>
    </ControlTemplate>
    <Style x:Key="ExpanderBaseStyle" TargetType="{x:Type Expander}">
        <Style.Triggers>
            <Trigger Property="Expander.ExpandDirection" Value="Left">
                <Setter Property="Template" Value="{StaticResource ExpanderLeftTemplate}" />
            </Trigger>
            <Trigger Property="Expander.ExpandDirection" Value="Up">
                <Setter Property="Template" Value="{StaticResource ExpanderUpTemplate}" />
            </Trigger>
            <Trigger Property="Expander.ExpandDirection" Value="Right">
                <Setter Property="Template" Value="{StaticResource ExpanderRightTemplate}" />
            </Trigger>
        </Style.Triggers>
        <Setter Property="Foreground" Value="{DynamicResource PrimaryTextBrush}" />
        <Setter Property="Background" Value="{DynamicResource SecondaryRegionBrush}" />
        <Setter Property="HorizontalContentAlignment" Value="Left" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="MinHeight" Value="{StaticResource DefaultControlHeight}" />
        <Setter Property="MinWidth" Value="{StaticResource DefaultControlHeight}" />
        <Setter Property="hc:BorderElement.CornerRadius" Value="{StaticResource DefaultCornerRadius}" />
        <Setter Property="Template" Value="{StaticResource ExpanderDownTemplate}" />
    </Style>
    <Style x:Key="FlowDocumentScrollViewerBaseStyle" TargetType="{x:Type FlowDocumentScrollViewer}">
        <Setter Property="hc:BorderElement.CornerRadius" Value="{StaticResource DefaultCornerRadius}" />
        <Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Background" Value="{DynamicResource RegionBrush}" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="VerticalContentAlignment" Value="Stretch" />
        <Setter Property="KeyboardNavigation.TabNavigation" Value="Local" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type FlowDocumentScrollViewer}">
                    <DockPanel Background="{TemplateBinding Background}" LastChildFill="True">
                        <Grid Name="PART_ToolBarHost" ZIndex="1" DockPanel.Dock="Bottom" Margin="0,6">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*" />
                                <ColumnDefinition Width="*" />
                            </Grid.ColumnDefinitions>
                            <Border Name="PART_FindToolBarHost" Grid.Column="0" HorizontalAlignment="Left" Visibility="Collapsed" VerticalAlignment="Center" />
                            <Grid Grid.Column="1" HorizontalAlignment="Right" VerticalAlignment="Center">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="Auto" />
                                    <ColumnDefinition />
                                    <ColumnDefinition Width="Auto" />
                                </Grid.ColumnDefinitions>
                                <RepeatButton Height="20" Width="20" Padding="5,8" CornerRadius="10" Geometry="{StaticResource SubGeometry}" Grid.Column="0" Command="NavigationCommands.DecreaseZoom" IsEnabled="{TemplateBinding CanDecreaseZoom}" ToolTip="{x:Static langs:Lang.ZoomOut}" />
                                <Slider Visibility="Visible" Placement="Top" Grid.Column="1" HorizontalAlignment="Stretch" LargeChange="{TemplateBinding ZoomIncrement}" Maximum="{TemplateBinding MaxZoom}" Minimum="{TemplateBinding MinZoom}" SmallChange="{TemplateBinding ZoomIncrement}" TickFrequency="{TemplateBinding ZoomIncrement}" VerticalAlignment="Center" Width="180" Value="{Binding Zoom , Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" />
                                <RepeatButton Height="20" Width="20" Padding="4" CornerRadius="10" Geometry="{StaticResource AddGeometry}" Grid.Column="2" Command="NavigationCommands.IncreaseZoom" IsEnabled="{TemplateBinding CanIncreaseZoom}" ToolTip="{x:Static langs:Lang.ZoomIn}" />
                            </Grid>
                        </Grid>
                        <Border ZIndex="0" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Margin="{TemplateBinding Padding}" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}">
                            <ScrollViewer Name="PART_ContentHost" ScrollViewer.CanContentScroll="True" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                        </Border>
                    </DockPanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="FlowDocumentPageViewerBaseStyle" TargetType="{x:Type FlowDocumentPageViewer}">
        <Setter Property="hc:BorderElement.CornerRadius" Value="{StaticResource DefaultCornerRadius}" />
        <Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Background" Value="{DynamicResource RegionBrush}" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="VerticalContentAlignment" Value="Stretch" />
        <Setter Property="KeyboardNavigation.TabNavigation" Value="Local" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type FlowDocumentPageViewer}">
                    <DockPanel Background="{TemplateBinding Background}" LastChildFill="True">
                        <Grid ZIndex="1" DockPanel.Dock="Bottom" HorizontalAlignment="Stretch" Margin="0,6">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*" />
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition Width="*" />
                            </Grid.ColumnDefinitions>
                            <Border Name="PART_FindToolBarHost" Grid.Column="0" HorizontalAlignment="Left" Visibility="Collapsed" VerticalAlignment="Center" />
                            <StackPanel Grid.Column="1" HorizontalAlignment="Center" Orientation="Horizontal" VerticalAlignment="Center">
                                <RepeatButton Height="20" Width="20" Padding="4" CornerRadius="10" Geometry="{StaticResource LeftGeometry}" Command="NavigationCommands.PreviousPage" IsEnabled="{TemplateBinding CanGoToPreviousPage}" ToolTip="{x:Static langs:Lang.PreviousPage}" />
                                <TextBlock HorizontalAlignment="Center" VerticalAlignment="Center">
                                    <Run Text=" " />
                                     <InlineUIContainer>
                                        <TextBlock Text="{Binding MasterPageNumber , RelativeSource={RelativeSource TemplatedParent}}" />
                                    </InlineUIContainer>
                                     <Run Text=" " />
                                     <Run Text="/" />
                                     <Run Text=" " />
                                     <InlineUIContainer>
                                        <TextBlock Text="{Binding PageCount , RelativeSource={RelativeSource TemplatedParent}}" />
                                    </InlineUIContainer>
                                     <Run Text=" " />
                                </TextBlock>
                                <RepeatButton Height="20" Width="20" Padding="4" CornerRadius="10" Geometry="{StaticResource RightGeometry}" Command="NavigationCommands.NextPage" IsEnabled="{TemplateBinding CanGoToNextPage}" ToolTip="{x:Static langs:Lang.NextPage}" />
                            </StackPanel>
                            <Grid Grid.Column="2" VerticalAlignment="Center" Margin="32,0,0,0">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="Auto" />
                                    <ColumnDefinition />
                                    <ColumnDefinition Width="Auto" />
                                </Grid.ColumnDefinitions>
                                <RepeatButton Height="20" Width="20" Padding="5,8" CornerRadius="10" Geometry="{StaticResource SubGeometry}" Grid.Column="0" Command="NavigationCommands.DecreaseZoom" IsEnabled="{TemplateBinding CanDecreaseZoom}" ToolTip="{x:Static langs:Lang.ZoomOut}" />
                                <Slider Visibility="Visible" Placement="Top" Grid.Column="1" HorizontalAlignment="Stretch" LargeChange="{TemplateBinding ZoomIncrement}" Maximum="{TemplateBinding MaxZoom}" Minimum="{TemplateBinding MinZoom}" SmallChange="{TemplateBinding ZoomIncrement}" TickFrequency="{TemplateBinding ZoomIncrement}" VerticalAlignment="Center" Value="{Binding Zoom , Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" />
                                <RepeatButton Height="20" Width="20" Padding="4" CornerRadius="10" Geometry="{StaticResource AddGeometry}" Grid.Column="2" Command="NavigationCommands.IncreaseZoom" IsEnabled="{TemplateBinding CanIncreaseZoom}" ToolTip="{x:Static langs:Lang.ZoomIn}" />
                            </Grid>
                        </Grid>
                        <Border ZIndex="0" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Margin="{TemplateBinding Padding}" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}">
                            <AdornerDecorator>
                                <DocumentPageView HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" IsTabStop="False" IsMasterPage="True" PageNumber="0" TabIndex="1" TabNavigation="Local" DocumentPaginator="{x:Null}" />
                            </AdornerDecorator>
                        </Border>
                    </DockPanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="FlowDocumentReaderBaseStyle" TargetType="{x:Type FlowDocumentReader}">
        <Setter Property="hc:BorderElement.CornerRadius" Value="{StaticResource DefaultCornerRadius}" />
        <Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Background" Value="{DynamicResource RegionBrush}" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="VerticalContentAlignment" Value="Stretch" />
        <Setter Property="KeyboardNavigation.TabNavigation" Value="Local" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type FlowDocumentReader}">
                    <ControlTemplate.Triggers>
                        <Trigger Property="FlowDocumentReader.ViewingMode" Value="Page">
                            <Setter TargetName="PageViewButton" Property="ToggleButton.IsChecked" Value="True" />
                        </Trigger>
                        <Trigger Property="FlowDocumentReader.ViewingMode" Value="TwoPage">
                            <Setter TargetName="TwoPageViewButton" Property="ToggleButton.IsChecked" Value="True" />
                            <Setter Property="BorderThickness" Value="0" />
                        </Trigger>
                        <Trigger Property="FlowDocumentReader.ViewingMode" Value="Scroll">
                            <Setter TargetName="ScrollViewButton" Property="ToggleButton.IsChecked" Value="True" />
                            <Setter TargetName="PageCountAndButtons" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                        <Trigger Value="{x:Null}" Property="Document">
                            <Setter TargetName="FindButton" Property="IsEnabled" Value="False" />
                        </Trigger>
                        <Trigger Property="FlowDocumentReader.IsFindEnabled" Value="False">
                            <Setter TargetName="FindButton" Property="IsEnabled" Value="False" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                    <DockPanel Background="{TemplateBinding Background}" LastChildFill="True">
                        <Grid ZIndex="1" DockPanel.Dock="Bottom" HorizontalAlignment="Stretch" Margin="0,6">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*" />
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition Width="*" />
                            </Grid.ColumnDefinitions>
                            <StackPanel Orientation="Horizontal">
                                <ToggleButton Name="FindButton" Width="24" Height="24" Padding="5" Geometry="{StaticResource SearchGeometry}" Command="ApplicationCommands.Find" Margin="0,0,10,0" ToolTip="{x:Static langs:Lang.Find}" />
                                <Border Name="PART_FindToolBarHost" HorizontalAlignment="Left" Visibility="Collapsed" VerticalAlignment="Center" />
                            </StackPanel>
                            <StackPanel Name="PageCountAndButtons" Grid.Column="1" HorizontalAlignment="Center" Orientation="Horizontal" VerticalAlignment="Center">
                                <RepeatButton Height="20" Width="20" Padding="4" CornerRadius="10" Geometry="{StaticResource LeftGeometry}" Command="NavigationCommands.PreviousPage" IsEnabled="{TemplateBinding CanGoToPreviousPage}" ToolTip="{x:Static langs:Lang.PreviousPage}" />
                                <TextBlock HorizontalAlignment="Center" VerticalAlignment="Center">
                                    <Run Text=" " />
                                     <InlineUIContainer>
                                        <TextBlock Text="{Binding PageNumber , RelativeSource={RelativeSource TemplatedParent}}" />
                                    </InlineUIContainer>
                                     <Run Text=" " />
                                     <Run Text="/" />
                                     <Run Text=" " />
                                     <InlineUIContainer>
                                        <TextBlock Text="{Binding PageCount , RelativeSource={RelativeSource TemplatedParent}}" />
                                    </InlineUIContainer>
                                     <Run Text=" " />
                                </TextBlock>
                                <RepeatButton Height="20" Width="20" Padding="4" CornerRadius="10" Geometry="{StaticResource RightGeometry}" Command="NavigationCommands.NextPage" IsEnabled="{TemplateBinding CanGoToNextPage}" ToolTip="{x:Static langs:Lang.NextPage}" />
                            </StackPanel>
                            <Grid Grid.Column="2" Margin="32,0,0,0" VerticalAlignment="Center">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="Auto" />
                                    <ColumnDefinition Width="Auto" />
                                    <ColumnDefinition />
                                    <ColumnDefinition Width="Auto" />
                                </Grid.ColumnDefinitions>
                                <hc:ButtonGroup Width="90">
                                    <RadioButton Name="PageViewButton" Padding="0" Geometry="{StaticResource PageModeGeometry}" CommandParameter="Page" Command="FlowDocumentReader.SwitchViewingModeCommand" GroupName="ViewingMode" IsEnabled="{TemplateBinding IsPageViewEnabled}" ToolTip="{x:Static langs:Lang.PageMode}" />
                                    <RadioButton Name="TwoPageViewButton" Geometry="{StaticResource TwoPageModeGeometry}" Padding="0" CommandParameter="TwoPage" Command="FlowDocumentReader.SwitchViewingModeCommand" GroupName="ViewingMode" IsEnabled="{TemplateBinding IsTwoPageViewEnabled}" ToolTip="{x:Static langs:Lang.TwoPageMode}" />
                                    <RadioButton Name="ScrollViewButton" Geometry="{StaticResource ScrollModeGeometry}" Padding="0" CommandParameter="Scroll" Command="FlowDocumentReader.SwitchViewingModeCommand" GroupName="ViewingMode" IsEnabled="{TemplateBinding IsScrollViewEnabled}" ToolTip="{x:Static langs:Lang.ScrollMode}" />
                                </hc:ButtonGroup>
                                <RepeatButton Margin="32,0,0,0" Height="20" Width="20" Padding="5,8" CornerRadius="10" Geometry="{StaticResource SubGeometry}" Grid.Column="1" Command="NavigationCommands.DecreaseZoom" IsEnabled="{TemplateBinding CanDecreaseZoom}" ToolTip="{x:Static langs:Lang.ZoomOut}" />
                                <Slider Visibility="Visible" Placement="Top" Grid.Column="2" HorizontalAlignment="Stretch" LargeChange="{TemplateBinding ZoomIncrement}" Maximum="{TemplateBinding MaxZoom}" Minimum="{TemplateBinding MinZoom}" SmallChange="{TemplateBinding ZoomIncrement}" TickFrequency="{TemplateBinding ZoomIncrement}" VerticalAlignment="Center" Value="{Binding Zoom , Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" />
                                <RepeatButton Height="20" Width="20" Padding="4" CornerRadius="10" Geometry="{StaticResource AddGeometry}" Grid.Column="3" Command="NavigationCommands.IncreaseZoom" IsEnabled="{TemplateBinding CanIncreaseZoom}" ToolTip="{x:Static langs:Lang.ZoomIn}" />
                            </Grid>
                        </Grid>
                        <Border Name="PART_ContentHost" ZIndex="0" IsTabStop="False" TabIndex="1" TabNavigation="Local" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Margin="{TemplateBinding Padding}" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}" />
                    </DockPanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="MenuItem4FrameStyle" BasedOn="{StaticResource MenuItemBaseStyle}" TargetType="{x:Type MenuItem}">
        <Setter Property="Header" Value="{Binding (JournalEntry.Name)}" />
        <Setter Property="MenuItem.Command" Value="NavigationCommands.NavigateJournal" />
        <Setter Property="MenuItem.CommandTarget" Value="{Binding TemplatedParent , RelativeSource={RelativeSource AncestorType=ContextMenu}}" />
        <Setter Property="MenuItem.CommandParameter" Value="{Binding RelativeSource={RelativeSource Self}}" />
    </Style>
    <ControlTemplate x:Key="FrameWithNavigationUIStyle" TargetType="{x:Type Frame}">
        <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}">
            <DockPanel LastChildFill="True">
                <Border DockPanel.Dock="Top" BorderThickness="0,0,0,1" BorderBrush="{TemplateBinding BorderBrush}" Background="{DynamicResource DarkDefaultBrush}" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource CornerRadiusSplitConverter}, ConverterParameter=1,1,0,0}">
                    <hc:ButtonGroup Name="NavChrome" Width="90" Margin="10,6" HorizontalAlignment="Left">
                        <Button Padding="6" Geometry="{StaticResource LeftGeometry}" Command="NavigationCommands.BrowseBack" ContextMenu="{ContextMenu Name=BackNavMenu, ItemContainerStyle={StaticResource MenuItem4FrameStyle}, ItemsSource={Binding Path=(NavigationWindow.BackStack), RelativeSource={RelativeSource TemplatedParent}}}" />
                        <Button Padding="6" Geometry="{StaticResource RightGeometry}" Command="NavigationCommands.BrowseForward" ContextMenu="{ContextMenu Name=ForwardNavMenu, ItemContainerStyle={StaticResource MenuItem4FrameStyle}, ItemsSource={Binding Path=(NavigationWindow.ForwardStack), RelativeSource={RelativeSource TemplatedParent}}}" />
                        <Button Padding="6" Geometry="{StaticResource RotateRightGeometry}" Command="NavigationCommands.Refresh" />
                    </hc:ButtonGroup>
                </Border>
                <ContentPresenter Name="PART_NavWinCP" SnapsToDevicePixels="True" ClipToBounds="true" />
            </DockPanel>
        </Border>
    </ControlTemplate>
    <Style x:Key="FrameBaseStyle" TargetType="{x:Type Frame}">
        <Style.Triggers>
            <Trigger Property="Frame.NavigationUIVisibility" Value="Visible">
                <Setter Property="Template" Value="{StaticResource FrameWithNavigationUIStyle}" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="Frame.JournalOwnership" Value="OwnsJournal" />
                    <Condition Property="Frame.NavigationUIVisibility" Value="Automatic" />
                </MultiTrigger.Conditions>
                <Setter Property="Template" Value="{StaticResource FrameWithNavigationUIStyle}" />
            </MultiTrigger>
        </Style.Triggers>
        <Setter Property="hc:BorderElement.CornerRadius" Value="{StaticResource DefaultCornerRadius}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Frame}">
                    <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}">
                        <ContentPresenter Name="PART_FrameCP" SnapsToDevicePixels="True" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="GotoTopBaseStyle" BasedOn="{StaticResource ButtonBaseStyle}" TargetType="{x:Type hc:GotoTop}">
        <Style.Triggers>
            <Trigger Property="UIElement.IsMouseOver" Value="True">
                <Setter Property="Background" Value="{DynamicResource SecondaryRegionBrush}" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background" Value="{DynamicResource BorderBrush}" />
            </Trigger>
        </Style.Triggers>
        <Setter Property="Width" Value="50" />
        <Setter Property="Height" Value="50" />
        <Setter Property="hc:BorderElement.CornerRadius" Value="25" />
        <Setter Property="hc:IconElement.Geometry" Value="{StaticResource UpGeometry}" />
        <Setter Property="Foreground" Value="{DynamicResource PrimaryTextBrush}" />
        <Setter Property="Padding" Value="16" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="FrameworkElement.FocusVisualStyle">
            <Setter.Value>
                <Style>
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate>
                                <Rectangle Style="{StaticResource RectangleFocusVisualCircular}" />
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="GravatarBaseStyle" TargetType="{x:Type hc:Gravatar}">
        <Setter Property="Focusable" Value="False" />
        <Setter Property="Width" Value="72" />
        <Setter Property="Height" Value="72" />
        <Setter Property="Background" Value="{DynamicResource SecondaryRegionBrush}" />
        <Setter Property="hc:BorderElement.CornerRadius" Value="{StaticResource DefaultCornerRadius}" />
        <Setter Property="Padding" Value="6" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type hc:Gravatar}">
                    <Border ClipToBounds="True" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}">
                        <ContentPresenter Margin="{TemplateBinding Padding}" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ImageSelectorBaseStyle" TargetType="{x:Type hc:ImageSelector}">
        <Style.Triggers>
            <Trigger Property="UIElement.IsMouseOver" Value="True">
                <Setter Property="Background" Value="{DynamicResource SecondaryRegionBrush}" />
                <Setter Property="BorderBrush" Value="{DynamicResource PrimaryBrush}" />
            </Trigger>
        </Style.Triggers>
        <Setter Property="Focusable" Value="False" />
        <Setter Property="hc:ImageSelector.Stretch" Value="UniformToFill" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="hc:ImageSelector.StrokeThickness" Value="1" />
        <Setter Property="Background" Value="{DynamicResource RegionBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
        <Setter Property="hc:ImageSelector.StrokeDashArray" Value="2,2" />
        <Setter Property="hc:IconElement.Geometry" Value="{StaticResource AddGeometry}" />
        <Setter Property="hc:IconSwitchElement.GeometrySelected" Value="{StaticResource RemoveGeometry}" />
        <Setter Property="hc:BorderElement.CornerRadius" Value="{StaticResource DefaultCornerRadius}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type hc:ImageSelector}">
                    <Button Command="interactivity:ControlCommands.Switch" Style="{StaticResource ButtonCustom}" HorizontalContentAlignment="Stretch" VerticalContentAlignment="Stretch">
                        <Border Background="{TemplateBinding Background}" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}">
                            <hc:DashedBorder BorderDashArray="{TemplateBinding StrokeDashArray}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" BorderDashThickness="{TemplateBinding StrokeThickness}" Background="{TemplateBinding PreviewBrush}" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}">
                                <Border Width="30" Height="30" Background="{TemplateBinding Background}" Style="{StaticResource BorderCircular}">
                                    <hc:ToggleBlock IsChecked="{TemplateBinding HasValue}" CheckedContent="{Path Data={TemplateBinding GeometrySelected}, Width=12, Height=12, Fill={DynamicResource PrimaryBrush}}" UnCheckedContent="{Path Data={TemplateBinding Geometry}, Width=16, Height=16, Fill={DynamicResource PrimaryBrush}}" />
                                </Border>
                            </hc:DashedBorder>
                        </Border>
                    </Button>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ListBoxItemBaseStyle" BasedOn="{StaticResource BaseStyle}" TargetType="{x:Type ListBoxItem}">
        <Style.Triggers>
            <Trigger Property="UIElement.IsMouseOver" Value="true">
                <Setter Property="Background" Value="{DynamicResource SecondaryRegionBrush}" />
            </Trigger>
            <Trigger Property="ListBoxItem.IsSelected" Value="true">
                <Setter Property="Background" Value="{DynamicResource PrimaryBrush}" />
                <Setter Property="Foreground" Value="{DynamicResource TextIconBrush}" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="ListBoxItem.IsSelected" Value="true" />
                    <Condition Property="Selector.IsSelectionActive" Value="false" />
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{DynamicResource DarkDefaultBrush}" />
                <Setter Property="Foreground" Value="{DynamicResource PrimaryTextBrush}" />
            </MultiTrigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="UIElement.Opacity" Value=".4" />
            </Trigger>
            <Trigger Property="hc:EdgeElement.ShowEdgeContent" Value="true">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ListBoxItem}">
                            <Border Name="Bd" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="true">
                                <StackPanel Orientation="Horizontal">
                                    <ContentControl Width="16" Height="16" Content="{Binding Path=(hc:EdgeElement.LeftContent), RelativeSource={RelativeSource TemplatedParent}}" />
                                    <ContentPresenter Margin="6,0,0,0" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                                </StackPanel>
                            </Border>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
        <Setter Property="FrameworkElement.FocusVisualStyle" Value="{StaticResource FocusVisualRadius0Margin0}" />
        <Setter Property="UIElement.SnapsToDevicePixels" Value="True" />
        <Setter Property="Padding" Value="10,0" />
        <Setter Property="MinHeight" Value="{StaticResource DefaultControlHeight}" />
        <Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment , RelativeSource={RelativeSource AncestorType=ItemsControl}}" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Background" Value="{DynamicResource RegionBrush}" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListBoxItem}">
                    <Border Name="Bd" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="true" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}">
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ListBoxBaseStyle" TargetType="{x:Type ListBox}">
        <Setter Property="Background" Value="{DynamicResource RegionBrush}" />
        <Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Disabled" />
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
        <Setter Property="ScrollViewer.CanContentScroll" Value="true" />
        <Setter Property="ScrollViewer.PanningMode" Value="Both" />
        <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="ItemContainerStyle" Value="{StaticResource ListBoxItemBaseStyle}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListBox}">
                    <Border Name="Bd" BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" SnapsToDevicePixels="true">
                        <hc:ToggleBlock VerticalContentAlignment="Stretch" HorizontalContentAlignment="Stretch" IsChecked="{Binding HasItems , RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}" UnCheckedContent="{hc:Empty}">
                            <hc:ToggleBlock.CheckedContent>
                                <hc:ScrollViewer Focusable="false">
                                    <ItemsPresenter Margin="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                                </hc:ScrollViewer>
                            </hc:ToggleBlock.CheckedContent>
                        </hc:ToggleBlock>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="{x:Type GridViewColumnHeader}" TargetType="{x:Type GridViewColumnHeader}">
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="HorizontalContentAlignment" Value="Left" />
        <Setter Property="Foreground" Value="{DynamicResource PrimaryTextBrush}" />
        <Setter Property="Padding" Value="12,6,12,12" />
        <Setter Property="MinHeight" Value="44" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type GridViewColumnHeader}">
                    <hc:SimplePanel SnapsToDevicePixels="true">
                        <Border Name="HeaderBorder" BorderBrush="{TemplateBinding BorderBrush}" Background="Transparent">
                            <ContentPresenter Name="HeaderContent" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                        </Border>
                        <Canvas>
                            <Thumb Name="PART_HeaderGripper" Style="{StaticResource GridViewColumnHeaderGripper}" />
                        </Canvas>
                    </hc:SimplePanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ListViewItemBaseStyle" TargetType="{x:Type ListViewItem}">
        <Style.Triggers>
            <Trigger Property="UIElement.IsMouseOver" Value="true">
                <Setter Property="Background" Value="{DynamicResource DarkDefaultBrush}" />
            </Trigger>
            <Trigger Property="ListBoxItem.IsSelected" Value="True">
                <Setter Property="Background" Value="{DynamicResource PrimaryBrush}" />
                <Setter Property="Foreground" Value="{DynamicResource TextIconBrush}" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="ListBoxItem.IsSelected" Value="true" />
                    <Condition Property="Selector.IsSelectionActive" Value="false" />
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{DynamicResource DarkDefaultBrush}" />
                <Setter Property="Foreground" Value="{DynamicResource PrimaryTextBrush}" />
            </MultiTrigger>
        </Style.Triggers>
        <Setter Property="Background" Value="{DynamicResource RegionBrush}" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Foreground" Value="{DynamicResource PrimaryTextBrush}" />
        <Setter Property="UIElement.SnapsToDevicePixels" Value="true" />
        <Setter Property="Margin" Value="0,0,0,4" />
        <Setter Property="Padding" Value="{StaticResource DefaultControlPadding}" />
        <Setter Property="MinHeight" Value="44" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListViewItem}">
                    <Border Name="Bd" CornerRadius="4" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="true">
                        <GridViewRowPresenter Content="{TemplateBinding Content}" Columns="{TemplateBinding ColumnCollection}" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="LoadingBaseStyle" TargetType="{x:Type hc:LoadingBase}">
        <Setter Property="Focusable" Value="False" />
        <Setter Property="hc:LoadingBase.DotDiameter" Value="10" />
        <Setter Property="Foreground" Value="{DynamicResource PrimaryBrush}" />
    </Style>
    <Style x:Key="LoadingCircleBaseStyle" BasedOn="{StaticResource LoadingBaseStyle}" TargetType="{x:Type hc:LoadingCircle}">
        <Setter Property="Width" Value="40" />
        <Setter Property="Height" Value="40" />
        <Setter Property="hc:LoadingBase.DotDiameter" Value="5" />
        <Setter Property="hc:LoadingBase.DotInterval" Value="30" />
        <Setter Property="hc:LoadingCircle.DotOffSet" Value="60" />
        <Setter Property="hc:LoadingBase.DotDelayTime" Value="90" />
        <Setter Property="hc:LoadingBase.DotSpeed" Value="4" />
    </Style>
    <Style x:Key="LoadingLineBaseStyle" BasedOn="{StaticResource LoadingBaseStyle}" TargetType="{x:Type hc:LoadingLine}">
        <Setter Property="hc:LoadingBase.DotDiameter" Value="5" />
    </Style>
    <Style x:Key="MagnifierBaseStyle" TargetType="{x:Type hc:Magnifier}">
        <Setter Property="UIElement.IsHitTestVisible" Value="False" />
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="VerticalAlignment" Value="Top" />
        <Setter Property="Width" Value="180" />
        <Setter Property="Height" Value="180" />
        <Setter Property="BorderThickness" Value="8" />
        <Setter Property="Background" Value="{DynamicResource BackgroundBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type hc:Magnifier}">
                    <Border Style="{StaticResource BorderCircular}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}">
                        <Ellipse>
                            <Ellipse.Fill>
                                <VisualBrush ViewboxUnits="Absolute" x:Name="PART_VisualBrush" Visual="{Binding Target , RelativeSource={RelativeSource TemplatedParent}}" />
                            </Ellipse.Fill>
                        </Ellipse>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="MenuItem4NavigationWindowStyle" BasedOn="{StaticResource MenuItemBaseStyle}" TargetType="{x:Type MenuItem}">
        <Setter Property="Header" Value="{Binding (JournalEntry.Name)}" />
        <Setter Property="MenuItem.Command" Value="NavigationCommands.NavigateJournal" />
        <Setter Property="MenuItem.CommandTarget" Value="{Binding TemplatedParent , RelativeSource={RelativeSource AncestorType=ContextMenu}}" />
        <Setter Property="MenuItem.CommandParameter" Value="{Binding RelativeSource={RelativeSource Self}}" />
    </Style>
    <Style x:Key="NavigationWindowBaseStyle" TargetType="{x:Type NavigationWindow}">
        <Setter Property="Background" Value="{DynamicResource SecondaryRegionBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource PrimaryTextBrush}" />
        <Setter Property="FrameworkElement.UseLayoutRounding" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type NavigationWindow}">
                    <ControlTemplate.Triggers>
                        <Trigger Property="NavigationWindow.ShowsNavigationUI" Value="False">
                            <Setter TargetName="NavChrome" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="NavigationWindow.CanGoBack" Value="False">
                            <Setter TargetName="BackNavMenu" Property="IsEnabled" Value="false" />
                        </Trigger>
                        <Trigger Property="NavigationWindow.CanGoForward" Value="False">
                            <Setter TargetName="ForwardNavMenu" Property="IsEnabled" Value="false" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="Window.ResizeMode" Value="CanResizeWithGrip" />
                                <Condition Property="Window.WindowState" Value="Normal" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="WindowResizeGrip" Property="Visibility" Value="Visible" />
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                    <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}">
                        <DockPanel LastChildFill="True">
                            <Border DockPanel.Dock="Top" BorderThickness="0,0,0,1" BorderBrush="{DynamicResource BorderBrush}" Background="{DynamicResource DarkDefaultBrush}">
                                <hc:ButtonGroup Name="NavChrome" Width="90" Margin="10,6" HorizontalAlignment="Left">
                                    <Button Padding="6" Geometry="{StaticResource LeftGeometry}" Command="NavigationCommands.BrowseBack" ContextMenu="{ContextMenu Name=BackNavMenu, ItemContainerStyle={StaticResource MenuItem4NavigationWindowStyle}, ItemsSource={Binding Path=(NavigationWindow.BackStack), RelativeSource={RelativeSource TemplatedParent}}}" />
                                    <Button Padding="6" Geometry="{StaticResource RightGeometry}" Command="NavigationCommands.BrowseForward" ContextMenu="{ContextMenu Name=ForwardNavMenu, ItemContainerStyle={StaticResource MenuItem4NavigationWindowStyle}, ItemsSource={Binding Path=(NavigationWindow.ForwardStack), RelativeSource={RelativeSource TemplatedParent}}}" />
                                    <Button Padding="6" Geometry="{StaticResource RotateRightGeometry}" Command="NavigationCommands.Refresh" />
                                </hc:ButtonGroup>
                            </Border>
                            <hc:SimplePanel>
                                <AdornerDecorator>
                                    <ContentPresenter Name="PART_NavWinCP" ClipToBounds="true" />
                                </AdornerDecorator>
                                <ResizeGrip Name="WindowResizeGrip" HorizontalAlignment="Right" IsTabStop="false" Visibility="Collapsed" VerticalAlignment="Bottom" />
                            </hc:SimplePanel>
                        </DockPanel>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="NumericUpDownBaseStyle" TargetType="{x:Type hc:NumericUpDown}">
        <Setter Property="Background" Value="{DynamicResource RegionBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource PrimaryTextBrush}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="hc:NumericUpDown.CaretBrush" Value="{DynamicResource PrimaryTextBrush}" />
        <Setter Property="hc:BorderElement.CornerRadius" Value="{StaticResource DefaultCornerRadius}" />
        <Setter Property="KeyboardNavigation.TabNavigation" Value="Once" />
        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="HorizontalContentAlignment" Value="Left" />
        <Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="UIElement.AllowDrop" Value="true" />
        <Setter Property="Padding" Value="{StaticResource DefaultInputPadding}" />
        <Setter Property="MinHeight" Value="{StaticResource DefaultControlHeight}" />
        <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst" />
        <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Validation.ErrorTemplate" Value="{x:Null}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type hc:NumericUpDown}">
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="UIElement.Opacity" Value="0.4" />
                        </Trigger>
                        <Trigger Property="UIElement.IsMouseOver" Value="true">
                            <Setter Value="{DynamicResource SecondaryBorderBrush}" Property="BorderBrush" />
                        </Trigger>
                        <Trigger SourceName="PART_TextBox" Property="UIElement.IsFocused" Value="true">
                            <Setter TargetName="templateRoot" Value="{DynamicResource PrimaryBrush}" Property="BorderBrush" />
                        </Trigger>
                        <Trigger Property="hc:NumericUpDown.ShowUpDownButton" Value="False">
                            <Setter TargetName="PART_TextBox" Property="Margin" Value="2,0,2,1" />
                        </Trigger>
                        <Trigger Property="hc:NumericUpDown.IsReadOnly" Value="True">
                            <Setter TargetName="UpButton" Property="IsEnabled" Value="False" />
                            <Setter TargetName="DownButton" Property="IsEnabled" Value="False" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                    <Border Name="templateRoot" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition />
                                <ColumnDefinition Width="Auto" />
                            </Grid.ColumnDefinitions>
                            <hc:WatermarkTextBox Name="PART_TextBox" Focusable="True" CaretBrush="{TemplateBinding CaretBrush}" Foreground="{TemplateBinding Foreground}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" Padding="{TemplateBinding Padding}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" IsReadOnly="{TemplateBinding IsReadOnly}" />
                            <Button Name="UpButton" Command="interactivity:ControlCommands.Prev" Padding="5,7,5,1" Margin="0,0,0,14" Focusable="False" Grid.Column="1" Geometry="{StaticResource UpGeometry}" Style="{StaticResource ButtonIcon}" Width="30" VerticalAlignment="Center" Height="14" Visibility="{TemplateBinding ShowUpDownButton , Converter={StaticResource Boolean2VisibilityConverter}}" Foreground="{Binding BorderBrush , ElementName=templateRoot}" />
                            <Button Name="DownButton" Command="interactivity:ControlCommands.Next" Padding="5,1,5,7" Margin="0,14,0,0" Focusable="False" Grid.Column="1" Geometry="{StaticResource DownGeometry}" Style="{StaticResource ButtonIcon}" Width="30" VerticalAlignment="Center" Height="14" Visibility="{TemplateBinding ShowUpDownButton , Converter={StaticResource Boolean2VisibilityConverter}}" Foreground="{Binding BorderBrush , ElementName=templateRoot}" />
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <ControlTemplate x:Key="NumericUpDownExtendTopTemplate" TargetType="{x:Type hc:NumericUpDown}">
        <ControlTemplate.Triggers>
            <Trigger Property="IsEnabled" Value="false">
                <Setter TargetName="templateRoot" Property="UIElement.Opacity" Value="0.4" />
            </Trigger>
            <Trigger SourceName="templateRoot" Property="UIElement.IsMouseOver" Value="true">
                <Setter Value="{DynamicResource SecondaryBorderBrush}" Property="BorderBrush" />
            </Trigger>
            <Trigger SourceName="PART_TextBox" Property="UIElement.IsFocused" Value="true">
                <Setter TargetName="templateRoot" Value="{DynamicResource PrimaryBrush}" Property="BorderBrush" />
            </Trigger>
            <Trigger Property="hc:NumericUpDown.IsReadOnly" Value="True">
                <Setter TargetName="UpButton" Property="IsEnabled" Value="False" />
                <Setter TargetName="DownButton" Property="IsEnabled" Value="False" />
            </Trigger>
        </ControlTemplate.Triggers>
        <Grid>
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition MinHeight="{Binding Path=(hc:InfoElement.MinContentHeight), RelativeSource={RelativeSource TemplatedParent}}" Height="{Binding Path=(hc:InfoElement.ContentHeight), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource Double2GridLengthConverter}}" />
            </Grid.RowDefinitions>
            <DockPanel Grid.ColumnSpan="2" LastChildFill="True" Margin="{TemplateBinding Padding}" Visibility="{Binding Path=(hc:InfoElement.Title), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource String2VisibilityConverter}}" HorizontalAlignment="{Binding Path=(hc:TitleElement.HorizontalAlignment), RelativeSource={RelativeSource TemplatedParent}}">
                <ContentPresenter DockPanel.Dock="Right" Foreground="{DynamicResource DangerBrush}" Margin="4,0,0,0" Content="{Binding Path=(hc:InfoElement.Symbol), RelativeSource={RelativeSource TemplatedParent}}" Visibility="{Binding Path=(hc:InfoElement.Necessary), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource Boolean2VisibilityConverter}}" />
                <TextBlock AutoTooltip="True" TextWrapping="NoWrap" TextTrimming="CharacterEllipsis" Margin="1,0,1,0" Text="{Binding Path=(hc:InfoElement.Title), RelativeSource={RelativeSource TemplatedParent}}" />
            </DockPanel>
            <Border Name="templateRoot" Grid.Row="1" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}">
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition />
                        <ColumnDefinition Width="Auto" />
                    </Grid.ColumnDefinitions>
                    <hc:WatermarkTextBox Name="PART_TextBox" Margin="-2,0" CaretBrush="{TemplateBinding CaretBrush}" Focusable="True" Foreground="{TemplateBinding Foreground}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" Padding="{TemplateBinding Padding}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" IsReadOnly="{TemplateBinding IsReadOnly}" />
                    <Button Name="UpButton" Command="interactivity:ControlCommands.Prev" Padding="5,7,5,1" Margin="0,0,0,14" Focusable="False" Grid.Column="1" Geometry="{StaticResource UpGeometry}" Style="{StaticResource ButtonIcon}" Width="30" VerticalAlignment="Center" Height="14" Visibility="{TemplateBinding ShowUpDownButton , Converter={StaticResource Boolean2VisibilityConverter}}" Foreground="{Binding BorderBrush , ElementName=templateRoot}" />
                    <Button Name="DownButton" Command="interactivity:ControlCommands.Next" Padding="5,1,5,7" Margin="0,14,0,0" Focusable="False" Grid.Column="1" Geometry="{StaticResource DownGeometry}" Style="{StaticResource ButtonIcon}" Width="30" VerticalAlignment="Center" Height="14" Visibility="{TemplateBinding ShowUpDownButton , Converter={StaticResource Boolean2VisibilityConverter}}" Foreground="{Binding BorderBrush , ElementName=templateRoot}" />
                </Grid>
            </Border>
        </Grid>
    </ControlTemplate>
    <ControlTemplate x:Key="NumericUpDownExtendLeftTemplate" TargetType="{x:Type hc:NumericUpDown}">
        <ControlTemplate.Triggers>
            <Trigger Property="IsEnabled" Value="false">
                <Setter TargetName="templateRoot" Property="UIElement.Opacity" Value="0.4" />
            </Trigger>
            <Trigger SourceName="templateRoot" Property="UIElement.IsMouseOver" Value="true">
                <Setter Value="{DynamicResource SecondaryBorderBrush}" Property="BorderBrush" />
            </Trigger>
            <Trigger SourceName="PART_TextBox" Property="UIElement.IsFocused" Value="true">
                <Setter TargetName="templateRoot" Value="{DynamicResource PrimaryBrush}" Property="BorderBrush" />
            </Trigger>
            <Trigger Property="hc:NumericUpDown.IsReadOnly" Value="True">
                <Setter TargetName="UpButton" Property="IsEnabled" Value="False" />
                <Setter TargetName="DownButton" Property="IsEnabled" Value="False" />
            </Trigger>
        </ControlTemplate.Triggers>
        <Grid MinHeight="{Binding Path=(hc:InfoElement.MinContentHeight), RelativeSource={RelativeSource TemplatedParent}}" Height="{Binding Path=(hc:InfoElement.ContentHeight), RelativeSource={RelativeSource TemplatedParent}}">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="{Binding Path=(hc:InfoElement.TitleWidth), RelativeSource={RelativeSource TemplatedParent}}" />
                <ColumnDefinition />
            </Grid.ColumnDefinitions>
            <DockPanel LastChildFill="True" Margin="0,7,6,7" Visibility="{Binding Path=(hc:InfoElement.Title), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource String2VisibilityConverter}}" HorizontalAlignment="{Binding Path=(hc:TitleElement.HorizontalAlignment), RelativeSource={RelativeSource TemplatedParent}}" VerticalAlignment="{Binding Path=(hc:TitleElement.VerticalAlignment), RelativeSource={RelativeSource TemplatedParent}}">
                <ContentPresenter DockPanel.Dock="Right" Foreground="{DynamicResource DangerBrush}" Margin="4,0,0,0" Content="{Binding Path=(hc:InfoElement.Symbol), RelativeSource={RelativeSource TemplatedParent}}" Visibility="{Binding Path=(hc:InfoElement.Necessary), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource Boolean2VisibilityConverter}}" />
                <TextBlock AutoTooltip="True" TextWrapping="NoWrap" TextTrimming="CharacterEllipsis" Text="{Binding Path=(hc:InfoElement.Title), RelativeSource={RelativeSource TemplatedParent}}" />
            </DockPanel>
            <Border Name="templateRoot" Grid.Column="1" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}">
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition />
                        <ColumnDefinition Width="Auto" />
                    </Grid.ColumnDefinitions>
                    <hc:WatermarkTextBox Name="PART_TextBox" Margin="-2,0" CaretBrush="{TemplateBinding CaretBrush}" Focusable="True" Foreground="{TemplateBinding Foreground}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" Padding="{TemplateBinding Padding}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" IsReadOnly="{TemplateBinding IsReadOnly}" />
                    <Button Name="UpButton" Command="interactivity:ControlCommands.Prev" Padding="5,7,5,1" Margin="0,0,0,14" Focusable="False" Grid.Column="1" Geometry="{StaticResource UpGeometry}" Style="{StaticResource ButtonIcon}" Width="30" VerticalAlignment="Center" Height="14" Visibility="{TemplateBinding ShowUpDownButton , Converter={StaticResource Boolean2VisibilityConverter}}" Foreground="{Binding BorderBrush , ElementName=templateRoot}" />
                    <Button Name="DownButton" Command="interactivity:ControlCommands.Next" Padding="5,1,5,7" Margin="0,14,0,0" Focusable="False" Grid.Column="1" Geometry="{StaticResource DownGeometry}" Style="{StaticResource ButtonIcon}" Width="30" VerticalAlignment="Center" Height="14" Visibility="{TemplateBinding ShowUpDownButton , Converter={StaticResource Boolean2VisibilityConverter}}" Foreground="{Binding BorderBrush , ElementName=templateRoot}" />
                </Grid>
            </Border>
        </Grid>
    </ControlTemplate>
    <Style x:Key="NumericUpDownExtendBaseStyle" BasedOn="{StaticResource NumericUpDownBaseStyle}" TargetType="{x:Type hc:NumericUpDown}">
        <Style.Triggers>
            <Trigger Property="hc:TitleElement.TitlePlacement" Value="Left">
                <Setter Property="Template" Value="{StaticResource NumericUpDownExtendLeftTemplate}" />
                <Setter Property="Width" Value="Auto" />
            </Trigger>
        </Style.Triggers>
        <Setter Property="hc:InfoElement.Symbol" Value="●" />
        <Setter Property="hc:InfoElement.ContentHeight" Value="{x:Static system:Double.NaN}" />
        <Setter Property="hc:InfoElement.MinContentHeight" Value="{StaticResource DefaultControlHeight}" />
        <Setter Property="Height" Value="Auto" />
        <Setter Property="Template" Value="{StaticResource NumericUpDownExtendTopTemplate}" />
    </Style>
    <ControlTemplate x:Key="NumericUpDownPlusTopTemplate" TargetType="{x:Type hc:NumericUpDown}">
        <ControlTemplate.Resources>
            <Storyboard Name="StoryboardShow">
                <ThicknessAnimation TargetName="PART_ErrorTip" TargetProperty="Margin" To="9,0,0,-18" Duration="0:0:.2" />
            </Storyboard>
            <Storyboard Name="StoryboardHidden">
                <ThicknessAnimation TargetName="PART_ErrorTip" TargetProperty="Margin" To="9,0,0,4" Duration="0:0:0" />
            </Storyboard>
        </ControlTemplate.Resources>
        <ControlTemplate.Triggers>
            <Trigger Property="IsEnabled" Value="false">
                <Setter TargetName="templateRoot" Property="UIElement.Opacity" Value="0.4" />
            </Trigger>
            <Trigger SourceName="templateRoot" Property="UIElement.IsMouseOver" Value="true">
                <Setter Value="{DynamicResource SecondaryBorderBrush}" Property="BorderBrush" />
            </Trigger>
            <Trigger Property="hc:NumericUpDown.IsReadOnly" Value="True">
                <Setter TargetName="UpButton" Property="IsEnabled" Value="False" />
                <Setter TargetName="DownButton" Property="IsEnabled" Value="False" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="UIElement.IsMouseOver" Value="true" />
                    <Condition Property="hc:NumericUpDown.ShowClearButton" Value="True" />
                    <Condition Property="hc:NumericUpDown.IsReadOnly" Value="False" />
                </MultiTrigger.Conditions>
                <Setter TargetName="ButtonClear" Property="Visibility" Value="Visible" />
            </MultiTrigger>
            <Trigger SourceName="PART_TextBox" Property="UIElement.IsFocused" Value="true">
                <Setter TargetName="templateRoot" Value="{DynamicResource PrimaryBrush}" Property="BorderBrush" />
            </Trigger>
            <Trigger Property="hc:NumericUpDown.IsError" Value="true">
                <Trigger.EnterActions>
                    <BeginStoryboard Storyboard="{StaticResource StoryboardShow}" />
                </Trigger.EnterActions>
                <Trigger.ExitActions>
                    <BeginStoryboard Storyboard="{StaticResource StoryboardHidden}" />
                </Trigger.ExitActions>
                <Setter TargetName="templateRoot" Value="{DynamicResource DangerBrush}" Property="BorderBrush" />
            </Trigger>
        </ControlTemplate.Triggers>
        <Grid>
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition MinHeight="{Binding Path=(hc:InfoElement.MinContentHeight), RelativeSource={RelativeSource TemplatedParent}}" Height="{Binding Path=(hc:InfoElement.ContentHeight), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource Double2GridLengthConverter}}" />
            </Grid.RowDefinitions>
            <TextBlock Name="PART_ErrorTip" TextBlock.FontSize="12" Text="{TemplateBinding ErrorStr}" VerticalAlignment="Bottom" Margin="9,0,0,4" Foreground="{DynamicResource DangerBrush}" Grid.Row="1" />
            <DockPanel Grid.ColumnSpan="2" LastChildFill="True" Margin="{TemplateBinding Padding}" Visibility="{Binding Path=(hc:InfoElement.Title), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource String2VisibilityConverter}}" HorizontalAlignment="{Binding Path=(hc:TitleElement.HorizontalAlignment), RelativeSource={RelativeSource TemplatedParent}}">
                <ContentPresenter DockPanel.Dock="Right" Foreground="{DynamicResource DangerBrush}" Margin="4,0,0,0" Content="{Binding Path=(hc:InfoElement.Symbol), RelativeSource={RelativeSource TemplatedParent}}" Visibility="{Binding Path=(hc:InfoElement.Necessary), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource Boolean2VisibilityConverter}}" />
                <TextBlock AutoTooltip="True" TextWrapping="NoWrap" TextTrimming="CharacterEllipsis" Margin="1,0,1,0" Text="{Binding Path=(hc:InfoElement.Title), RelativeSource={RelativeSource TemplatedParent}}" />
            </DockPanel>
            <Border Name="templateRoot" Grid.Row="1" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}">
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="*" />
                        <ColumnDefinition Width="Auto" />
                        <ColumnDefinition Width="25" />
                    </Grid.ColumnDefinitions>
                    <hc:WatermarkTextBox Name="PART_TextBox" CaretBrush="{TemplateBinding CaretBrush}" Padding="{TemplateBinding Padding}" HorizontalAlignment="Stretch" Grid.Column="0" Focusable="{TemplateBinding Focusable}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" Grid.Row="0" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" IsReadOnly="{TemplateBinding IsReadOnly}" Watermark="{Binding Path=(hc:InfoElement.Placeholder), RelativeSource={RelativeSource TemplatedParent}}" />
                    <Button Name="ButtonClear" Height="{x:Static system:Double.NaN}" Command="interactivity:ControlCommands.Clear" Width="16" Visibility="Collapsed" Grid.Column="1" Style="{StaticResource ButtonIcon}" Padding="0,6" Geometry="{StaticResource DeleteFillCircleGeometry}" Foreground="{Binding BorderBrush , ElementName=templateRoot}" />
                    <Button Name="UpButton" Command="interactivity:ControlCommands.Prev" Padding="0,7,5,1" Margin="0,0,0,14" Focusable="False" Grid.Column="2" Geometry="{StaticResource UpGeometry}" Style="{StaticResource ButtonIcon}" Width="30" VerticalAlignment="Center" Height="14" Foreground="{Binding BorderBrush , ElementName=templateRoot}" />
                    <Button Name="DownButton" Command="interactivity:ControlCommands.Next" Padding="0,1,5,7" Margin="0,14,0,0" Focusable="False" Grid.Column="2" Geometry="{StaticResource DownGeometry}" Style="{StaticResource ButtonIcon}" Width="30" VerticalAlignment="Center" Height="14" Foreground="{Binding BorderBrush , ElementName=templateRoot}" />
                </Grid>
            </Border>
        </Grid>
    </ControlTemplate>
    <ControlTemplate x:Key="NumericUpDownPlusLeftTemplate" TargetType="{x:Type hc:NumericUpDown}">
        <ControlTemplate.Resources>
            <Storyboard Name="StoryboardShow">
                <ThicknessAnimation TargetName="PART_ErrorTip" TargetProperty="Margin" To="9,0,0,-18" Duration="0:0:.2" />
            </Storyboard>
            <Storyboard Name="StoryboardHidden">
                <ThicknessAnimation TargetName="PART_ErrorTip" TargetProperty="Margin" To="9,0,0,4" Duration="0:0:0" />
            </Storyboard>
        </ControlTemplate.Resources>
        <ControlTemplate.Triggers>
            <Trigger Property="IsEnabled" Value="false">
                <Setter TargetName="templateRoot" Property="UIElement.Opacity" Value="0.4" />
            </Trigger>
            <Trigger SourceName="templateRoot" Property="UIElement.IsMouseOver" Value="true">
                <Setter Value="{DynamicResource SecondaryBorderBrush}" Property="BorderBrush" />
            </Trigger>
            <Trigger Property="hc:NumericUpDown.IsReadOnly" Value="True">
                <Setter TargetName="UpButton" Property="IsEnabled" Value="False" />
                <Setter TargetName="DownButton" Property="IsEnabled" Value="False" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="UIElement.IsMouseOver" Value="true" />
                    <Condition Property="hc:NumericUpDown.ShowClearButton" Value="True" />
                    <Condition Property="hc:NumericUpDown.IsReadOnly" Value="False" />
                </MultiTrigger.Conditions>
                <Setter TargetName="PART_ButtonClear" Property="Visibility" Value="Visible" />
            </MultiTrigger>
            <Trigger SourceName="PART_TextBox" Property="UIElement.IsFocused" Value="true">
                <Setter TargetName="templateRoot" Value="{DynamicResource PrimaryBrush}" Property="BorderBrush" />
            </Trigger>
            <Trigger Property="hc:NumericUpDown.IsError" Value="true">
                <Trigger.EnterActions>
                    <BeginStoryboard Storyboard="{StaticResource StoryboardShow}" />
                </Trigger.EnterActions>
                <Trigger.ExitActions>
                    <BeginStoryboard Storyboard="{StaticResource StoryboardHidden}" />
                </Trigger.ExitActions>
                <Setter TargetName="templateRoot" Value="{DynamicResource DangerBrush}" Property="BorderBrush" />
            </Trigger>
        </ControlTemplate.Triggers>
        <Grid MinHeight="{Binding Path=(hc:InfoElement.MinContentHeight), RelativeSource={RelativeSource TemplatedParent}}" Height="{Binding Path=(hc:InfoElement.ContentHeight), RelativeSource={RelativeSource TemplatedParent}}">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="{Binding Path=(hc:InfoElement.TitleWidth), RelativeSource={RelativeSource TemplatedParent}}" />
                <ColumnDefinition />
            </Grid.ColumnDefinitions>
            <TextBlock Name="PART_ErrorTip" TextBlock.FontSize="12" Text="{TemplateBinding ErrorStr}" VerticalAlignment="Bottom" Margin="9,0,0,4" Foreground="{DynamicResource DangerBrush}" Grid.Column="1" />
            <DockPanel Grid.Column="0" LastChildFill="True" Margin="0,7,6,7" Visibility="{Binding Path=(hc:InfoElement.Title), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource String2VisibilityConverter}}" HorizontalAlignment="{Binding Path=(hc:TitleElement.HorizontalAlignment), RelativeSource={RelativeSource TemplatedParent}}" VerticalAlignment="{Binding Path=(hc:TitleElement.VerticalAlignment), RelativeSource={RelativeSource TemplatedParent}}">
                <ContentPresenter DockPanel.Dock="Right" Foreground="{DynamicResource DangerBrush}" Margin="4,0,0,0" Content="{Binding Path=(hc:InfoElement.Symbol), RelativeSource={RelativeSource TemplatedParent}}" Visibility="{Binding Path=(hc:InfoElement.Necessary), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource Boolean2VisibilityConverter}}" />
                <TextBlock AutoTooltip="True" TextWrapping="NoWrap" TextTrimming="CharacterEllipsis" Text="{Binding Path=(hc:InfoElement.Title), RelativeSource={RelativeSource TemplatedParent}}" />
            </DockPanel>
            <Border Name="templateRoot" Grid.Column="1" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}">
                <Grid Name="PART_Root" HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="*" />
                        <ColumnDefinition Width="Auto" />
                        <ColumnDefinition Width="25" />
                    </Grid.ColumnDefinitions>
                    <hc:WatermarkTextBox Name="PART_TextBox" CaretBrush="{TemplateBinding CaretBrush}" Padding="{TemplateBinding Padding}" HorizontalAlignment="Stretch" Grid.Column="0" Focusable="{TemplateBinding Focusable}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" Grid.Row="0" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" IsReadOnly="{TemplateBinding IsReadOnly}" Watermark="{Binding Path=(hc:InfoElement.Placeholder), RelativeSource={RelativeSource TemplatedParent}}" />
                    <Button Name="PART_ButtonClear" Height="{x:Static system:Double.NaN}" Command="interactivity:ControlCommands.Clear" Width="16" Visibility="Collapsed" Grid.Column="1" Style="{StaticResource ButtonIcon}" Padding="0,6" Geometry="{StaticResource DeleteFillCircleGeometry}" Foreground="{Binding BorderBrush , ElementName=templateRoot}" />
                    <Button Name="UpButton" Command="interactivity:ControlCommands.Prev" Padding="0,7,5,1" Margin="0,0,0,14" Focusable="False" Grid.Column="2" Geometry="{StaticResource UpGeometry}" Style="{StaticResource ButtonIcon}" Width="30" VerticalAlignment="Center" Height="14" Visibility="{TemplateBinding ShowUpDownButton , Converter={StaticResource Boolean2VisibilityConverter}}" Foreground="{Binding BorderBrush , ElementName=templateRoot}" />
                    <Button Name="DownButton" Command="interactivity:ControlCommands.Next" Padding="0,1,5,7" Margin="0,14,0,0" Focusable="False" Grid.Column="2" Geometry="{StaticResource DownGeometry}" Style="{StaticResource ButtonIcon}" Width="30" VerticalAlignment="Center" Height="14" Visibility="{TemplateBinding ShowUpDownButton , Converter={StaticResource Boolean2VisibilityConverter}}" Foreground="{Binding BorderBrush , ElementName=templateRoot}" />
                </Grid>
            </Border>
        </Grid>
    </ControlTemplate>
    <Style x:Key="NumericUpDownPlusBaseStyle" BasedOn="{StaticResource NumericUpDownExtendBaseStyle}" TargetType="{x:Type hc:NumericUpDown}">
        <Style.Triggers>
            <Trigger Property="hc:TitleElement.TitlePlacement" Value="Left">
                <Setter Property="Template" Value="{StaticResource NumericUpDownPlusLeftTemplate}" />
                <Setter Property="Width" Value="Auto" />
            </Trigger>
        </Style.Triggers>
        <Setter Property="hc:NumericUpDown.IsError" Value="{Binding Path=(Validation.HasError), RelativeSource={RelativeSource Self}}" />
        <Setter Property="Template" Value="{StaticResource NumericUpDownPlusTopTemplate}" />
    </Style>
    <Style x:Key="PasswordBoxBaseStyle" TargetType="{x:Type PasswordBox}">
        <Setter Property="Background" Value="{DynamicResource RegionBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource PrimaryTextBrush}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="hc:BorderElement.CornerRadius" Value="{StaticResource DefaultCornerRadius}" />
        <Setter Property="hc:TitleElement.MarginOnTheLeft" Value="0,8,6,8" />
        <Setter Property="PasswordBox.PasswordChar" Value="●" />
        <Setter Property="KeyboardNavigation.TabNavigation" Value="None" />
        <Setter Property="HorizontalContentAlignment" Value="Left" />
        <Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="UIElement.AllowDrop" Value="true" />
        <Setter Property="Padding" Value="{StaticResource DefaultInputPadding}" />
        <Setter Property="MinHeight" Value="{StaticResource DefaultControlHeight}" />
        <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst" />
        <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Validation.ErrorTemplate" Value="{x:Null}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type PasswordBox}">
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter TargetName="border" Property="UIElement.Opacity" Value="0.4" />
                        </Trigger>
                        <Trigger Property="UIElement.IsMouseOver" Value="true">
                            <Setter TargetName="border" Value="{DynamicResource SecondaryBorderBrush}" Property="BorderBrush" />
                        </Trigger>
                        <Trigger Property="UIElement.IsFocused" Value="true">
                            <Setter TargetName="border" Value="{DynamicResource PrimaryBrush}" Property="BorderBrush" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                    <Border Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}">
                        <ScrollViewer Name="PART_ContentHost" Margin="-2,0" Padding="{TemplateBinding Padding}" Focusable="false" ScrollViewer.HorizontalScrollBarVisibility="Hidden" ScrollViewer.VerticalScrollBarVisibility="Hidden" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <ControlTemplate x:Key="PasswordBoxExtendTopTemplate" TargetType="{x:Type PasswordBox}">
        <ControlTemplate.Triggers>
            <Trigger Property="hc:PasswordBoxAttach.PasswordLength" Value="0">
                <Setter TargetName="placeholder" Property="Visibility" Value="Visible" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter TargetName="border" Property="UIElement.Opacity" Value="0.4" />
                <Setter TargetName="placeholder" Property="UIElement.Opacity" Value="0.4" />
                <Setter TargetName="PART_ContentHost" Property="UIElement.Opacity" Value="0.4" />
            </Trigger>
            <Trigger SourceName="PART_ContentHost" Property="UIElement.IsMouseOver" Value="true">
                <Setter Value="{DynamicResource SecondaryBorderBrush}" Property="BorderBrush" />
            </Trigger>
            <Trigger Property="UIElement.IsFocused" Value="true">
                <Setter Value="{DynamicResource PrimaryBrush}" Property="BorderBrush" />
            </Trigger>
        </ControlTemplate.Triggers>
        <Grid>
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition MinHeight="{Binding Path=(hc:InfoElement.MinContentHeight), RelativeSource={RelativeSource TemplatedParent}}" Height="{Binding Path=(hc:InfoElement.ContentHeight), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource Double2GridLengthConverter}}" />
            </Grid.RowDefinitions>
            <DockPanel LastChildFill="True" Margin="{TemplateBinding Padding}" Visibility="{Binding Path=(hc:InfoElement.Title), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource String2VisibilityConverter}}" HorizontalAlignment="{Binding Path=(hc:TitleElement.HorizontalAlignment), RelativeSource={RelativeSource TemplatedParent}}">
                <ContentPresenter DockPanel.Dock="Right" Foreground="{DynamicResource DangerBrush}" Margin="4,0,0,0" Content="{Binding Path=(hc:InfoElement.Symbol), RelativeSource={RelativeSource TemplatedParent}}" Visibility="{Binding Path=(hc:InfoElement.Necessary), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource Boolean2VisibilityConverter}}" />
                <TextBlock AutoTooltip="True" TextWrapping="NoWrap" TextTrimming="CharacterEllipsis" Margin="1,0,1,0" Text="{Binding Path=(hc:InfoElement.Title), RelativeSource={RelativeSource TemplatedParent}}" />
            </DockPanel>
            <Border Name="border" Grid.Row="1" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}" />
            <TextBlock Name="placeholder" Padding="1" Visibility="Collapsed" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Margin="{TemplateBinding Padding}" Grid.Row="1" HorizontalAlignment="Stretch" Style="{StaticResource TextBlockDefaultThiLight}" Text="{Binding Path=(hc:InfoElement.Placeholder), RelativeSource={RelativeSource TemplatedParent}}" />
            <ScrollViewer Name="PART_ContentHost" Margin="-1,1" Padding="{TemplateBinding Padding}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" Grid.Row="1" Focusable="false" ScrollViewer.HorizontalScrollBarVisibility="Hidden" ScrollViewer.VerticalScrollBarVisibility="Hidden" />
        </Grid>
    </ControlTemplate>
    <ControlTemplate x:Key="PasswordBoxExtendLeftTemplate" TargetType="{x:Type PasswordBox}">
        <ControlTemplate.Triggers>
            <Trigger Property="hc:PasswordBoxAttach.PasswordLength" Value="0">
                <Setter TargetName="placeholder" Property="Visibility" Value="Visible" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter TargetName="border" Property="UIElement.Opacity" Value="0.4" />
                <Setter TargetName="placeholder" Property="UIElement.Opacity" Value="0.4" />
                <Setter TargetName="PART_ContentHost" Property="UIElement.Opacity" Value="0.4" />
            </Trigger>
            <Trigger SourceName="PART_ContentHost" Property="UIElement.IsMouseOver" Value="true">
                <Setter Value="{DynamicResource SecondaryBorderBrush}" Property="BorderBrush" />
            </Trigger>
            <Trigger Property="UIElement.IsFocused" Value="true">
                <Setter Value="{DynamicResource PrimaryBrush}" Property="BorderBrush" />
            </Trigger>
        </ControlTemplate.Triggers>
        <Grid MinHeight="{Binding Path=(hc:InfoElement.MinContentHeight), RelativeSource={RelativeSource TemplatedParent}}" Height="{Binding Path=(hc:InfoElement.ContentHeight), RelativeSource={RelativeSource TemplatedParent}}">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="{Binding Path=(hc:InfoElement.TitleWidth), RelativeSource={RelativeSource TemplatedParent}}" />
                <ColumnDefinition />
            </Grid.ColumnDefinitions>
            <DockPanel LastChildFill="True" Visibility="{Binding Path=(hc:InfoElement.Title), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource String2VisibilityConverter}}" HorizontalAlignment="{Binding Path=(hc:TitleElement.HorizontalAlignment), RelativeSource={RelativeSource TemplatedParent}}" VerticalAlignment="{Binding Path=(hc:TitleElement.VerticalAlignment), RelativeSource={RelativeSource TemplatedParent}}" Margin="{Binding Path=(hc:TitleElement.MarginOnTheLeft), RelativeSource={RelativeSource TemplatedParent}}">
                <ContentPresenter DockPanel.Dock="Right" Foreground="{DynamicResource DangerBrush}" Margin="4,0,0,0" Content="{Binding Path=(hc:InfoElement.Symbol), RelativeSource={RelativeSource TemplatedParent}}" Visibility="{Binding Path=(hc:InfoElement.Necessary), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource Boolean2VisibilityConverter}}" />
                <TextBlock AutoTooltip="True" TextWrapping="NoWrap" TextTrimming="CharacterEllipsis" Text="{Binding Path=(hc:InfoElement.Title), RelativeSource={RelativeSource TemplatedParent}}" />
            </DockPanel>
            <Border Name="border" Grid.Column="1" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}" />
            <TextBlock Name="placeholder" Padding="1" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Margin="{TemplateBinding Padding}" Visibility="Collapsed" Grid.Column="1" HorizontalAlignment="Stretch" Style="{StaticResource TextBlockDefaultThiLight}" Text="{Binding Path=(hc:InfoElement.Placeholder), RelativeSource={RelativeSource TemplatedParent}}" />
            <ScrollViewer Name="PART_ContentHost" Margin="-1,1" Padding="{TemplateBinding Padding}" Grid.Column="1" Focusable="false" ScrollViewer.HorizontalScrollBarVisibility="Hidden" ScrollViewer.VerticalScrollBarVisibility="Hidden" />
        </Grid>
    </ControlTemplate>
    <Style x:Key="PasswordBoxExtendBaseStyle" BasedOn="{StaticResource PasswordBoxBaseStyle}" TargetType="{x:Type PasswordBox}">
        <Style.Triggers>
            <Trigger Property="hc:TitleElement.TitlePlacement" Value="Left">
                <Setter Property="Template" Value="{StaticResource PasswordBoxExtendLeftTemplate}" />
                <Setter Property="Width" Value="Auto" />
            </Trigger>
        </Style.Triggers>
        <Setter Property="Height" Value="Auto" />
        <Setter Property="hc:InfoElement.Symbol" Value="●" />
        <Setter Property="hc:InfoElement.ContentHeight" Value="{x:Static system:Double.NaN}" />
        <Setter Property="hc:InfoElement.MinContentHeight" Value="{StaticResource DefaultControlHeight}" />
        <Setter Property="hc:PasswordBoxAttach.IsMonitoring" Value="True" />
        <Setter Property="Template" Value="{StaticResource PasswordBoxExtendTopTemplate}" />
    </Style>
    <Style x:Key="PasswordBoxPlusInternalStyle" TargetType="{x:Type PasswordBox}">
        <Setter Property="KeyboardNavigation.TabNavigation" Value="None" />
        <Setter Property="HorizontalContentAlignment" Value="Left" />
        <Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="UIElement.AllowDrop" Value="true" />
        <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst" />
        <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Padding" Value="{StaticResource DefaultInputPadding}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type PasswordBox}">
                    <ControlTemplate.Triggers>
                        <Trigger Property="hc:PasswordBoxAttach.PasswordLength" Value="0">
                            <Setter TargetName="placeholder" Property="Visibility" Value="Visible" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="UIElement.Opacity" Value="0.4" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                    <hc:SimplePanel>
                        <TextBlock Name="placeholder" Margin="2,-1" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Padding="{TemplateBinding Padding}" Visibility="Collapsed" HorizontalAlignment="Stretch" Style="{StaticResource TextBlockDefaultThiLight}" Text="{Binding Path=(hc:InfoElement.Placeholder), RelativeSource={RelativeSource TemplatedParent}}" />
                        <ScrollViewer Name="PART_ContentHost" Padding="{TemplateBinding Padding}" Focusable="false" ScrollViewer.HorizontalScrollBarVisibility="Hidden" ScrollViewer.VerticalScrollBarVisibility="Hidden" />
                    </hc:SimplePanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <ControlTemplate x:Key="PasswordBoxPlusTopTemplate" TargetType="{x:Type hc:PasswordBox}">
        <ControlTemplate.Resources>
            <Storyboard Name="StoryboardShow">
                <ThicknessAnimation TargetName="TextBlockError" TargetProperty="Margin" To="9,0,0,-18" Duration="0:0:.2" />
            </Storyboard>
            <Storyboard Name="StoryboardHidden">
                <ThicknessAnimation TargetName="TextBlockError" TargetProperty="Margin" To="9,0,0,4" Duration="0:0:0" />
            </Storyboard>
        </ControlTemplate.Resources>
        <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsMouseOver" Value="true">
                <Setter Value="{DynamicResource SecondaryBorderBrush}" Property="BorderBrush" />
            </Trigger>
            <Trigger SourceName="PART_PasswordBox" Property="UIElement.IsFocused" Value="true">
                <Setter Value="{DynamicResource PrimaryBrush}" Property="BorderBrush" />
            </Trigger>
            <Trigger SourceName="PART_TextBox" Property="UIElement.IsFocused" Value="true">
                <Setter Value="{DynamicResource PrimaryBrush}" Property="BorderBrush" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="UIElement.IsMouseOver" Value="true" />
                    <Condition Property="hc:PasswordBox.ShowClearButton" Value="True" />
                </MultiTrigger.Conditions>
                <Setter TargetName="ButtonClear" Property="Visibility" Value="Visible" />
            </MultiTrigger>
            <Trigger Property="hc:PasswordBox.IsError" Value="true">
                <Trigger.EnterActions>
                    <BeginStoryboard Storyboard="{StaticResource StoryboardShow}" />
                </Trigger.EnterActions>
                <Trigger.ExitActions>
                    <BeginStoryboard Storyboard="{StaticResource StoryboardHidden}" />
                </Trigger.ExitActions>
                <Setter Value="{DynamicResource DangerBrush}" Property="BorderBrush" />
            </Trigger>
            <Trigger Property="hc:PasswordBox.ShowEyeButton" Value="true">
                <Setter TargetName="ButtonClear" Property="Margin" Value="0" />
            </Trigger>
        </ControlTemplate.Triggers>
        <Grid>
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition MinHeight="{Binding Path=(hc:InfoElement.MinContentHeight), RelativeSource={RelativeSource TemplatedParent}}" Height="{Binding Path=(hc:InfoElement.ContentHeight), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource Double2GridLengthConverter}}" />
            </Grid.RowDefinitions>
            <Grid.ColumnDefinitions>
                <ColumnDefinition />
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="Auto" />
            </Grid.ColumnDefinitions>
            <DockPanel Grid.ColumnSpan="3" LastChildFill="True" Margin="{TemplateBinding Padding}" Visibility="{Binding Path=(hc:InfoElement.Title), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource String2VisibilityConverter}}" HorizontalAlignment="{Binding Path=(hc:TitleElement.HorizontalAlignment), RelativeSource={RelativeSource TemplatedParent}}">
                <ContentPresenter DockPanel.Dock="Right" Foreground="{DynamicResource DangerBrush}" Margin="4,0,0,0" Content="{Binding Path=(hc:InfoElement.Symbol), RelativeSource={RelativeSource TemplatedParent}}" Visibility="{Binding Path=(hc:InfoElement.Necessary), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource Boolean2VisibilityConverter}}" />
                <TextBlock AutoTooltip="True" TextWrapping="NoWrap" TextTrimming="CharacterEllipsis" Margin="1,0,1,0" Text="{Binding Path=(hc:InfoElement.Title), RelativeSource={RelativeSource TemplatedParent}}" />
            </DockPanel>
            <TextBlock Name="TextBlockError" TextBlock.FontSize="12" Grid.Column="0" Grid.ColumnSpan="3" Text="{TemplateBinding ErrorStr}" VerticalAlignment="Bottom" Margin="9,0,0,4" Foreground="{DynamicResource DangerBrush}" Grid.Row="1" />
            <Border Grid.Row="1" Grid.Column="0" Grid.ColumnSpan="3" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}" />
            <PasswordBox Name="PART_PasswordBox" Margin="-1,1,0,1" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" Padding="{TemplateBinding Padding}" Background="{TemplateBinding Background}" Foreground="{TemplateBinding Foreground}" Grid.Column="0" Grid.Row="1" PasswordChar="{TemplateBinding PasswordChar}" Style="{StaticResource PasswordBoxPlusInternalStyle}" Visibility="{Binding ShowPassword , RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource Boolean2VisibilityReConverter}}" />
            <hc:WatermarkTextBox Name="PART_TextBox" Margin="1,1,0,1" Padding="{TemplateBinding Padding}" HorizontalAlignment="Stretch" Grid.Column="0" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" Grid.Row="1" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" Visibility="{Binding ShowPassword , RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource Boolean2VisibilityConverter}}" Watermark="{Binding Path=(hc:InfoElement.Placeholder), RelativeSource={RelativeSource TemplatedParent}}" />
            <Button Name="ButtonClear" Height="{x:Static system:Double.NaN}" Grid.Row="1" Grid.Column="1" Command="interactivity:ControlCommands.Clear" Margin="0,0,7,0" Visibility="Collapsed" Width="16" Style="{StaticResource ButtonIcon}" Padding="0" Geometry="{StaticResource DeleteFillCircleGeometry}" Foreground="{TemplateBinding BorderBrush}" />
            <ToggleButton Name="ButtonEye" Height="{x:Static system:Double.NaN}" Margin="3,0,7,0" Width="16" Style="{StaticResource ToggleButtonIconTransparent}" Padding="0" Geometry="{StaticResource EyeCloseGeometry}" GeometrySelected="{StaticResource EyeOpenGeometry}" Grid.Column="2" Foreground="{TemplateBinding BorderBrush}" Focusable="False" Grid.Row="1" IsChecked="{Binding ShowPassword , RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay}" Visibility="{TemplateBinding ShowEyeButton , Converter={StaticResource Boolean2VisibilityConverter}}" />
        </Grid>
    </ControlTemplate>
    <ControlTemplate x:Key="PasswordBoxPlusLeftTemplate" TargetType="{x:Type hc:PasswordBox}">
        <ControlTemplate.Resources>
            <Storyboard Name="StoryboardShow">
                <ThicknessAnimation TargetName="TextBlockError" TargetProperty="Margin" To="9,0,0,-18" Duration="0:0:.2" />
            </Storyboard>
            <Storyboard Name="StoryboardHidden">
                <ThicknessAnimation TargetName="TextBlockError" TargetProperty="Margin" To="9,0,0,4" Duration="0:0:0" />
            </Storyboard>
        </ControlTemplate.Resources>
        <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsMouseOver" Value="true">
                <Setter Value="{DynamicResource SecondaryBorderBrush}" Property="BorderBrush" />
            </Trigger>
            <Trigger SourceName="PART_PasswordBox" Property="UIElement.IsFocused" Value="true">
                <Setter Value="{DynamicResource PrimaryBrush}" Property="BorderBrush" />
            </Trigger>
            <Trigger SourceName="PART_TextBox" Property="UIElement.IsFocused" Value="true">
                <Setter Value="{DynamicResource PrimaryBrush}" Property="BorderBrush" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="UIElement.IsMouseOver" Value="true" />
                    <Condition Property="hc:PasswordBox.ShowClearButton" Value="True" />
                </MultiTrigger.Conditions>
                <Setter TargetName="ButtonClear" Property="Visibility" Value="Visible" />
            </MultiTrigger>
            <Trigger Property="hc:PasswordBox.IsError" Value="true">
                <Trigger.EnterActions>
                    <BeginStoryboard Storyboard="{StaticResource StoryboardShow}" />
                </Trigger.EnterActions>
                <Trigger.ExitActions>
                    <BeginStoryboard Storyboard="{StaticResource StoryboardHidden}" />
                </Trigger.ExitActions>
                <Setter Value="{DynamicResource DangerBrush}" Property="BorderBrush" />
            </Trigger>
            <Trigger Property="hc:PasswordBox.ShowEyeButton" Value="true">
                <Setter TargetName="ButtonClear" Property="Margin" Value="0" />
            </Trigger>
        </ControlTemplate.Triggers>
        <Grid MinHeight="{Binding Path=(hc:InfoElement.MinContentHeight), RelativeSource={RelativeSource TemplatedParent}}" Height="{Binding Path=(hc:InfoElement.ContentHeight), RelativeSource={RelativeSource TemplatedParent}}">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="{Binding Path=(hc:InfoElement.TitleWidth), RelativeSource={RelativeSource TemplatedParent}}" />
                <ColumnDefinition />
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="Auto" />
            </Grid.ColumnDefinitions>
            <DockPanel LastChildFill="True" Visibility="{Binding Path=(hc:InfoElement.Title), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource String2VisibilityConverter}}" HorizontalAlignment="{Binding Path=(hc:TitleElement.HorizontalAlignment), RelativeSource={RelativeSource TemplatedParent}}" VerticalAlignment="{Binding Path=(hc:TitleElement.VerticalAlignment), RelativeSource={RelativeSource TemplatedParent}}" Margin="{Binding Path=(hc:TitleElement.MarginOnTheLeft), RelativeSource={RelativeSource TemplatedParent}}">
                <ContentPresenter DockPanel.Dock="Right" Foreground="{DynamicResource DangerBrush}" Margin="4,0,0,0" Content="{Binding Path=(hc:InfoElement.Symbol), RelativeSource={RelativeSource TemplatedParent}}" Visibility="{Binding Path=(hc:InfoElement.Necessary), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource Boolean2VisibilityConverter}}" />
                <TextBlock AutoTooltip="True" TextWrapping="NoWrap" TextTrimming="CharacterEllipsis" Text="{Binding Path=(hc:InfoElement.Title), RelativeSource={RelativeSource TemplatedParent}}" />
            </DockPanel>
            <TextBlock Name="TextBlockError" TextBlock.FontSize="12" Grid.ColumnSpan="3" Text="{TemplateBinding ErrorStr}" VerticalAlignment="Bottom" Margin="9,0,0,4" Foreground="{DynamicResource DangerBrush}" Grid.Column="1" />
            <Border Grid.Column="1" Grid.ColumnSpan="3" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}" />
            <PasswordBox Name="PART_PasswordBox" Margin="-1,1,0,1" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" Padding="{TemplateBinding Padding}" Background="{TemplateBinding Background}" Foreground="{TemplateBinding Foreground}" Grid.Column="1" PasswordChar="{TemplateBinding PasswordChar}" Style="{StaticResource PasswordBoxPlusInternalStyle}" Visibility="{Binding ShowPassword , RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource Boolean2VisibilityReConverter}}" />
            <hc:WatermarkTextBox Name="PART_TextBox" Margin="1,1,0,1" Padding="{TemplateBinding Padding}" HorizontalAlignment="Stretch" Grid.Column="1" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" Visibility="{Binding ShowPassword , RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource Boolean2VisibilityConverter}}" Watermark="{Binding Path=(hc:InfoElement.Placeholder), RelativeSource={RelativeSource TemplatedParent}}" />
            <Button Name="ButtonClear" Height="{x:Static system:Double.NaN}" Grid.Column="2" Command="interactivity:ControlCommands.Clear" Margin="0,0,7,0" Visibility="Collapsed" Width="16" Style="{StaticResource ButtonIcon}" Padding="0" Geometry="{StaticResource DeleteFillCircleGeometry}" Foreground="{TemplateBinding BorderBrush}" />
            <ToggleButton Name="ButtonEye" Height="{x:Static system:Double.NaN}" Margin="3,0,7,0" Width="16" Style="{StaticResource ToggleButtonIconTransparent}" Padding="0" Geometry="{StaticResource EyeCloseGeometry}" GeometrySelected="{StaticResource EyeOpenGeometry}" Grid.Column="3" Foreground="{TemplateBinding BorderBrush}" Focusable="False" IsChecked="{Binding ShowPassword , RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay}" Visibility="{TemplateBinding ShowEyeButton , Converter={StaticResource Boolean2VisibilityConverter}}" />
        </Grid>
    </ControlTemplate>
    <Style x:Key="PasswordBoxPlusBaseStyle" TargetType="{x:Type hc:PasswordBox}">
        <Style.Triggers>
            <Trigger Property="hc:TitleElement.TitlePlacement" Value="Left">
                <Setter Property="Template" Value="{StaticResource PasswordBoxPlusLeftTemplate}" />
                <Setter Property="Width" Value="Auto" />
            </Trigger>
        </Style.Triggers>
        <Setter Property="hc:PasswordBox.IsError" Value="{Binding Path=(Validation.HasError), RelativeSource={RelativeSource Self}}" />
        <Setter Property="Validation.ErrorTemplate" Value="{x:Null}" />
        <Setter Property="Background" Value="{DynamicResource RegionBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource PrimaryTextBrush}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="hc:BorderElement.CornerRadius" Value="{StaticResource DefaultCornerRadius}" />
        <Setter Property="hc:TitleElement.MarginOnTheLeft" Value="0,8,6,8" />
        <Setter Property="hc:PasswordBox.PasswordChar" Value="●" />
        <Setter Property="HorizontalContentAlignment" Value="Left" />
        <Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="UIElement.AllowDrop" Value="true" />
        <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst" />
        <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Height" Value="Auto" />
        <Setter Property="Padding" Value="{StaticResource DefaultInputPadding}" />
        <Setter Property="hc:InfoElement.Symbol" Value="●" />
        <Setter Property="hc:InfoElement.ContentHeight" Value="{x:Static system:Double.NaN}" />
        <Setter Property="hc:PasswordBoxAttach.IsMonitoring" Value="True" />
        <Setter Property="Focusable" Value="False" />
        <Setter Property="Template" Value="{StaticResource PasswordBoxPlusTopTemplate}" />
    </Style>
    <Style x:Key="PinBoxBaseStyle" TargetType="{x:Type hc:PinBox}">
        <Setter Property="Focusable" Value="False" />
        <Setter Property="hc:PinBox.ItemMargin" Value="4,0" />
        <Setter Property="hc:PinBox.ItemWidth" Value="{StaticResource DefaultControlHeight}" />
        <Setter Property="hc:PinBox.ItemHeight" Value="{StaticResource DefaultControlHeight}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type hc:PinBox}">
                    <UniformGrid Name="PART_Panel" Columns="{TemplateBinding Length}" Rows="1" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="PoptipBaseStyle" TargetType="{x:Type hc:Poptip}">
        <Setter Property="UIElement.IsHitTestVisible" Value="False" />
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="VerticalAlignment" Value="Top" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="hc:Poptip.Offset" Value="6" />
        <Setter Property="Background" Value="{DynamicResource RegionBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
        <Setter Property="hc:BorderElement.CornerRadius" Value="{StaticResource DefaultCornerRadius}" />
        <Setter Property="Padding" Value="{StaticResource DefaultControlPadding}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type hc:Poptip}">
                    <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}">
                        <ContentPresenter Margin="{TemplateBinding Padding}" ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}" ContentStringFormat="{TemplateBinding ContentStringFormat}" ContentTemplate="{TemplateBinding ContentTemplate}" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ProgressBarFlat4ProgressButton" TargetType="{x:Type ProgressBar}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="hc:BorderElement.CornerRadius" Value="{StaticResource DefaultCornerRadius}" />
        <Setter Property="Foreground" Value="{DynamicResource DarkMaskBrush}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ProgressBar}">
                    <Border Name="PART_Track">
                        <Decorator Name="PART_Indicator" HorizontalAlignment="Left">
                            <Border Name="Indicator" Background="{TemplateBinding Foreground}" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}" />
                        </Decorator>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ProgressButtonBaseStyle" BasedOn="{StaticResource ToggleButtonBaseStyle}" TargetType="{x:Type hc:ProgressButton}">
        <Setter Property="Background" Value="{DynamicResource RegionBrush}" />
        <Setter Property="hc:ProgressButton.ProgressStyle" Value="{StaticResource ProgressBarFlat4ProgressButton}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type hc:ProgressButton}">
                    <ControlTemplate.Triggers>
                        <Trigger Property="UIElement.IsMouseOver" Value="True">
                            <Setter Property="UIElement.Opacity" Value=".9" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="UIElement.Opacity" Value=".6" />
                        </Trigger>
                        <Trigger Property="ToggleButton.IsChecked" Value="True">
                            <Setter TargetName="ProgressBar" Property="Visibility" Value="Visible" />
                            <Setter TargetName="CheckedElement" Property="Visibility" Value="Visible" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="hc:StatusSwitchElement.HideUncheckedElement" Value="True" />
                                <Condition Property="ToggleButton.IsChecked" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="UnCheckedElement" Property="Visibility" Value="Collapsed" />
                        </MultiTrigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="UIElement.Opacity" Value="0.4" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                    <Border Name="Chrome" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}">
                        <hc:SimplePanel>
                            <ProgressBar Name="ProgressBar" Height="Auto" Value="{TemplateBinding Progress}" Maximum="100" Visibility="Collapsed" Style="{TemplateBinding ProgressStyle}" />
                            <ContentPresenter Name="UnCheckedElement" Margin="{TemplateBinding Padding}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                            <ContentPresenter Name="CheckedElement" Margin="{TemplateBinding Padding}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" Visibility="Collapsed" Content="{Binding Path=(hc:StatusSwitchElement.CheckedElement), RelativeSource={RelativeSource TemplatedParent}}" />
                        </hc:SimplePanel>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="PropertyItemToolTipBaseStyle" BasedOn="{StaticResource {x:Type ToolTip}}" TargetType="{x:Type ToolTip}">
        <Setter Property="Padding" Value="10" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToolTip}">
                    <ControlTemplate.Triggers>
                        <Trigger Value="{x:Null}" Property="Content">
                            <Setter TargetName="Presenter" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="Content" Value="">
                            <Setter TargetName="Presenter" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                    <Border Effect="{StaticResource EffectShadow2}" Margin="8" Background="{DynamicResource RegionBrush}" Padding="{TemplateBinding Padding}" BorderThickness="1" BorderBrush="{DynamicResource BorderBrush}" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}">
                        <Grid>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto" />
                                <RowDefinition Height="Auto" />
                            </Grid.RowDefinitions>
                            <ContentPresenter Name="Presenter" Margin="0,0,0,10" />
                            <StackPanel Grid.Row="1" Orientation="Horizontal">
                                <TextBlock TextBlock.FontWeight="Bold" Text="{Binding PropertyTypeName , RelativeSource={RelativeSource AncestorType=hc:PropertyItem}}" />
                                <TextBlock Margin="6,0,0,0" Text="{Binding PropertyName , RelativeSource={RelativeSource AncestorType=hc:PropertyItem}}" />
                            </StackPanel>
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="PropertyItemBaseStyle" TargetType="{x:Type hc:PropertyItem}">
        <Setter Property="Focusable" Value="False" />
        <Setter Property="Margin" Value="0,0,0,6" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type hc:PropertyItem}">
                    <GroupBox Style="{StaticResource GroupBoxOriginal}" TitlePlacement="Left" Header="{TextBlock Padding=0,0,10,0, Text={TemplateBinding DisplayName}, TextTrimming=CharacterEllipsis, Width={Binding Path=(hc:TitleElement.TitleWidth).Value, RelativeSource={RelativeSource TemplatedParent}}, ToolTip={ToolTip Style={StaticResource PropertyItemToolTipBaseStyle}, Content={TemplateBinding Description}}}">
                        <ContentPresenter ContentSource="EditorElement" />
                    </GroupBox>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="PropertyItemsControlBaseStyle" TargetType="{x:Type hc:PropertyItemsControl}">
        <Style.Triggers>
            <Trigger Property="ItemsControl.IsGrouping" Value="False">
                <Setter Property="ScrollViewer.CanContentScroll" Value="True" />
            </Trigger>
        </Style.Triggers>
        <Setter Property="ItemContainerStyle" Value="{StaticResource PropertyItemBaseStyle}" />
        <Setter Property="Focusable" Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type hc:PropertyItemsControl}">
                    <hc:ScrollViewer Focusable="false" ScrollViewer.HorizontalScrollBarVisibility="Disabled">
                        <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                    </hc:ScrollViewer>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="PropertyGroupItemBaseStyle" TargetType="{x:Type GroupItem}">
        <Setter Property="Margin" Value="0,0,0,6" />
        <Setter Property="Padding" Value="10,6,6,0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type GroupItem}">
                    <Expander IsExpanded="True" Header="{Binding Name}">
                        <Border BorderThickness="1,0,1,1" BorderBrush="{DynamicResource BorderBrush}" Background="{DynamicResource RegionBrush}" CornerRadius="0,0,4,4">
                            <ItemsPresenter Margin="{TemplateBinding Padding}" />
                        </Border>
                    </Expander>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="PropertyGridBaseStyle" TargetType="{x:Type hc:PropertyGrid}">
        <Setter Property="hc:PropertyGrid.MaxTitleWidth" Value="200" />
        <Setter Property="hc:PropertyGrid.MinTitleWidth" Value="120" />
        <Setter Property="Focusable" Value="False" />
        <Setter Property="Padding" Value="10" />
        <Setter Property="Background" Value="{DynamicResource RegionBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type hc:PropertyGrid}">
                    <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
                        <Grid Margin="{TemplateBinding Padding}">
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto" />
                                <RowDefinition />
                            </Grid.RowDefinitions>
                            <DockPanel LastChildFill="True" Margin="0,0,0,6">
                                <hc:ButtonGroup Margin="0,0,6,0" Style="{StaticResource ButtonGroupSolid}" Visibility="{Binding ShowSortButton , RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource Boolean2VisibilityConverter}}">
                                    <RadioButton Command="interactivity:ControlCommands.SortByCategory" IsChecked="True">
                                        <Rectangle Width="16" Height="16" Fill="{StaticResource SortByCategoryDrawingBrush}" />
                                    </RadioButton>
                                    <RadioButton Command="interactivity:ControlCommands.SortByName">
                                        <Rectangle Width="16" Height="16" Fill="{StaticResource SortByNameDrawingBrush}" />
                                    </RadioButton>
                                </hc:ButtonGroup>
                                <hc:SearchBar Name="PART_SearchBar" IsRealTime="True" ShowClearButton="True" Style="{StaticResource SearchBarPlus}" />
                            </DockPanel>
                            <hc:PropertyItemsControl Name="PART_ItemsControl" Grid.Row="1" Style="{StaticResource PropertyItemsControlBaseStyle}">
                                <hc:PropertyItemsControl.GroupStyle>
                                    <GroupStyle ContainerStyle="{StaticResource PropertyGroupItemBaseStyle}" />
                                </hc:PropertyItemsControl.GroupStyle>
                            </hc:PropertyItemsControl>
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="RateRateItemBaseStyle" TargetType="{x:Type hc:RateItem}">
        <Setter Property="Focusable" Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type hc:RateItem}">
                    <ControlTemplate.Resources>
                        <Storyboard Name="OnMouseEnter">
                            <DoubleAnimationUsingKeyFrames TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)" TargetName="CanvasRoot">
                                <EasingDoubleKeyFrame KeyTime="0" Value="1.1" />
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)" TargetName="CanvasRoot">
                                <EasingDoubleKeyFrame KeyTime="0" Value="1.1" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard Name="OnMouseLeave">
                            <DoubleAnimationUsingKeyFrames TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)" TargetName="CanvasRoot">
                                <EasingDoubleKeyFrame KeyTime="0" Value="1" />
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)" TargetName="CanvasRoot">
                                <EasingDoubleKeyFrame KeyTime="0" Value="1" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </ControlTemplate.Resources>
                    <ControlTemplate.Triggers>
                        <EventTrigger RoutedEvent="UIElement.MouseEnter" SourceName="CanvasRoot">
                            <BeginStoryboard Storyboard="{StaticResource OnMouseEnter}" />
                        </EventTrigger>
                        <EventTrigger RoutedEvent="UIElement.MouseLeave" SourceName="CanvasRoot">
                            <BeginStoryboard Storyboard="{StaticResource OnMouseLeave}" />
                        </EventTrigger>
                    </ControlTemplate.Triggers>
                    <Canvas Name="CanvasRoot" RenderTransformOrigin="0.5,0.5">
                        <Canvas.RenderTransform>
                            <TransformGroup>
                                <ScaleTransform />
                            </TransformGroup>
                        </Canvas.RenderTransform>
                        <Path Data="{TemplateBinding Icon}" Fill="{TemplateBinding Background}" Stretch="Uniform" Width="{Binding ActualWidth , ElementName=CanvasRoot}" Height="{Binding ActualHeight , ElementName=CanvasRoot}" />
                        <Border Name="PART_Icon" Visibility="Collapsed">
                            <Path HorizontalAlignment="Left" Data="{TemplateBinding Icon}" Fill="{TemplateBinding Foreground}" Stretch="Uniform" Width="{Binding ActualWidth , ElementName=CanvasRoot}" Height="{Binding ActualHeight , ElementName=CanvasRoot}" />
                        </Border>
                    </Canvas>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="RateBaseStyle" TargetType="{x:Type hc:Rate}">
        <Setter Property="Focusable" Value="False" />
        <Setter Property="hc:RegularItemsControl.ItemMargin" Value="5,0" />
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="VerticalAlignment" Value="Top" />
        <Setter Property="hc:Rate.Icon" Value="{StaticResource StarGeometry}" />
        <Setter Property="Foreground" Value="{DynamicResource PrimaryBrush}" />
        <Setter Property="Background" Value="{DynamicResource SecondaryRegionBrush}" />
        <Setter Property="hc:SimpleItemsControl.ItemContainerStyle" Value="{StaticResource RateRateItemBaseStyle}" />
        <Setter Property="hc:Rate.Text" Value="{Binding Value , RelativeSource={RelativeSource Self}, StringFormat={0:0.0}}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type hc:Rate}">
                    <StackPanel Background="Transparent" Orientation="Horizontal">
                        <UniformGrid Name="PART_Panel" Rows="1" Margin="-5,0" />
                        <TextBlock Text="{TemplateBinding Text}" Margin="10,0,0,0" VerticalAlignment="Center" Visibility="{TemplateBinding ShowText , Converter={StaticResource Boolean2VisibilityConverter}}" />
                    </StackPanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="RunningBlockBaseStyle" BasedOn="{StaticResource BaseStyle}" TargetType="{x:Type hc:RunningBlock}">
        <Style.Triggers>
            <Trigger Property="hc:RunningBlock.Orientation" Value="Vertical">
                <Setter Property="Padding" Value="10,0" />
            </Trigger>
        </Style.Triggers>
        <Setter Property="hc:BorderElement.CornerRadius" Value="{StaticResource DefaultCornerRadius}" />
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Padding" Value="0,10" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type hc:RunningBlock}">
                    <hc:RunningBorder Padding="{TemplateBinding Padding}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}">
                        <hc:SimplePanel ClipToBounds="True">
                            <hc:SimplePanel Name="PART_Panel" HorizontalAlignment="Left">
                                <ContentPresenter Name="PART_ContentElement" RenderTransformOrigin="0.5,0.5" HorizontalAlignment="Left">
                                    <ContentPresenter.RenderTransform>
                                        <TransformGroup>
                                            <TranslateTransform />
                                        </TransformGroup>
                                    </ContentPresenter.RenderTransform>
                                </ContentPresenter>
                            </hc:SimplePanel>
                        </hc:SimplePanel>
                    </hc:RunningBorder>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="SeparatorBaseStyle" TargetType="{x:Type Separator}">
        <Setter Property="Background" Value="{DynamicResource BorderBrush}" />
    </Style>
    <Style x:Key="ShieldBaseStyle" BasedOn="{StaticResource BaseStyle}" TargetType="{x:Type hc:Shield}">
        <Setter Property="Height" Value="20" />
        <Setter Property="Foreground" Value="{DynamicResource TextIconBrush}" />
        <Setter Property="hc:BorderElement.CornerRadius" Value="3" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
        <Setter Property="hc:Shield.Color" Value="{DynamicResource PrimaryBrush}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type hc:Shield}">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="Auto" />
                        </Grid.ColumnDefinitions>
                        <Border Grid.Column="0" Background="#555" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource CornerRadiusSplitConverter}, ConverterParameter=1,0,0,1}">
                            <TextBlock Text="{TemplateBinding Subject}" VerticalAlignment="Center" Margin="4,0" />
                        </Border>
                        <Border Grid.Column="1" Background="{TemplateBinding Color}" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource CornerRadiusSplitConverter}, ConverterParameter=0,1,1,0}">
                            <ContentPresenter ContentSource="Status" VerticalAlignment="Center" Margin="4,0" Foreground="{TemplateBinding Foreground}" ContentStringFormat="{TemplateBinding ContentStringFormat}" />
                        </Border>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="SideMenuItemBaseStyle" BasedOn="{StaticResource BaseStyle}" TargetType="{x:Type hc:SideMenuItem}">
        <Setter Property="FrameworkElement.FocusVisualStyle" Value="{StaticResource FocusVisualRadius0Margin0}" />
        <Setter Property="hc:SideMenuItem.Role" Value="Item" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Background" Value="{DynamicResource RegionBrush}" />
        <Setter Property="MinHeight" Value="40" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type hc:SideMenuItem}">
                    <ControlTemplate.Triggers>
                        <Trigger Value="{x:Null}" Property="hc:SideMenuItem.Icon">
                            <Setter TargetName="PresenterIcon" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                        <DataTrigger Value="True" Binding="{Binding IsSelected , RelativeSource={RelativeSource AncestorType=hc:SideMenuItem}}">
                            <Setter Value="{DynamicResource BorderBrush}" Property="BorderBrush" />
                        </DataTrigger>
                        <Trigger Property="hc:SideMenuItem.IsSelected" Value="True">
                            <Setter Value="{Binding Path=(hc:SideMenu.SubSideBrush), RelativeSource={RelativeSource AncestorType=hc:SideMenu}}" Property="BorderBrush" />
                            <Setter Value="{DynamicResource SecondaryRegionBrush}" Property="Background" />
                            <Setter TargetName="PresenterHeader" Property="TextElement.FontWeight" Value="Bold" />
                        </Trigger>
                        <Trigger Property="UIElement.IsMouseOver" Value="true">
                            <Setter Value="{DynamicResource SecondaryRegionBrush}" Property="Background" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                    <Border Name="BorderRoot" Background="{TemplateBinding Background}">
                        <hc:SimplePanel>
                            <Rectangle Width="4" Fill="{TemplateBinding BorderBrush}" HorizontalAlignment="Left" />
                            <ContentControl Margin="4,0,0,0">
                                <DockPanel Margin="{TemplateBinding Padding}">
                                    <ContentControl Name="PresenterIcon" Width="40">
                                        <ContentPresenter ContentSource="Icon" HorizontalAlignment="Center" VerticalAlignment="Center" />
                                    </ContentControl>
                                    <ContentPresenter Name="PresenterHeader" ContentSource="Header" Margin="6,0,0,0" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" />
                                </DockPanel>
                            </ContentControl>
                        </hc:SimplePanel>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="SideMenuItemAccordionBaseStyle" BasedOn="{StaticResource SideMenuItemBaseStyle}" TargetType="{x:Type hc:SideMenuItem}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type hc:SideMenuItem}">
                    <ControlTemplate.Triggers>
                        <Trigger Value="{x:Null}" Property="hc:SideMenuItem.Icon">
                            <Setter TargetName="PresenterIcon" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                        <DataTrigger Value="True" Binding="{Binding IsSelected , RelativeSource={RelativeSource AncestorType=hc:SideMenuItem}}">
                            <Setter Property="BorderBrush" Value="Transparent" />
                        </DataTrigger>
                        <Trigger Property="hc:SideMenuItem.IsSelected" Value="True">
                            <Setter Value="{Binding Path=(hc:SideMenu.SubSideBrush), RelativeSource={RelativeSource AncestorType=hc:SideMenu}}" Property="BorderBrush" />
                            <Setter Value="{DynamicResource SecondaryRegionBrush}" Property="Background" />
                            <Setter TargetName="PresenterHeader" Property="TextElement.FontWeight" Value="Bold" />
                        </Trigger>
                        <Trigger Property="UIElement.IsMouseOver" Value="true">
                            <Setter Value="{DynamicResource SecondaryRegionBrush}" Property="Background" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                    <Border Name="BorderRoot" Background="{TemplateBinding Background}">
                        <hc:SimplePanel>
                            <Rectangle Width="4" Fill="{TemplateBinding BorderBrush}" HorizontalAlignment="Left" />
                            <ContentControl Margin="4,0,0,0">
                                <DockPanel Margin="{TemplateBinding Padding}">
                                    <ContentControl Name="PresenterIcon" Width="40">
                                        <ContentPresenter ContentSource="Icon" HorizontalAlignment="Center" VerticalAlignment="Center" />
                                    </ContentControl>
                                    <ContentPresenter Name="PresenterHeader" ContentSource="Header" Margin="6,0,0,0" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" />
                                </DockPanel>
                            </ContentControl>
                        </hc:SimplePanel>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="SideMenuItemHeaderBaseStyle" BasedOn="{StaticResource BaseStyle}" TargetType="{x:Type hc:SideMenuItem}">
        <Setter Property="FrameworkElement.FocusVisualStyle" Value="{StaticResource FocusVisualRadius0Margin0}" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Background" Value="{DynamicResource RegionBrush}" />
        <Setter Property="hc:SimpleItemsControl.ItemContainerStyle" Value="{StaticResource SideMenuItemBaseStyle}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type hc:SideMenuItem}">
                    <ControlTemplate.Triggers>
                        <Trigger Value="{x:Null}" Property="hc:SideMenuItem.Icon">
                            <Setter TargetName="PresenterIcon" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="hc:SideMenuItem.IsSelected" Value="True">
                            <Setter TargetName="BorderBack" Property="BorderThickness" Value="4,0,0,0" />
                            <Setter TargetName="BorderBack" Value="{Binding Path=(hc:SideMenu.SideBrush), RelativeSource={RelativeSource AncestorType=hc:SideMenu}}" Property="BorderBrush" />
                            <Setter TargetName="PresenterHeader" Property="TextElement.FontWeight" Value="Bold" />
                        </Trigger>
                        <Trigger SourceName="PanelHeader" Property="UIElement.IsMouseOver" Value="true">
                            <Setter TargetName="BorderBack" Value="{DynamicResource SecondaryRegionBrush}" Property="Background" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                    <Border Name="BorderRoot" Background="{TemplateBinding Background}">
                        <Grid>
                            <Grid.RowDefinitions>
                                <RowDefinition MinHeight="48" />
                                <RowDefinition />
                            </Grid.RowDefinitions>
                            <Border Name="BorderBack" Background="{TemplateBinding Background}" />
                            <ContentControl Grid.Row="0" Margin="4,0,0,0">
                                <DockPanel Name="PanelHeader" Margin="{TemplateBinding Padding}" Background="Transparent">
                                    <ContentControl Name="PresenterIcon" Width="40">
                                        <ContentPresenter ContentSource="Icon" HorizontalAlignment="Center" VerticalAlignment="Center" />
                                    </ContentControl>
                                    <ContentPresenter Name="PresenterHeader" ContentSource="Header" Margin="6,0,0,0" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" />
                                </DockPanel>
                            </ContentControl>
                            <StackPanel Name="PART_Panel" Grid.Row="1" Visibility="Collapsed" Height="{Binding PanelAreaLength , RelativeSource={RelativeSource AncestorType=hc:SideMenu}}" />
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="SideMenuItemHeaderAccordionBaseStyle" BasedOn="{StaticResource SideMenuItemHeaderBaseStyle}" TargetType="{x:Type hc:SideMenuItem}">
        <Setter Property="hc:SimpleItemsControl.ItemContainerStyle" Value="{StaticResource SideMenuItemAccordionBaseStyle}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type hc:SideMenuItem}">
                    <ControlTemplate.Triggers>
                        <Trigger Value="{x:Null}" Property="hc:SideMenuItem.Icon">
                            <Setter TargetName="PresenterIcon" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="hc:SideMenuItem.IsSelected" Value="True">
                            <Setter TargetName="BorderBack" Property="BorderThickness" Value="4,0,0,0" />
                            <Setter TargetName="BorderBack" Value="{Binding Path=(hc:SideMenu.SideBrush), RelativeSource={RelativeSource AncestorType=hc:SideMenu}}" Property="BorderBrush" />
                            <Setter TargetName="PresenterHeader" Property="TextElement.FontWeight" Value="Bold" />
                        </Trigger>
                        <Trigger SourceName="PanelHeader" Property="UIElement.IsMouseOver" Value="true">
                            <Setter TargetName="BorderBack" Value="{DynamicResource SecondaryRegionBrush}" Property="Background" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                    <Border Name="BorderRoot" Background="{TemplateBinding Background}">
                        <Grid>
                            <Grid.RowDefinitions>
                                <RowDefinition MinHeight="48" />
                                <RowDefinition />
                            </Grid.RowDefinitions>
                            <Border Name="BorderBack" Background="{TemplateBinding Background}" />
                            <ContentControl Grid.Row="0" Margin="4,0,0,0">
                                <DockPanel Name="PanelHeader" Margin="{TemplateBinding Padding}" Background="Transparent">
                                    <ContentControl Name="PresenterIcon" Width="40">
                                        <ContentPresenter ContentSource="Icon" HorizontalAlignment="Center" VerticalAlignment="Center" />
                                    </ContentControl>
                                    <ContentPresenter Name="PresenterHeader" ContentSource="Header" Margin="6,0,0,0" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" />
                                </DockPanel>
                            </ContentControl>
                            <ScrollViewer Grid.Row="1" Visibility="{Binding Visibility , ElementName=PART_Panel}" Height="{Binding PanelAreaLength , RelativeSource={RelativeSource AncestorType=hc:SideMenu}}">
                                <StackPanel Name="PART_Panel" Visibility="Collapsed" />
                            </ScrollViewer>
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="SideMenuBaseStyle" TargetType="{x:Type hc:SideMenu}">
        <Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="Focusable" Value="False" />
        <Setter Property="Background" Value="{DynamicResource RegionBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
        <Setter Property="hc:SimpleItemsControl.ItemContainerStyle" Value="{StaticResource SideMenuItemHeaderBaseStyle}" />
        <Setter Property="hc:SideMenu.SideBrush" Value="{DynamicResource BorderBrush}" />
        <Setter Property="hc:SideMenu.SubSideBrush" Value="{DynamicResource PrimaryBrush}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type hc:SideMenu}">
                    <Border Name="BorderRoot" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}">
                        <ScrollViewer>
                            <StackPanel Name="PART_Panel" />
                        </ScrollViewer>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="SplitButtonBaseStyle" BasedOn="{StaticResource BaseStyle}" TargetType="{x:Type hc:SplitButton}">
        <Style.Triggers>
            <Trigger Property="UIElement.IsMouseOver" Value="True">
                <Setter Property="UIElement.Opacity" Value=".9" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="UIElement.Opacity" Value=".6" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="UIElement.Opacity" Value="0.4" />
            </Trigger>
        </Style.Triggers>
        <Setter Property="Height" Value="{StaticResource DefaultControlHeight}" />
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
        <Setter Property="Padding" Value="{StaticResource DefaultControlPadding}" />
        <Setter Property="Foreground" Value="{DynamicResource TextIconBrush}" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Background" Value="{DynamicResource RegionBrush}" />
        <Setter Property="hc:BorderElement.CornerRadius" Value="{StaticResource DefaultCornerRadius}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type hc:SplitButton}">
                    <ControlTemplate.Triggers>
                        <Trigger Value="{x:Null}" Property="Content">
                            <Setter TargetName="ContentPresenterMain" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                        <Trigger Value="{x:Null}" Property="hc:IconElement.Geometry">
                            <Setter TargetName="PathMain" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="ContentPresenterMain" Property="Margin" Value="0" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="hc:SplitButton.HitMode" Value="Click" />
                                <Condition SourceName="PART_Arrow" Property="ToggleButton.IsChecked" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter Property="hc:SplitButton.IsDropDownOpen" Value="True" />
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                    <hc:SimplePanel Name="templateRoot">
                        <Border Background="{TemplateBinding Background}" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}" />
                        <Border BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}">
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition />
                                    <ColumnDefinition Width="Auto" />
                                </Grid.ColumnDefinitions>
                                <StackPanel Orientation="Horizontal" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Margin="{TemplateBinding Padding}">
                                    <Path Name="PathMain" Width="{TemplateBinding Width}" Height="{TemplateBinding Height}" Fill="{TemplateBinding Foreground}" SnapsToDevicePixels="True" Stretch="Uniform" Data="{TemplateBinding Geometry}" />
                                    <ContentPresenter Name="ContentPresenterMain" RecognizesAccessKey="True" VerticalAlignment="Center" Margin="6,0,0,0" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                                </StackPanel>
                                <ToggleButton Name="PART_Arrow" Foreground="{TemplateBinding Foreground}" Width="22" Height="Auto" Padding="0,10,8,10" HorizontalContentAlignment="Left" Grid.Column="1" Style="{StaticResource ToggleButtonIconTransparent}" GeometrySelected="{StaticResource UpGeometry}" Geometry="{StaticResource DownGeometry}" IsChecked="{Binding IsDropDownOpen , Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" />
                            </Grid>
                        </Border>
                        <Popup AllowsTransparency="true" StaysOpen="False" Margin="1" PopupAnimation="Fade" Placement="Bottom" IsOpen="{Binding IsDropDownOpen , Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}">
                            <Border Name="dropDownBorder" MaxHeight="{TemplateBinding MaxDropDownHeight}" BorderBrush="{DynamicResource BorderBrush}" BorderThickness="1" Background="{DynamicResource RegionBrush}" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}" MinWidth="{Binding ActualWidth , ElementName=templateRoot}">
                                <ScrollViewer Name="DropDownScrollViewer" Margin="0,4">
                                    <hc:SimplePanel ClearTypeHint="Enabled">
                                        <Canvas HorizontalAlignment="Left" Height="0" VerticalAlignment="Top" Width="0">
                                            <Rectangle Name="opaqueRect" Fill="{Binding Background , ElementName=dropDownBorder}" Height="{Binding ActualHeight , ElementName=dropDownBorder}" Width="{Binding ActualWidth , ElementName=dropDownBorder}" />
                                        </Canvas>
                                        <ContentPresenter ContentSource="DropDownContent" />
                                    </hc:SimplePanel>
                                </ScrollViewer>
                            </Border>
                        </Popup>
                    </hc:SimplePanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="{x:Static StatusBar.SeparatorStyleKey}" BasedOn="{StaticResource SeparatorBaseStyle}" TargetType="{x:Type Separator}" />
    <Style x:Key="StatusBarBaseStyle" TargetType="{x:Type StatusBar}">
        <Setter Property="BorderThickness" Value="0,1,0,0" />
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
        <Setter Property="Background" Value="{DynamicResource RegionBrush}" />
    </Style>
    <Style x:Key="StatusBarItemBaseStyle" TargetType="{x:Type StatusBarItem}">
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="UIElement.Opacity" Value="0.4" />
            </Trigger>
        </Style.Triggers>
        <Setter Property="Foreground" Value="{DynamicResource PrimaryTextBrush}" />
        <Setter Property="Padding" Value="{StaticResource DefaultControlPadding}" />
    </Style>
    <Style x:Key="StepBarItemBaseStyle" TargetType="{x:Type hc:StepBarItem}">
        <Style.Triggers>
            <Trigger Property="hc:StepBarItem.Status" Value="Complete">
                <Setter Property="Foreground" Value="{DynamicResource PrimaryTextBrush}" />
            </Trigger>
            <Trigger Property="hc:StepBarItem.Status" Value="UnderWay">
                <Setter Property="Foreground" Value="{DynamicResource PrimaryBrush}" />
            </Trigger>
            <Trigger Property="hc:StepBarItem.Status" Value="Waiting">
                <Setter Property="Foreground" Value="{DynamicResource ThirdlyTextBrush}" />
            </Trigger>
        </Style.Triggers>
        <Setter Property="Focusable" Value="False" />
        <Setter Property="Foreground" Value="{DynamicResource ThirdlyTextBrush}" />
    </Style>
    <Style x:Key="StepBarItemHorizontalTop" BasedOn="{StaticResource StepBarItemBaseStyle}" TargetType="{x:Type hc:StepBarItem}">
        <Setter Property="Margin" Value="10,0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type hc:StepBarItem}">
                    <StackPanel>
                        <Border Background="{DynamicResource RegionBrush}" HorizontalAlignment="Center" CornerRadius="12" BorderThickness="2" BorderBrush="{TemplateBinding Foreground}" Height="24" MinWidth="24">
                            <TextBlock Foreground="{TemplateBinding Foreground}" Style="{StaticResource TextBlockDefaultThiLight}" Text="{Binding Index , RelativeSource={RelativeSource TemplatedParent}}" />
                        </Border>
                        <ContentPresenter HorizontalAlignment="Center" Foreground="{TemplateBinding Foreground}" Margin="0,4,0,0" ContentTemplate="{Binding ItemTemplate , RelativeSource={RelativeSource AncestorType=hc:StepBar}}" />
                    </StackPanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="StepBarItemHorizontalBottom" BasedOn="{StaticResource StepBarItemBaseStyle}" TargetType="{x:Type hc:StepBarItem}">
        <Setter Property="Margin" Value="10,0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type hc:StepBarItem}">
                    <StackPanel>
                        <ContentPresenter HorizontalAlignment="Center" Foreground="{TemplateBinding Foreground}" Margin="0,0,0,4" ContentTemplate="{Binding ItemTemplate , RelativeSource={RelativeSource AncestorType=hc:StepBar}}" />
                        <Border Background="{DynamicResource RegionBrush}" HorizontalAlignment="Center" CornerRadius="12" BorderThickness="2" BorderBrush="{TemplateBinding Foreground}" Height="24" MinWidth="24">
                            <TextBlock Foreground="{TemplateBinding Foreground}" Style="{StaticResource TextBlockDefaultThiLight}" Text="{Binding Index , RelativeSource={RelativeSource TemplatedParent}}" />
                        </Border>
                    </StackPanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="StepBarItemVerticalLeft" BasedOn="{StaticResource StepBarItemBaseStyle}" TargetType="{x:Type hc:StepBarItem}">
        <Setter Property="Margin" Value="0, 10" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type hc:StepBarItem}">
                    <StackPanel Orientation="Horizontal">
                        <Border Background="{DynamicResource RegionBrush}" HorizontalAlignment="Center" CornerRadius="12" BorderThickness="2" BorderBrush="{TemplateBinding Foreground}" Height="24" MinWidth="24">
                            <TextBlock Foreground="{TemplateBinding Foreground}" Style="{StaticResource TextBlockDefaultThiLight}" Text="{Binding Index , RelativeSource={RelativeSource TemplatedParent}}" />
                        </Border>
                        <ContentPresenter HorizontalAlignment="Left" Foreground="{TemplateBinding Foreground}" Margin="10,4,0,0" ContentTemplate="{Binding ItemTemplate , RelativeSource={RelativeSource AncestorType=hc:StepBar}}" />
                    </StackPanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <ControlTemplate x:Key="StepBarHorizontalTopControlTemplate" TargetType="{x:Type hc:StepBar}">
        <hc:SimplePanel>
            <ProgressBar Name="PART_ProgressBarBack" HorizontalAlignment="Center" VerticalAlignment="Top" Margin="0,10,0,0" Style="{StaticResource ProgressBarFlat}" Background="{DynamicResource ThirdlyTextBrush}" />
            <ItemsPresenter />
        </hc:SimplePanel>
    </ControlTemplate>
    <ControlTemplate x:Key="StepBarHorizontalBottomControlTemplate" TargetType="{x:Type hc:StepBar}">
        <hc:SimplePanel>
            <ProgressBar Name="PART_ProgressBarBack" HorizontalAlignment="Center" VerticalAlignment="Bottom" Margin="0,0,0,10" Style="{StaticResource ProgressBarFlat}" Background="{DynamicResource ThirdlyTextBrush}" />
            <ItemsPresenter VerticalAlignment="Bottom" />
        </hc:SimplePanel>
    </ControlTemplate>
    <ControlTemplate x:Key="StepBarVerticalLeftControlTemplate" TargetType="{x:Type hc:StepBar}">
        <hc:SimplePanel>
            <ProgressBar Name="PART_ProgressBarBack" Orientation="Vertical" Width="4" HorizontalAlignment="Left" VerticalAlignment="Center" Margin="10,0,0,0" Style="{StaticResource ProgressBarFlat}" Background="{DynamicResource ThirdlyTextBrush}" RenderTransformOrigin="0.5,0.5">
                <ProgressBar.RenderTransform>
                    <TransformGroup>
                        <RotateTransform Angle="180" />
                    </TransformGroup>
                </ProgressBar.RenderTransform>
            </ProgressBar>
            <ItemsPresenter />
        </hc:SimplePanel>
    </ControlTemplate>
    <Style x:Key="StepBarBaseStyle" TargetType="{x:Type hc:StepBar}">
        <Style.Triggers>
            <Trigger Property="hc:StepBar.Dock" Value="Left">
                <Setter Property="ItemContainerStyle" Value="{StaticResource StepBarItemVerticalLeft}" />
                <Setter Property="Template" Value="{StaticResource StepBarVerticalLeftControlTemplate}" />
                <Setter Property="ItemsPanel" Value="{StaticResource StepBarVerticalItemsPanelTemplate}" />
            </Trigger>
            <Trigger Property="hc:StepBar.Dock" Value="Bottom">
                <Setter Property="ItemContainerStyle" Value="{StaticResource StepBarItemHorizontalBottom}" />
                <Setter Property="Template" Value="{StaticResource StepBarHorizontalBottomControlTemplate}" />
                <Setter Property="ItemsPanel" Value="{StaticResource StepBarHorizontalItemsPanelTemplate}" />
            </Trigger>
            <Trigger Property="hc:StepBar.Dock" Value="Right">
                <Setter Property="FlowDirection" Value="RightToLeft" />
                <Setter Property="ItemContainerStyle" Value="{StaticResource StepBarItemVerticalLeft}" />
                <Setter Property="Template" Value="{StaticResource StepBarVerticalLeftControlTemplate}" />
                <Setter Property="ItemsPanel" Value="{StaticResource StepBarVerticalItemsPanelTemplate}" />
            </Trigger>
        </Style.Triggers>
        <Setter Property="Focusable" Value="False" />
        <Setter Property="ItemContainerStyle" Value="{StaticResource StepBarItemHorizontalTop}" />
        <Setter Property="Template" Value="{StaticResource StepBarHorizontalTopControlTemplate}" />
        <Setter Property="ItemsPanel" Value="{StaticResource StepBarHorizontalItemsPanelTemplate}" />
    </Style>
    <Style x:Key="TabItemStyle" TargetType="{x:Type TabItem}">
        <Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="Foreground" Value="{DynamicResource PrimaryTextBrush}" />
        <Setter Property="Background" Value="{DynamicResource RegionBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource PrimaryBrush}" />
        <Setter Property="Margin" Value="0" />
        <Setter Property="Padding" Value="{StaticResource DefaultControlPadding}" />
        <Setter Property="MinHeight" Value="{StaticResource DefaultControlHeight}" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="VerticalContentAlignment" Value="Stretch" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TabItem}">
                    <ControlTemplate.Triggers>
                        <Trigger Property="TabItem.IsSelected" Value="False">
                            <Setter TargetName="mainBorder" Property="BorderThickness" Value="0,0,0,0" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="contentPresenter" Property="UIElement.Opacity" Value="0.4" />
                        </Trigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsSelected , RelativeSource={RelativeSource Self}}" Value="true" />
                                <Condition Binding="{Binding TabStripPlacement , RelativeSource={RelativeSource AncestorType=TabControl}}" Value="Top" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Panel.ZIndex" Value="1" />
                            <Setter Value="{DynamicResource PrimaryBrush}" TargetName="contentPresenter" Property="Foreground" />
                            <Setter TargetName="mainBorder" Property="BorderThickness" Value="0,0,0,3" />
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsSelected , RelativeSource={RelativeSource Self}}" Value="true" />
                                <Condition Binding="{Binding TabStripPlacement , RelativeSource={RelativeSource AncestorType=TabControl}}" Value="Left" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Panel.ZIndex" Value="1" />
                            <Setter Value="{DynamicResource PrimaryBrush}" TargetName="contentPresenter" Property="Foreground" />
                            <Setter TargetName="mainBorder" Property="BorderThickness" Value="0,0,3,0" />
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsSelected , RelativeSource={RelativeSource Self}}" Value="true" />
                                <Condition Binding="{Binding TabStripPlacement , RelativeSource={RelativeSource AncestorType=TabControl}}" Value="Bottom" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Panel.ZIndex" Value="1" />
                            <Setter Value="{DynamicResource PrimaryBrush}" TargetName="contentPresenter" Property="Foreground" />
                            <Setter TargetName="mainBorder" Property="BorderThickness" Value="0,3,0,0" />
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsSelected , RelativeSource={RelativeSource Self}}" Value="true" />
                                <Condition Binding="{Binding TabStripPlacement , RelativeSource={RelativeSource AncestorType=TabControl}}" Value="Right" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Panel.ZIndex" Value="1" />
                            <Setter Value="{DynamicResource PrimaryBrush}" TargetName="contentPresenter" Property="Foreground" />
                            <Setter TargetName="mainBorder" Property="BorderThickness" Value="3,0,0,0" />
                        </MultiDataTrigger>
                    </ControlTemplate.Triggers>
                    <hc:SimplePanel Name="templateRoot" SnapsToDevicePixels="true">
                        <Border Name="mainBorder" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="0" Background="{TemplateBinding Background}" Margin="0" />
                        <ContentPresenter Name="contentPresenter" Foreground="{DynamicResource PrimaryTextBrush}" ContentSource="Header" Focusable="False" HorizontalAlignment="Center" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="Center" />
                    </hc:SimplePanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="TabControlBaseStyle" TargetType="{x:Type TabControl}">
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
        <Setter Property="Background" Value="{DynamicResource RegionBrush}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Foreground" Value="White" />
        <Setter Property="ItemContainerStyle" Value="{StaticResource TabItemStyle}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TabControl}">
                    <ControlTemplate.Triggers>
                        <Trigger Property="TabControl.TabStripPlacement" Value="Bottom">
                            <Setter TargetName="RowDefinition0" Property="Height" Value="*" />
                            <Setter TargetName="RowDefinition1" Property="Height" Value="Auto" />
                            <Setter TargetName="headerPanel" Property="Grid.Row" Value="1" />
                            <Setter TargetName="contentPanel" Property="Grid.Row" Value="0" />
                            <Setter TargetName="contentPanel" Value="{Binding BorderThickness , RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource ThicknessSplitConverter}, ConverterParameter=0,0,0,1}" Property="BorderThickness" />
                        </Trigger>
                        <Trigger Property="TabControl.TabStripPlacement" Value="Left">
                            <Setter TargetName="RowDefinition0" Property="Height" Value="*" />
                            <Setter TargetName="RowDefinition1" Property="Height" Value="0" />
                            <Setter TargetName="ColumnDefinition0" Property="Width" Value="Auto" />
                            <Setter TargetName="ColumnDefinition1" Property="Width" Value="*" />
                            <Setter TargetName="headerPanel" Property="Grid.Column" Value="0" />
                            <Setter TargetName="headerPanel" Property="Grid.Row" Value="0" />
                            <Setter TargetName="contentPanel" Property="Grid.Column" Value="1" />
                            <Setter TargetName="contentPanel" Property="Grid.Row" Value="0" />
                            <Setter TargetName="contentPanel" Value="{Binding BorderThickness , RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource ThicknessSplitConverter}, ConverterParameter=1,0,0,0}" Property="BorderThickness" />
                        </Trigger>
                        <Trigger Property="TabControl.TabStripPlacement" Value="Right">
                            <Setter TargetName="RowDefinition0" Property="Height" Value="*" />
                            <Setter TargetName="RowDefinition1" Property="Height" Value="0" />
                            <Setter TargetName="ColumnDefinition0" Property="Width" Value="*" />
                            <Setter TargetName="ColumnDefinition1" Property="Width" Value="Auto" />
                            <Setter TargetName="headerPanel" Property="Grid.Column" Value="1" />
                            <Setter TargetName="headerPanel" Property="Grid.Row" Value="0" />
                            <Setter TargetName="contentPanel" Property="Grid.Column" Value="0" />
                            <Setter TargetName="contentPanel" Property="Grid.Row" Value="0" />
                            <Setter TargetName="contentPanel" Value="{Binding BorderThickness , RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource ThicknessSplitConverter}, ConverterParameter=0,0,1,0}" Property="BorderThickness" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                    <Grid Name="templateRoot" Background="{TemplateBinding Background}" ClipToBounds="true" SnapsToDevicePixels="true" TabNavigation="Local">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Name="ColumnDefinition0" />
                            <ColumnDefinition Name="ColumnDefinition1" Width="0" />
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Name="RowDefinition0" Height="Auto" />
                            <RowDefinition Name="RowDefinition1" Height="*" />
                        </Grid.RowDefinitions>
                        <TabPanel Name="headerPanel" Background="Transparent" Grid.Column="0" IsItemsHost="true" Margin="0" Grid.Row="0" TabIndex="1" ZIndex="1" />
                        <Border Name="contentPanel" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" BorderBrush="{DynamicResource BorderBrush}" Background="{TemplateBinding Background}" Grid.Column="0" DirectionalNavigation="Contained" Grid.Row="1" TabIndex="2" TabNavigation="Local" BorderThickness="{Binding BorderThickness , RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource ThicknessSplitConverter}, ConverterParameter=0,1,0,0}">
                            <ContentPresenter Name="PART_SelectedContentHost" ContentSource="SelectedContent" Margin="0" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        </Border>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="TabItemCapsuleBaseStyle" TargetType="{x:Type TabItem}">
        <Style.Triggers>
            <Trigger Property="TabItem.IsSelected" Value="True">
                <Setter Property="Panel.ZIndex" Value="{x:Static system:Int32.MaxValue}" />
            </Trigger>
        </Style.Triggers>
        <Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="Background" Value="{DynamicResource RegionBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource PrimaryTextBrush}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="hc:BorderElement.CornerRadius" Value="0" />
        <Setter Property="MinHeight" Value="{StaticResource DefaultControlHeight}" />
        <Setter Property="Padding" Value="10,0" />
        <Setter Property="Margin" Value="-1,0,0,0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TabItem}">
                    <ControlTemplate.Triggers>
                        <Trigger Property="UIElement.IsMouseOver" Value="True">
                            <Setter Value="{DynamicResource SecondaryRegionBrush}" TargetName="BorderRoot" Property="Background" />
                            <Setter Value="{DynamicResource PrimaryBrush}" TargetName="contentPresenter" Property="Foreground" />
                        </Trigger>
                        <Trigger Property="TabItem.IsSelected" Value="true">
                            <Setter TargetName="BorderRoot" Value="{Binding Path=(hc:TitleElement.BorderBrush), RelativeSource={RelativeSource TemplatedParent}}" Property="BorderBrush" />
                            <Setter TargetName="BorderRoot" Value="{Binding Path=(hc:TitleElement.Background), RelativeSource={RelativeSource TemplatedParent}}" Property="Background" />
                            <Setter TargetName="contentPresenter" Value="{Binding Path=(hc:TitleElement.Foreground), RelativeSource={RelativeSource TemplatedParent}}" Property="Foreground" />
                        </Trigger>
                        <DataTrigger Value="Left" Binding="{Binding TabStripPlacement , RelativeSource={RelativeSource AncestorType=TabControl}}">
                            <Setter Property="Margin" Value="0,-1,0,0" />
                        </DataTrigger>
                        <DataTrigger Value="Right" Binding="{Binding TabStripPlacement , RelativeSource={RelativeSource AncestorType=TabControl}}">
                            <Setter Property="Margin" Value="0,-1,0,0" />
                        </DataTrigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="contentPresenter" Property="UIElement.Opacity" Value="0.4" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                    <Border Name="BorderRoot" Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}">
                        <ContentPresenter Name="contentPresenter" ContentSource="Header" Foreground="{TemplateBinding Foreground}" Focusable="False" HorizontalAlignment="Center" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="Center" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="TabItemPlusBaseStyle" TargetType="{x:Type hc:TabItem}">
        <Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="Foreground" Value="{DynamicResource PrimaryTextBrush}" />
        <Setter Property="Background" Value="{DynamicResource SecondaryRegionBrush}" />
        <Setter Property="BorderThickness" Value="1,0,1,1" />
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
        <Setter Property="Margin" Value="0" />
        <Setter Property="Padding" Value="10,0,0,0" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="VerticalContentAlignment" Value="Stretch" />
        <Setter Property="hc:TabItem.Menu" Value="{StaticResource TabItemMenu}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type hc:TabItem}">
                    <ControlTemplate.Triggers>
                        <Trigger Property="TabItem.IsSelected" Value="true">
                            <Setter Property="Panel.ZIndex" Value="1" />
                            <Setter TargetName="innerBorder" Property="Visibility" Value="Visible" />
                            <Setter TargetName="BorderMask" Value="{DynamicResource RegionBrush}" Property="Background" />
                        </Trigger>
                        <Trigger Value="{x:Null}" Property="hc:IconElement.Geometry">
                            <Setter TargetName="PathMain" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="hc:TabItem.ShowCloseButton" Value="True">
                            <Setter TargetName="BorderMask" Property="Margin" Value="0,0,0,1" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="contentPresenter" Property="UIElement.Opacity" Value="0.4" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                    <Grid Name="templateRoot" SnapsToDevicePixels="true" ContextMenu="{TemplateBinding Menu}">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition />
                            <ColumnDefinition Width="Auto" />
                        </Grid.ColumnDefinitions>
                        <Border Name="mainBorder" Grid.ColumnSpan="3" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}" Margin="0">
                            <Border Name="innerBorder" Margin="0,0,0,-1" Background="{DynamicResource RegionBrush}" Visibility="Collapsed" />
                        </Border>
                        <Path Name="PathMain" Margin="10,0,0,0" Grid.Column="0" Width="{TemplateBinding Width}" Height="{TemplateBinding Height}" Fill="{TemplateBinding Foreground}" SnapsToDevicePixels="True" Stretch="Uniform" Data="{TemplateBinding Geometry}" />
                        <ContentPresenter Name="contentPresenter" Grid.Column="1" ContentSource="Header" Focusable="False" HorizontalAlignment="Stretch" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="Center" />
                        <Border Name="BorderMask" Grid.Column="1" HorizontalAlignment="Right" Width="20" Background="{TemplateBinding Background}" Margin="0,0,1,1">
                            <Border.OpacityMask>
                                <LinearGradientBrush EndPoint="1,0" StartPoint="0,0">
                                    <GradientStop Color="White" Offset="1" />
                                    <GradientStop Offset="0" />
                                </LinearGradientBrush>
                            </Border.OpacityMask>
                        </Border>
                        <Button Grid.Column="2" Focusable="False" Command="interactivity:ControlCommands.Close" Background="Transparent" Style="{StaticResource ButtonCustom}" Width="28" Visibility="{TemplateBinding ShowCloseButton , Converter={StaticResource Boolean2VisibilityConverter}}">
                            <Path Fill="{DynamicResource PrimaryTextBrush}" Width="8" Height="8" Style="{StaticResource ClosePathStyle}" />
                        </Button>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <ControlTemplate x:Key="TabControlPlusTemplate" TargetType="{x:Type hc:TabControl}">
        <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}">
            <Grid Name="templateRoot" ClipToBounds="true" SnapsToDevicePixels="true" TabNavigation="Local">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Name="ColumnDefinition0" />
                    <ColumnDefinition Name="ColumnDefinition1" Width="0" />
                </Grid.ColumnDefinitions>
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto" />
                    <RowDefinition Height="*" />
                </Grid.RowDefinitions>
                <Border Background="{TemplateBinding Background}" BorderThickness="0,0,0,1" BorderBrush="{DynamicResource BorderBrush}">
                    <hc:TabPanel Name="PART_HeaderPanel" MinHeight="{TemplateBinding TabItemHeight}" TabItemHeight="{TemplateBinding TabItemHeight}" TabItemWidth="{TemplateBinding TabItemWidth}" IsTabFillEnabled="{TemplateBinding IsTabFillEnabled}" Margin="0,0,-1,-1" HorizontalAlignment="Left" Background="{DynamicResource SecondaryTextBrush}" IsItemsHost="true" TabIndex="1" ZIndex="1">
                        <hc:TabPanel.Behaviors>
                            <interactivity:FluidMoveBehavior AppliesTo="Children" Duration="{Binding FluidMoveDuration , ElementName=PART_HeaderPanel}" EaseX="{CubicEase EasingMode=EaseOut}" />
                        </hc:TabPanel.Behaviors>
                    </hc:TabPanel>
                </Border>
                <Border Name="contentPanel" Background="{DynamicResource SecondaryRegionBrush}" Grid.Column="0" DirectionalNavigation="Contained" Grid.Row="1" TabIndex="2" TabNavigation="Local">
                    <ContentPresenter Name="PART_SelectedContentHost" ContentSource="SelectedContent" Margin="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                </Border>
                <Border Margin="0,-1,0,0" Grid.Row="0" Grid.Column="0" BorderThickness="1,0,0,1" BorderBrush="{DynamicResource BorderBrush}" Background="{DynamicResource RegionBrush}" HorizontalAlignment="Right" Visibility="{Binding Visibility , ElementName=PART_OverflowButton}">
                    <hc:ContextMenuToggleButton Name="PART_OverflowButton" Visibility="Collapsed" Style="{StaticResource ToggleButtonIconTransparent}" Geometry="{StaticResource DownGeometry}" GeometrySelected="{StaticResource UpGeometry}" />
                </Border>
            </Grid>
        </Border>
    </ControlTemplate>
    <ControlTemplate x:Key="TabControlPlusScrollableTemplate" TargetType="{x:Type hc:TabControl}">
        <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}">
            <Grid Name="templateRoot" ClipToBounds="true" SnapsToDevicePixels="true" TabNavigation="Local">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition />
                    <ColumnDefinition Width="Auto" />
                </Grid.ColumnDefinitions>
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto" />
                    <RowDefinition Height="*" />
                </Grid.RowDefinitions>
                <Border Margin="0,-1,0,0" Grid.Row="0" Grid.Column="0" BorderThickness="0,0,1,1" BorderBrush="{DynamicResource BorderBrush}" Background="{DynamicResource RegionBrush}" HorizontalAlignment="Left" ZIndex="2" Visibility="{TemplateBinding ShowScrollButton , Converter={StaticResource Boolean2VisibilityConverter}}" CacheMode="{BitmapCache SnapsToDevicePixels=True}">
                    <RepeatButton Name="PART_ScrollButtonLeft" Focusable="False" Style="{StaticResource RepeatButtonIcon}" Padding="8" Geometry="{StaticResource LeftGeometry}" Foreground="{DynamicResource PrimaryTextBrush}" Background="{DynamicResource SecondaryRegionBrush}" />
                </Border>
                <hc:ScrollViewer Name="PART_OverflowScrollviewer" ScrollViewer.HorizontalScrollBarVisibility="Hidden" CanMouseWheel="True" Orientation="Horizontal" IsInertiaEnabled="True" Grid.Row="0" Grid.Column="1" IsDeferredScrollingEnabled="True">
                    <Border Name="PART_HeaderBorder" Background="{TemplateBinding Background}" BorderThickness="0,0,0,1" BorderBrush="{DynamicResource BorderBrush}">
                        <hc:TabPanel Name="PART_HeaderPanel" MinHeight="{TemplateBinding TabItemHeight}" TabItemHeight="{TemplateBinding TabItemHeight}" TabItemWidth="{TemplateBinding TabItemWidth}" IsTabFillEnabled="{TemplateBinding IsTabFillEnabled}" Margin="0,0,-1,-1" HorizontalAlignment="Left" Background="{DynamicResource SecondaryTextBrush}" IsItemsHost="true" TabIndex="1" ZIndex="1">
                            <hc:TabPanel.Behaviors>
                                <interactivity:FluidMoveBehavior AppliesTo="Children" Duration="{Binding FluidMoveDuration , ElementName=PART_HeaderPanel}" EaseX="{CubicEase EasingMode=EaseOut}" />
                            </hc:TabPanel.Behaviors>
                        </hc:TabPanel>
                    </Border>
                </hc:ScrollViewer>
                <Border Margin="0,-1,0,0" Grid.Row="0" Grid.Column="2" BorderThickness="1,0,0,1" BorderBrush="{DynamicResource BorderBrush}" Background="{DynamicResource RegionBrush}" HorizontalAlignment="Right" CacheMode="{BitmapCache SnapsToDevicePixels=True}">
                    <StackPanel Orientation="Horizontal">
                        <RepeatButton Name="PART_ScrollButtonRight" Focusable="False" Style="{StaticResource RepeatButtonIcon}" BorderBrush="{DynamicResource BorderBrush}" Padding="8" Geometry="{StaticResource RightGeometry}" Foreground="{DynamicResource PrimaryTextBrush}" Background="{DynamicResource SecondaryRegionBrush}" Visibility="{TemplateBinding ShowScrollButton , Converter={StaticResource Boolean2VisibilityConverter}}" />
                        <Border Width="1" Background="{DynamicResource BorderBrush}" Visibility="{Binding Visibility , ElementName=PART_OverflowButton}" />
                        <hc:ContextMenuToggleButton Name="PART_OverflowButton" Visibility="Collapsed" Style="{StaticResource ToggleButtonIconTransparent}" Geometry="{StaticResource DownGeometry}" GeometrySelected="{StaticResource UpGeometry}" />
                    </StackPanel>
                </Border>
                <Border Name="contentPanel" Background="{DynamicResource SecondaryRegionBrush}" DirectionalNavigation="Contained" Grid.Row="1" Grid.Column="0" Grid.ColumnSpan="3" TabIndex="2" TabNavigation="Local">
                    <ContentPresenter Name="PART_SelectedContentHost" ContentSource="SelectedContent" Margin="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                </Border>
            </Grid>
        </Border>
    </ControlTemplate>
    <Style x:Key="TabControlPlusBaseStyle" TargetType="{x:Type hc:TabControl}">
        <Style.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="hc:TabControl.IsScrollable" Value="True" />
                    <Condition Property="hc:TabControl.IsTabFillEnabled" Value="False" />
                </MultiTrigger.Conditions>
                <Setter Property="Template" Value="{StaticResource TabControlPlusScrollableTemplate}" />
            </MultiTrigger>
        </Style.Triggers>
        <Setter Property="Padding" Value="0" />
        <Setter Property="Background" Value="{DynamicResource SecondaryRegionBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="ItemContainerStyle" Value="{StaticResource TabItemPlusBaseStyle}" />
        <Setter Property="Template" Value="{StaticResource TabControlPlusTemplate}" />
    </Style>
    <Style x:Key="TimePickerBaseStyle" TargetType="{x:Type hc:TimePicker}">
        <Setter Property="Foreground" Value="{DynamicResource PrimaryTextBrush}" />
        <Setter Property="hc:BorderElement.CornerRadius" Value="{StaticResource DefaultCornerRadius}" />
        <Setter Property="Padding" Value="{StaticResource DefaultInputPadding}" />
        <Setter Property="Background" Value="{DynamicResource RegionBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
        <Setter Property="MinHeight" Value="{StaticResource DefaultControlHeight}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="hc:TimePicker.CaretBrush" Value="{DynamicResource PrimaryTextBrush}" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Validation.ErrorTemplate" Value="{x:Null}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type hc:TimePicker}">
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter TargetName="templateRoot" Property="UIElement.Opacity" Value="0.4" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="UIElement.IsMouseOver" Value="true" />
                                <Condition SourceName="PART_Popup" Property="IsOpen" Value="false" />
                            </MultiTrigger.Conditions>
                            <Setter Value="{DynamicResource SecondaryBorderBrush}" Property="BorderBrush" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="UIElement.IsMouseOver" Value="true" />
                                <Condition SourceName="PART_Popup" Property="IsOpen" Value="true" />
                            </MultiTrigger.Conditions>
                            <Setter Value="{DynamicResource PrimaryBrush}" Property="BorderBrush" />
                        </MultiTrigger>
                        <Trigger SourceName="PART_TextBox" Property="UIElement.IsFocused" Value="true">
                            <Setter Value="{DynamicResource PrimaryBrush}" Property="BorderBrush" />
                        </Trigger>
                        <Trigger SourceName="PART_Popup" Property="IsOpen" Value="True">
                            <Setter Value="{DynamicResource PrimaryBrush}" Property="BorderBrush" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                    <Border Name="templateRoot" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}">
                        <Grid Name="PART_Root" HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*" />
                                <ColumnDefinition Width="30" />
                            </Grid.ColumnDefinitions>
                            <Button Name="PART_Button" Height="{x:Static system:Double.NaN}" Style="{StaticResource ButtonIcon}" Padding="7,6" Geometry="{StaticResource ClockGeometry}" Grid.Column="1" Focusable="False" Grid.Row="0" Foreground="{Binding BorderBrush , ElementName=templateRoot}" />
                            <hc:WatermarkTextBox Name="PART_TextBox" CaretBrush="{TemplateBinding CaretBrush}" Foreground="{TemplateBinding Foreground}" Padding="{TemplateBinding Padding}" HorizontalAlignment="Stretch" Grid.Column="0" Focusable="{TemplateBinding Focusable}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" Grid.Row="0" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" />
                            <Popup Name="PART_Popup" Grid.Column="0" PopupAnimation="{StaticResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}" AllowsTransparency="True" Placement="Bottom" StaysOpen="False" PlacementTarget="{Binding ElementName=templateRoot}" />
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <ControlTemplate x:Key="TimePickerExtendTopTemplate" TargetType="{x:Type hc:TimePicker}">
        <ControlTemplate.Triggers>
            <Trigger Property="IsEnabled" Value="false">
                <Setter TargetName="templateRoot" Property="UIElement.Opacity" Value="0.4" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition SourceName="templateRoot" Property="UIElement.IsMouseOver" Value="true" />
                    <Condition SourceName="PART_Popup" Property="IsOpen" Value="false" />
                </MultiTrigger.Conditions>
                <Setter Value="{DynamicResource SecondaryBorderBrush}" Property="BorderBrush" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition SourceName="templateRoot" Property="UIElement.IsMouseOver" Value="true" />
                    <Condition SourceName="PART_Popup" Property="IsOpen" Value="true" />
                </MultiTrigger.Conditions>
                <Setter Value="{DynamicResource PrimaryBrush}" Property="BorderBrush" />
            </MultiTrigger>
            <Trigger SourceName="PART_TextBox" Property="UIElement.IsFocused" Value="true">
                <Setter TargetName="templateRoot" Value="{DynamicResource PrimaryBrush}" Property="BorderBrush" />
            </Trigger>
            <Trigger SourceName="PART_Popup" Property="IsOpen" Value="True">
                <Setter Value="{DynamicResource PrimaryBrush}" Property="BorderBrush" />
            </Trigger>
        </ControlTemplate.Triggers>
        <Grid>
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition MinHeight="{Binding Path=(hc:InfoElement.MinContentHeight), RelativeSource={RelativeSource TemplatedParent}}" Height="{Binding Path=(hc:InfoElement.ContentHeight), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource Double2GridLengthConverter}}" />
            </Grid.RowDefinitions>
            <DockPanel LastChildFill="True" Margin="{TemplateBinding Padding}" Visibility="{Binding Path=(hc:InfoElement.Title), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource String2VisibilityConverter}}" HorizontalAlignment="{Binding Path=(hc:TitleElement.HorizontalAlignment), RelativeSource={RelativeSource TemplatedParent}}">
                <ContentPresenter DockPanel.Dock="Right" Foreground="{DynamicResource DangerBrush}" Margin="4,0,0,0" Content="{Binding Path=(hc:InfoElement.Symbol), RelativeSource={RelativeSource TemplatedParent}}" Visibility="{Binding Path=(hc:InfoElement.Necessary), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource Boolean2VisibilityConverter}}" />
                <TextBlock AutoTooltip="True" TextWrapping="NoWrap" TextTrimming="CharacterEllipsis" Margin="1,0,1,0" Text="{Binding Path=(hc:InfoElement.Title), RelativeSource={RelativeSource TemplatedParent}}" />
            </DockPanel>
            <Border Name="templateRoot" Grid.Row="1" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}">
                <Grid Name="PART_Root" HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="*" />
                        <ColumnDefinition Width="30" />
                    </Grid.ColumnDefinitions>
                    <Button Name="PART_Button" Height="{x:Static system:Double.NaN}" Style="{StaticResource ButtonIcon}" Padding="7,6" Geometry="{StaticResource ClockGeometry}" Grid.Column="1" Focusable="False" Grid.Row="0" Foreground="{Binding BorderBrush , ElementName=templateRoot}" />
                    <hc:WatermarkTextBox Name="PART_TextBox" CaretBrush="{TemplateBinding CaretBrush}" Foreground="{TemplateBinding Foreground}" Padding="{TemplateBinding Padding}" HorizontalAlignment="Stretch" Grid.Column="0" Focusable="{TemplateBinding Focusable}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" Grid.Row="0" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" Watermark="{Binding Path=(hc:InfoElement.Placeholder), RelativeSource={RelativeSource TemplatedParent}}" />
                    <Popup Name="PART_Popup" Grid.Column="0" PopupAnimation="{StaticResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}" AllowsTransparency="True" Placement="Bottom" StaysOpen="False" PlacementTarget="{Binding ElementName=templateRoot}" />
                </Grid>
            </Border>
        </Grid>
    </ControlTemplate>
    <ControlTemplate x:Key="TimePickerExtendLeftTemplate" TargetType="{x:Type hc:TimePicker}">
        <ControlTemplate.Triggers>
            <Trigger Property="IsEnabled" Value="false">
                <Setter TargetName="templateRoot" Property="UIElement.Opacity" Value="0.4" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition SourceName="templateRoot" Property="UIElement.IsMouseOver" Value="true" />
                    <Condition SourceName="PART_Popup" Property="IsOpen" Value="false" />
                </MultiTrigger.Conditions>
                <Setter Value="{DynamicResource SecondaryBorderBrush}" Property="BorderBrush" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition SourceName="templateRoot" Property="UIElement.IsMouseOver" Value="true" />
                    <Condition SourceName="PART_Popup" Property="IsOpen" Value="true" />
                </MultiTrigger.Conditions>
                <Setter Value="{DynamicResource PrimaryBrush}" Property="BorderBrush" />
            </MultiTrigger>
            <Trigger SourceName="PART_TextBox" Property="UIElement.IsFocused" Value="true">
                <Setter TargetName="templateRoot" Value="{DynamicResource PrimaryBrush}" Property="BorderBrush" />
            </Trigger>
            <Trigger SourceName="PART_Popup" Property="IsOpen" Value="True">
                <Setter Value="{DynamicResource PrimaryBrush}" Property="BorderBrush" />
            </Trigger>
        </ControlTemplate.Triggers>
        <Grid MinHeight="{Binding Path=(hc:InfoElement.MinContentHeight), RelativeSource={RelativeSource TemplatedParent}}" Height="{Binding Path=(hc:InfoElement.ContentHeight), RelativeSource={RelativeSource TemplatedParent}}">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="{Binding Path=(hc:InfoElement.TitleWidth), RelativeSource={RelativeSource TemplatedParent}}" />
                <ColumnDefinition />
            </Grid.ColumnDefinitions>
            <DockPanel LastChildFill="True" Margin="0,7,6,7" Visibility="{Binding Path=(hc:InfoElement.Title), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource String2VisibilityConverter}}" HorizontalAlignment="{Binding Path=(hc:TitleElement.HorizontalAlignment), RelativeSource={RelativeSource TemplatedParent}}" VerticalAlignment="{Binding Path=(hc:TitleElement.VerticalAlignment), RelativeSource={RelativeSource TemplatedParent}}">
                <ContentPresenter DockPanel.Dock="Right" Foreground="{DynamicResource DangerBrush}" Margin="4,0,0,0" Content="{Binding Path=(hc:InfoElement.Symbol), RelativeSource={RelativeSource TemplatedParent}}" Visibility="{Binding Path=(hc:InfoElement.Necessary), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource Boolean2VisibilityConverter}}" />
                <TextBlock AutoTooltip="True" TextWrapping="NoWrap" TextTrimming="CharacterEllipsis" Text="{Binding Path=(hc:InfoElement.Title), RelativeSource={RelativeSource TemplatedParent}}" />
            </DockPanel>
            <Border Name="templateRoot" Grid.Column="1" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}">
                <Grid Name="PART_Root" HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="*" />
                        <ColumnDefinition Width="30" />
                    </Grid.ColumnDefinitions>
                    <Button Name="PART_Button" Height="{x:Static system:Double.NaN}" Style="{StaticResource ButtonIcon}" Padding="7,6" Geometry="{StaticResource ClockGeometry}" Grid.Column="1" Focusable="False" Grid.Row="0" Foreground="{Binding BorderBrush , ElementName=templateRoot}" />
                    <hc:WatermarkTextBox Name="PART_TextBox" CaretBrush="{TemplateBinding CaretBrush}" Foreground="{TemplateBinding Foreground}" Padding="{TemplateBinding Padding}" HorizontalAlignment="Stretch" Grid.Column="0" Focusable="{TemplateBinding Focusable}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" Grid.Row="0" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" Watermark="{Binding Path=(hc:InfoElement.Placeholder), RelativeSource={RelativeSource TemplatedParent}}" />
                    <Popup Name="PART_Popup" Grid.Column="0" PopupAnimation="{StaticResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}" AllowsTransparency="True" Placement="Bottom" StaysOpen="False" PlacementTarget="{Binding ElementName=templateRoot}" />
                </Grid>
            </Border>
        </Grid>
    </ControlTemplate>
    <Style x:Key="TimePickerExtendBaseStyle" BasedOn="{StaticResource TimePickerBaseStyle}" TargetType="{x:Type hc:TimePicker}">
        <Style.Triggers>
            <Trigger Property="hc:TitleElement.TitlePlacement" Value="Left">
                <Setter Property="Template" Value="{StaticResource TimePickerExtendLeftTemplate}" />
                <Setter Property="Width" Value="Auto" />
            </Trigger>
        </Style.Triggers>
        <Setter Property="Height" Value="Auto" />
        <Setter Property="hc:InfoElement.Symbol" Value="●" />
        <Setter Property="hc:InfoElement.ContentHeight" Value="{x:Static system:Double.NaN}" />
        <Setter Property="hc:InfoElement.MinContentHeight" Value="{StaticResource DefaultControlHeight}" />
        <Setter Property="Template" Value="{StaticResource TimePickerExtendTopTemplate}" />
    </Style>
    <ControlTemplate x:Key="TimePickerPlusTopTemplate" TargetType="{x:Type hc:TimePicker}">
        <ControlTemplate.Resources>
            <Storyboard Name="StoryboardShow">
                <ThicknessAnimation TargetName="TextBlockError" TargetProperty="Margin" To="9,0,0,-18" Duration="0:0:.2" />
            </Storyboard>
            <Storyboard Name="StoryboardHidden">
                <ThicknessAnimation TargetName="TextBlockError" TargetProperty="Margin" To="9,0,0,4" Duration="0:0:0" />
            </Storyboard>
        </ControlTemplate.Resources>
        <ControlTemplate.Triggers>
            <Trigger Property="IsEnabled" Value="false">
                <Setter TargetName="templateRoot" Property="UIElement.Opacity" Value="0.4" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition SourceName="templateRoot" Property="UIElement.IsMouseOver" Value="true" />
                    <Condition SourceName="PART_Popup" Property="IsOpen" Value="false" />
                </MultiTrigger.Conditions>
                <Setter Value="{DynamicResource SecondaryBorderBrush}" Property="BorderBrush" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition SourceName="templateRoot" Property="UIElement.IsMouseOver" Value="true" />
                    <Condition SourceName="PART_Popup" Property="IsOpen" Value="true" />
                </MultiTrigger.Conditions>
                <Setter Value="{DynamicResource PrimaryBrush}" Property="BorderBrush" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition SourceName="templateRoot" Property="UIElement.IsMouseOver" Value="true" />
                    <Condition Property="hc:TimePicker.ShowClearButton" Value="True" />
                </MultiTrigger.Conditions>
                <Setter TargetName="ButtonClear" Property="Visibility" Value="Visible" />
            </MultiTrigger>
            <Trigger SourceName="PART_TextBox" Property="UIElement.IsFocused" Value="true">
                <Setter TargetName="templateRoot" Value="{DynamicResource PrimaryBrush}" Property="BorderBrush" />
            </Trigger>
            <Trigger SourceName="PART_Popup" Property="IsOpen" Value="True">
                <Setter Value="{DynamicResource PrimaryBrush}" Property="BorderBrush" />
            </Trigger>
            <Trigger Property="hc:TimePicker.IsError" Value="true">
                <Trigger.EnterActions>
                    <BeginStoryboard Storyboard="{StaticResource StoryboardShow}" />
                </Trigger.EnterActions>
                <Trigger.ExitActions>
                    <BeginStoryboard Storyboard="{StaticResource StoryboardHidden}" />
                </Trigger.ExitActions>
                <Setter TargetName="templateRoot" Value="{DynamicResource DangerBrush}" Property="BorderBrush" />
            </Trigger>
        </ControlTemplate.Triggers>
        <Grid>
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition MinHeight="{Binding Path=(hc:InfoElement.MinContentHeight), RelativeSource={RelativeSource TemplatedParent}}" Height="{Binding Path=(hc:InfoElement.ContentHeight), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource Double2GridLengthConverter}}" />
            </Grid.RowDefinitions>
            <DockPanel LastChildFill="True" Margin="{TemplateBinding Padding}" Visibility="{Binding Path=(hc:InfoElement.Title), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource String2VisibilityConverter}}" HorizontalAlignment="{Binding Path=(hc:TitleElement.HorizontalAlignment), RelativeSource={RelativeSource TemplatedParent}}">
                <ContentPresenter DockPanel.Dock="Right" Foreground="{DynamicResource DangerBrush}" Margin="4,0,0,0" Content="{Binding Path=(hc:InfoElement.Symbol), RelativeSource={RelativeSource TemplatedParent}}" Visibility="{Binding Path=(hc:InfoElement.Necessary), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource Boolean2VisibilityConverter}}" />
                <TextBlock AutoTooltip="True" TextWrapping="NoWrap" TextTrimming="CharacterEllipsis" Margin="1,0,1,0" Text="{Binding Path=(hc:InfoElement.Title), RelativeSource={RelativeSource TemplatedParent}}" />
            </DockPanel>
            <TextBlock Name="TextBlockError" Grid.Row="1" TextBlock.FontSize="12" Text="{TemplateBinding ErrorStr}" VerticalAlignment="Bottom" Margin="9,0,0,4" Foreground="{DynamicResource DangerBrush}" />
            <Border Name="templateRoot" Grid.Row="1" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}">
                <Grid Name="PART_Root" HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition />
                        <ColumnDefinition Width="Auto" />
                        <ColumnDefinition Width="25" />
                    </Grid.ColumnDefinitions>
                    <Button Name="ButtonClear" Height="{x:Static system:Double.NaN}" Command="interactivity:ControlCommands.Clear" Visibility="Collapsed" Width="16" Grid.Column="1" Style="{StaticResource ButtonIcon}" Padding="0,6" Geometry="{StaticResource DeleteFillCircleGeometry}" Foreground="{Binding BorderBrush , ElementName=templateRoot}" />
                    <Button Name="PART_Button" Height="{x:Static system:Double.NaN}" Style="{StaticResource ButtonIcon}" Padding="2,6,7,6" Geometry="{StaticResource ClockGeometry}" Grid.Column="2" Focusable="False" Grid.Row="0" Foreground="{Binding BorderBrush , ElementName=templateRoot}" />
                    <hc:WatermarkTextBox Name="PART_TextBox" CaretBrush="{TemplateBinding CaretBrush}" Foreground="{TemplateBinding Foreground}" Padding="{TemplateBinding Padding}" HorizontalAlignment="Stretch" Grid.Column="0" Focusable="{TemplateBinding Focusable}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" Grid.Row="0" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" Watermark="{Binding Path=(hc:InfoElement.Placeholder), RelativeSource={RelativeSource TemplatedParent}}" />
                    <Popup Name="PART_Popup" Grid.Column="0" PopupAnimation="{StaticResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}" AllowsTransparency="True" Placement="Bottom" StaysOpen="False" PlacementTarget="{Binding ElementName=templateRoot}" />
                </Grid>
            </Border>
        </Grid>
    </ControlTemplate>
    <ControlTemplate x:Key="TimePickerPlusLeftTemplate" TargetType="{x:Type hc:TimePicker}">
        <ControlTemplate.Resources>
            <Storyboard Name="StoryboardShow">
                <ThicknessAnimation TargetName="TextBlockError" TargetProperty="Margin" To="9,0,0,-18" Duration="0:0:.2" />
            </Storyboard>
            <Storyboard Name="StoryboardHidden">
                <ThicknessAnimation TargetName="TextBlockError" TargetProperty="Margin" To="9,0,0,4" Duration="0:0:0" />
            </Storyboard>
        </ControlTemplate.Resources>
        <ControlTemplate.Triggers>
            <Trigger Property="IsEnabled" Value="false">
                <Setter TargetName="templateRoot" Property="UIElement.Opacity" Value="0.4" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition SourceName="templateRoot" Property="UIElement.IsMouseOver" Value="true" />
                    <Condition SourceName="PART_Popup" Property="IsOpen" Value="false" />
                </MultiTrigger.Conditions>
                <Setter Value="{DynamicResource SecondaryBorderBrush}" Property="BorderBrush" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition SourceName="templateRoot" Property="UIElement.IsMouseOver" Value="true" />
                    <Condition SourceName="PART_Popup" Property="IsOpen" Value="true" />
                </MultiTrigger.Conditions>
                <Setter Value="{DynamicResource PrimaryBrush}" Property="BorderBrush" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition SourceName="templateRoot" Property="UIElement.IsMouseOver" Value="true" />
                    <Condition Property="hc:TimePicker.ShowClearButton" Value="True" />
                </MultiTrigger.Conditions>
                <Setter TargetName="ButtonClear" Property="Visibility" Value="Visible" />
            </MultiTrigger>
            <Trigger SourceName="PART_TextBox" Property="UIElement.IsFocused" Value="true">
                <Setter TargetName="templateRoot" Value="{DynamicResource PrimaryBrush}" Property="BorderBrush" />
            </Trigger>
            <Trigger SourceName="PART_Popup" Property="IsOpen" Value="True">
                <Setter Value="{DynamicResource PrimaryBrush}" Property="BorderBrush" />
            </Trigger>
            <Trigger Property="hc:TimePicker.IsError" Value="true">
                <Trigger.EnterActions>
                    <BeginStoryboard Storyboard="{StaticResource StoryboardShow}" />
                </Trigger.EnterActions>
                <Trigger.ExitActions>
                    <BeginStoryboard Storyboard="{StaticResource StoryboardHidden}" />
                </Trigger.ExitActions>
                <Setter TargetName="templateRoot" Value="{DynamicResource DangerBrush}" Property="BorderBrush" />
            </Trigger>
        </ControlTemplate.Triggers>
        <Grid MinHeight="{Binding Path=(hc:InfoElement.MinContentHeight), RelativeSource={RelativeSource TemplatedParent}}" Height="{Binding Path=(hc:InfoElement.ContentHeight), RelativeSource={RelativeSource TemplatedParent}}">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="{Binding Path=(hc:InfoElement.TitleWidth), RelativeSource={RelativeSource TemplatedParent}}" />
                <ColumnDefinition />
            </Grid.ColumnDefinitions>
            <DockPanel LastChildFill="True" Margin="0,7,6,7" Visibility="{Binding Path=(hc:InfoElement.Title), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource String2VisibilityConverter}}" HorizontalAlignment="{Binding Path=(hc:TitleElement.HorizontalAlignment), RelativeSource={RelativeSource TemplatedParent}}" VerticalAlignment="{Binding Path=(hc:TitleElement.VerticalAlignment), RelativeSource={RelativeSource TemplatedParent}}">
                <ContentPresenter DockPanel.Dock="Right" Foreground="{DynamicResource DangerBrush}" Margin="4,0,0,0" Content="{Binding Path=(hc:InfoElement.Symbol), RelativeSource={RelativeSource TemplatedParent}}" Visibility="{Binding Path=(hc:InfoElement.Necessary), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource Boolean2VisibilityConverter}}" />
                <TextBlock AutoTooltip="True" TextWrapping="NoWrap" TextTrimming="CharacterEllipsis" Text="{Binding Path=(hc:InfoElement.Title), RelativeSource={RelativeSource TemplatedParent}}" />
            </DockPanel>
            <TextBlock Name="TextBlockError" TextBlock.FontSize="12" Text="{TemplateBinding ErrorStr}" VerticalAlignment="Bottom" Margin="9,0,0,4" Foreground="{DynamicResource DangerBrush}" Grid.Column="1" />
            <Border Name="templateRoot" Grid.Column="1" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}">
                <Grid Name="PART_Root" HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition />
                        <ColumnDefinition Width="Auto" />
                        <ColumnDefinition Width="25" />
                    </Grid.ColumnDefinitions>
                    <Button Name="ButtonClear" Height="{x:Static system:Double.NaN}" Command="interactivity:ControlCommands.Clear" Visibility="Collapsed" Width="16" Grid.Column="1" Style="{StaticResource ButtonIcon}" Padding="0,6" Geometry="{StaticResource DeleteFillCircleGeometry}" Foreground="{Binding BorderBrush , ElementName=templateRoot}" />
                    <Button Name="PART_Button" Height="{x:Static system:Double.NaN}" Style="{StaticResource ButtonIcon}" Padding="2,6,7,6" Geometry="{StaticResource ClockGeometry}" Grid.Column="2" Focusable="False" Grid.Row="0" Foreground="{Binding BorderBrush , ElementName=templateRoot}" />
                    <hc:WatermarkTextBox Name="PART_TextBox" CaretBrush="{TemplateBinding CaretBrush}" Foreground="{TemplateBinding Foreground}" Padding="{TemplateBinding Padding}" HorizontalAlignment="Stretch" Grid.Column="0" Focusable="{TemplateBinding Focusable}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" Grid.Row="0" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" Watermark="{Binding Path=(hc:InfoElement.Placeholder), RelativeSource={RelativeSource TemplatedParent}}" />
                    <Popup Name="PART_Popup" Grid.Column="0" PopupAnimation="{StaticResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}" AllowsTransparency="True" Placement="Bottom" StaysOpen="False" PlacementTarget="{Binding ElementName=templateRoot}" />
                </Grid>
            </Border>
        </Grid>
    </ControlTemplate>
    <Style x:Key="TimePickerPlusBaseStyle" BasedOn="{StaticResource TimePickerExtendBaseStyle}" TargetType="{x:Type hc:TimePicker}">
        <Style.Triggers>
            <Trigger Property="hc:TitleElement.TitlePlacement" Value="Left">
                <Setter Property="Template" Value="{StaticResource TimePickerPlusLeftTemplate}" />
                <Setter Property="Width" Value="Auto" />
            </Trigger>
        </Style.Triggers>
        <Setter Property="hc:TimePicker.IsError" Value="{Binding Path=(Validation.HasError), RelativeSource={RelativeSource Self}}" />
        <Setter Property="Template" Value="{StaticResource TimePickerPlusTopTemplate}" />
    </Style>
    <Style x:Key="{x:Static ToolBar.SeparatorStyleKey}" TargetType="{x:Type Separator}">
        <Setter Property="Background" Value="{DynamicResource BorderBrush}" />
        <Setter Property="Width" Value="1" />
    </Style>
    <Style x:Key="{x:Static ToolBar.ButtonStyleKey}" BasedOn="{StaticResource ButtonBaseStyle}" TargetType="{x:Type Button}">
        <Style.Triggers>
            <Trigger Property="UIElement.IsMouseOver" Value="True">
                <Setter Property="Background" Value="{DynamicResource DarkDefaultBrush}" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background" Value="{DynamicResource BorderBrush}" />
            </Trigger>
        </Style.Triggers>
        <Setter Property="Foreground" Value="{DynamicResource PrimaryTextBrush}" />
        <Setter Property="BorderThickness" Value="1" />
    </Style>
    <Style x:Key="{x:Static ToolBar.CheckBoxStyleKey}" BasedOn="{StaticResource CheckBoxBaseStyle}" TargetType="{x:Type CheckBox}" />
    <Style x:Key="{x:Static ToolBar.RadioButtonStyleKey}" BasedOn="{StaticResource RadioButtonBaseStyle}" TargetType="{x:Type RadioButton}" />
    <Style x:Key="{x:Static ToolBar.ComboBoxStyleKey}" BasedOn="{StaticResource ComboBoxBaseStyle}" TargetType="{x:Type ComboBox}" />
    <Style x:Key="{x:Static ToolBar.TextBoxStyleKey}" BasedOn="{StaticResource TextBoxBaseStyle}" TargetType="{x:Type TextBox}" />
    <Style x:Key="{x:Static ToolBar.MenuStyleKey}" BasedOn="{StaticResource MenuBaseStyle}" TargetType="{x:Type Menu}" />
    <Style x:Key="{x:Static ToolBar.ToggleButtonStyleKey}" BasedOn="{StaticResource ToggleButtonBaseStyle}" TargetType="{x:Type ToggleButton}">
        <Style.Triggers>
            <Trigger Property="UIElement.IsMouseOver" Value="True">
                <Setter Property="Background" Value="{DynamicResource DarkDefaultBrush}" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background" Value="{DynamicResource BorderBrush}" />
            </Trigger>
        </Style.Triggers>
        <Setter Property="Background" Value="{DynamicResource RegionBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource PrimaryTextBrush}" />
        <Setter Property="BorderThickness" Value="1" />
    </Style>
    <Style x:Key="ToolBarThumbHorizontalStyle" TargetType="{x:Type Thumb}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <ControlTemplate.Triggers>
                        <Trigger Property="UIElement.IsMouseOver" Value="true">
                            <Setter Property="FrameworkElement.Cursor" Value="SizeAll" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                    <Border SnapsToDevicePixels="True" Padding="{TemplateBinding Padding}" Background="Transparent">
                        <Path Stretch="Uniform" Width="4" Fill="{DynamicResource PrimaryBrush}" Data="{StaticResource DragVerticalGeometry}" SnapsToDevicePixels="True" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ToolBarThumbVerticalStyle" TargetType="{x:Type Thumb}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <ControlTemplate.Triggers>
                        <Trigger Property="UIElement.IsMouseOver" Value="true">
                            <Setter Property="FrameworkElement.Cursor" Value="SizeAll" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                    <Border SnapsToDevicePixels="True" Padding="{TemplateBinding Padding}" Background="Transparent">
                        <Path Stretch="Uniform" Height="4" Fill="{DynamicResource PrimaryBrush}" Data="{StaticResource DragHorizontalGeometry}" SnapsToDevicePixels="True" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ToolBarVerticalOverflowButtonStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="Background" Value="{DynamicResource SecondaryRegionBrush}" />
        <Setter Property="MinHeight" Value="0" />
        <Setter Property="MinWidth" Value="0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <ControlTemplate.Triggers>
                        <Trigger Property="UIElement.IsMouseOver" Value="true">
                            <Setter TargetName="PathMore" Value="{DynamicResource PrimaryBrush}" Property="Fill" />
                        </Trigger>
                        <Trigger Property="UIElement.IsKeyboardFocused" Value="true">
                            <Setter TargetName="PathMore" Value="{DynamicResource PrimaryBrush}" Property="Fill" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Visibility" Value="Collapsed" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                    <Border Name="Bd" SnapsToDevicePixels="true" CornerRadius="4" Background="{TemplateBinding Background}">
                        <Path Name="PathMore" Data="{StaticResource RightGeometry}" Height="8" Margin="4,4,8,4" HorizontalAlignment="Right" Fill="{DynamicResource PrimaryTextBrush}" Stretch="Uniform" SnapsToDevicePixels="True" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ToolBarHorizontalOverflowButtonStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="Background" Value="{DynamicResource SecondaryRegionBrush}" />
        <Setter Property="MinHeight" Value="0" />
        <Setter Property="MinWidth" Value="0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <ControlTemplate.Triggers>
                        <Trigger Property="UIElement.IsMouseOver" Value="true">
                            <Setter TargetName="PathMore" Value="{DynamicResource PrimaryBrush}" Property="Fill" />
                        </Trigger>
                        <Trigger Property="UIElement.IsKeyboardFocused" Value="true">
                            <Setter TargetName="PathMore" Value="{DynamicResource PrimaryBrush}" Property="Fill" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Visibility" Value="Collapsed" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                    <Border Name="Bd" SnapsToDevicePixels="true" CornerRadius="4" Background="{TemplateBinding Background}">
                        <Path Name="PathMore" Data="{StaticResource DownGeometry}" Width="8" Margin="4,4,4,8" VerticalAlignment="Bottom" Fill="{DynamicResource PrimaryTextBrush}" Stretch="Uniform" SnapsToDevicePixels="True" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <ControlTemplate x:Key="ToolBarVerticalTemplate" TargetType="{x:Type ToolBar}">
        <ControlTemplate.Triggers>
            <Trigger Property="ToolBar.IsOverflowOpen" Value="true">
                <Setter TargetName="ToolBarThumb" Property="IsEnabled" Value="false" />
            </Trigger>
            <Trigger Value="{x:Null}" Property="Header">
                <Setter TargetName="ToolBarHeader" Property="Visibility" Value="Collapsed" />
            </Trigger>
            <Trigger Property="ToolBarTray.IsLocked" Value="true">
                <Setter TargetName="ToolBarThumb" Property="Visibility" Value="Collapsed" />
            </Trigger>
        </ControlTemplate.Triggers>
        <Grid Name="Grid" SnapsToDevicePixels="true">
            <Grid.RowDefinitions>
                <RowDefinition />
                <RowDefinition Height="Auto" />
            </Grid.RowDefinitions>
            <hc:SimplePanel Name="OverflowGrid" Grid.Row="1">
                <ToggleButton Name="OverflowButton" Margin="0,4,0,0" ClickMode="Press" IsEnabled="{TemplateBinding HasOverflowItems}" Style="{StaticResource ToolBarVerticalOverflowButtonStyle}" FocusVisualStyle="{x:Null}" IsChecked="{Binding IsOverflowOpen , Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" />
                <Popup Name="OverflowPopup" AllowsTransparency="true" Focusable="false" PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}" Placement="Right" StaysOpen="false" IsOpen="{Binding IsOverflowOpen , RelativeSource={RelativeSource TemplatedParent}}">
                    <Border Name="ToolBarSubMenuBorder" BorderBrush="{DynamicResource BorderBrush}" BorderThickness="1" Background="{DynamicResource RegionBrush}" ClearTypeHint="Enabled" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}">
                        <ToolBarOverflowPanel Name="PART_ToolBarOverflowPanel" DirectionalNavigation="Cycle" Focusable="true" Margin="6" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" TabNavigation="Cycle" WrapWidth="200" FocusVisualStyle="{x:Null}" />
                    </Border>
                </Popup>
            </hc:SimplePanel>
            <Border Name="MainPanelBorder" Grid.Row="0" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}">
                <DockPanel TabIndex="1" TabNavigation="Local">
                    <Thumb Name="ToolBarThumb" DockPanel.Dock="Top" Style="{StaticResource ToolBarThumbVerticalStyle}" Height="10" />
                    <ContentPresenter Name="ToolBarHeader" DockPanel.Dock="Top" ContentSource="Header" HorizontalAlignment="Center" Margin="0,4,0,4" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="Center" />
                    <ToolBarPanel Name="PART_ToolBarPanel" IsItemsHost="true" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                </DockPanel>
            </Border>
        </Grid>
    </ControlTemplate>
    <ControlTemplate x:Key="ToolBarHorizontalTemplate" TargetType="{x:Type ToolBar}">
        <ControlTemplate.Triggers>
            <Trigger Property="ToolBar.IsOverflowOpen" Value="true">
                <Setter TargetName="ToolBarThumb" Property="IsEnabled" Value="false" />
            </Trigger>
            <Trigger Value="{x:Null}" Property="Header">
                <Setter TargetName="ToolBarHeader" Property="Visibility" Value="Collapsed" />
            </Trigger>
            <Trigger Property="ToolBarTray.IsLocked" Value="true">
                <Setter TargetName="ToolBarThumb" Property="Visibility" Value="Collapsed" />
            </Trigger>
        </ControlTemplate.Triggers>
        <Grid Name="Grid" SnapsToDevicePixels="true">
            <Grid.ColumnDefinitions>
                <ColumnDefinition />
                <ColumnDefinition Width="Auto" />
            </Grid.ColumnDefinitions>
            <hc:SimplePanel Name="OverflowGrid" Grid.Column="1">
                <ToggleButton Name="OverflowButton" Margin="4,0,0,0" ClickMode="Press" IsEnabled="{TemplateBinding HasOverflowItems}" Style="{StaticResource ToolBarHorizontalOverflowButtonStyle}" FocusVisualStyle="{x:Null}" IsChecked="{Binding IsOverflowOpen , Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" />
                <Popup Name="OverflowPopup" AllowsTransparency="true" Focusable="false" PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}" Placement="Bottom" StaysOpen="false" IsOpen="{Binding IsOverflowOpen , RelativeSource={RelativeSource TemplatedParent}}">
                    <Border Name="ToolBarSubMenuBorder" BorderBrush="{DynamicResource BorderBrush}" BorderThickness="1" Background="{DynamicResource RegionBrush}" ClearTypeHint="Enabled" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}">
                        <ToolBarOverflowPanel Name="PART_ToolBarOverflowPanel" DirectionalNavigation="Cycle" Focusable="true" Margin="6" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" TabNavigation="Cycle" WrapWidth="200" FocusVisualStyle="{x:Null}" />
                    </Border>
                </Popup>
            </hc:SimplePanel>
            <Border Name="MainPanelBorder" Grid.Column="0" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}">
                <DockPanel TabIndex="1" TabNavigation="Local">
                    <Thumb Name="ToolBarThumb" Style="{StaticResource ToolBarThumbHorizontalStyle}" Width="10" />
                    <ContentPresenter Name="ToolBarHeader" ContentSource="Header" HorizontalAlignment="Center" Margin="4,0,4,0" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="Center" />
                    <ToolBarPanel Name="PART_ToolBarPanel" IsItemsHost="true" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                </DockPanel>
            </Border>
        </Grid>
    </ControlTemplate>
    <Style x:Key="ToolBarBaseStyle" TargetType="{x:Type ToolBar}">
        <Style.Triggers>
            <Trigger Property="ToolBar.Orientation" Value="Vertical">
                <Setter Property="Template" Value="{StaticResource ToolBarVerticalTemplate}" />
            </Trigger>
        </Style.Triggers>
        <Setter Property="Background" Value="{DynamicResource SecondaryRegionBrush}" />
        <Setter Property="hc:BorderElement.CornerRadius" Value="{StaticResource DefaultCornerRadius}" />
        <Setter Property="Margin" Value="0,0,4,4" />
        <Setter Property="Template" Value="{StaticResource ToolBarHorizontalTemplate}" />
    </Style>
    <Style x:Key="ToolTipBaseStyle" TargetType="{x:Type ToolTip}">
        <Setter Property="Padding" Value="0,6" />
        <Setter Property="Background" Value="White" />
        <Setter Property="Foreground" Value="{DynamicResource PrimaryTextBrush}" />
        <Setter Property="FontSize" Value="12" />
        <Setter Property="hc:BorderElement.CornerRadius" Value="2" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToolTip}">
                    <Border Effect="{StaticResource EffectShadow2}" Margin="8" Background="{DynamicResource RegionBrush}" Padding="{TemplateBinding Padding}" BorderThickness="1" BorderBrush="{DynamicResource BorderBrush}" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}">
                        <ContentPresenter Margin="10,0" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="TransferItemBaseStyle" BasedOn="{StaticResource BaseStyle}" TargetType="{x:Type hc:TransferItem}">
        <Style.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="hc:TransferItem.IsOrigin" Value="True" />
                    <Condition Property="hc:TransferItem.IsTransferred" Value="False" />
                </MultiTrigger.Conditions>
                <Setter Property="Visibility" Value="Visible" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="hc:TransferItem.IsOrigin" Value="True" />
                    <Condition Property="hc:TransferItem.IsTransferred" Value="True" />
                </MultiTrigger.Conditions>
                <Setter Property="Visibility" Value="Collapsed" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="hc:TransferItem.IsOrigin" Value="False" />
                    <Condition Property="hc:TransferItem.IsTransferred" Value="True" />
                </MultiTrigger.Conditions>
                <Setter Property="Visibility" Value="Visible" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="hc:TransferItem.IsOrigin" Value="False" />
                    <Condition Property="hc:TransferItem.IsTransferred" Value="False" />
                </MultiTrigger.Conditions>
                <Setter Property="Visibility" Value="Collapsed" />
            </MultiTrigger>
        </Style.Triggers>
        <Setter Property="FrameworkElement.FocusVisualStyle" Value="{StaticResource FocusVisualMargin0}" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="hc:SelectableItem.CanDeselect" Value="True" />
        <Setter Property="hc:SelectableItem.SelfManage" Value="True" />
        <Setter Property="Padding" Value="10, 0" />
        <Setter Property="MinHeight" Value="{StaticResource DefaultControlHeight}" />
        <Setter Property="Margin" Value="5,0,5,5" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type hc:TransferItem}">
                    <ControlTemplate.Triggers>
                        <Trigger Property="hc:SelectableItem.IsSelected" Value="True">
                            <Setter TargetName="BorderRoot" Value="{DynamicResource PrimaryBrush}" Property="Background" />
                            <Setter TargetName="ContentPresenter" Value="{DynamicResource TextIconBrush}" Property="Foreground" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                    <Border Name="BorderRoot" Background="{DynamicResource RegionBrush}" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}">
                        <ContentPresenter Name="ContentPresenter" VerticalAlignment="Center" Margin="{TemplateBinding Padding}" ContentTemplate="{Binding ItemTemplate , RelativeSource={RelativeSource AncestorType=hc:TransferGroup}}" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="TransferGroupBaseStyle" TargetType="{x:Type hc:TransferGroup}">
        <Setter Property="Focusable" Value="False" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Background" Value="{DynamicResource SecondaryRegionBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type hc:TransferGroup}">
                    <Border Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}">
                        <ScrollViewer Margin="0,5">
                            <StackPanel Name="PART_Panel" />
                        </ScrollViewer>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="TransferBaseStyle" TargetType="{x:Type hc:Transfer}">
        <Setter Property="Focusable" Value="False" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="hc:BorderElement.CornerRadius" Value="{StaticResource DefaultCornerRadius}" />
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
        <Setter Property="hc:SimpleItemsControl.ItemContainerStyle" Value="{StaticResource TransferItemBaseStyle}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type hc:Transfer}">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition MinWidth="200" />
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition MinWidth="200" />
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition />
                            <RowDefinition />
                            <RowDefinition />
                            <RowDefinition />
                        </Grid.RowDefinitions>
                        <hc:TransferGroup Name="PART_ItemsOrigin" Style="{StaticResource TransferGroupBaseStyle}" Grid.RowSpan="4" ItemTemplate="{TemplateBinding ItemTemplate}" ItemContainerStyle="{TemplateBinding ItemContainerStyle}" />
                        <StackPanel Margin="32,0" VerticalAlignment="Center" HorizontalAlignment="Center" Grid.Row="0" Grid.RowSpan="4" Grid.Column="1">
                            <Button Geometry="{StaticResource LeftGeometry}" Command="interactivity:ControlCommands.Cancel" />
                            <Button Geometry="{StaticResource RightGeometry}" Margin="0,10,0,0" Command="interactivity:ControlCommands.Selected" />
                        </StackPanel>
                        <hc:TransferGroup Name="PART_ItemsSelected" Style="{StaticResource TransferGroupBaseStyle}" Grid.Row="0" Grid.RowSpan="4" Grid.Column="2" ItemTemplate="{TemplateBinding ItemTemplate}" ItemContainerStyle="{TemplateBinding ItemContainerStyle}" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ExpandCollapseToggleStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="Focusable" Value="False" />
        <Setter Property="Width" Value="16" />
        <Setter Property="Height" Value="16" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <ControlTemplate.Triggers>
                        <Trigger Property="ToggleButton.IsChecked" Value="True">
                            <Setter TargetName="ExpandPath" Property="RenderTransform" Value="{RotateTransform Angle=0}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                    <Border Background="Transparent" Height="16" Padding="4" Width="16">
                        <Path Name="ExpandPath" RenderTransformOrigin="0.5,0.5" Stretch="Uniform" Data="{StaticResource TreeArrow}" Fill="{Binding Foreground , RelativeSource={RelativeSource AncestorType=TreeViewItem}}" RenderTransform="{RotateTransform Angle=-90}" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="TreeViewItemBaseStyle" BasedOn="{StaticResource BaseStyle}" TargetType="{x:Type TreeViewItem}">
        <Setter Property="FrameworkElement.FocusVisualStyle" Value="{StaticResource FocusVisualRadius0Margin0}" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Padding" Value="10,0" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="MinHeight" Value="{StaticResource DefaultControlHeight}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TreeViewItem}">
                    <ControlTemplate.Triggers>
                        <Trigger SourceName="Bd" Property="UIElement.IsMouseOver" Value="true">
                            <Setter TargetName="Bd" Value="{DynamicResource SecondaryRegionBrush}" Property="Background" />
                        </Trigger>
                        <Trigger Property="TreeViewItem.IsExpanded" Value="false">
                            <Setter TargetName="ItemsHost" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="ItemsControl.HasItems" Value="false">
                            <Setter TargetName="Expander" Property="Visibility" Value="Hidden" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="TreeViewItem.IsSelected" Value="true" />
                                <Condition Property="hc:TreeViewAttach.IsCheckTreeView" Value="false" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="Bd" Value="{DynamicResource PrimaryBrush}" Property="Background" />
                            <Setter Value="{DynamicResource TextIconBrush}" Property="Foreground" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="TreeViewItem.IsSelected" Value="true" />
                                <Condition Property="TreeViewItem.IsSelectionActive" Value="false" />
                                <Condition Property="hc:TreeViewAttach.IsCheckTreeView" Value="false" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="Bd" Value="{DynamicResource DarkDefaultBrush}" Property="Background" />
                            <Setter Value="{DynamicResource PrimaryTextBrush}" Property="Foreground" />
                        </MultiTrigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Value="{StaticResource {x:Static SystemColors.GrayTextBrushKey}}" Property="Foreground" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition MinHeight="{TemplateBinding MinHeight}" />
                            <RowDefinition Height="Auto" />
                        </Grid.RowDefinitions>
                        <Border Name="Bd" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="true" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}">
                            <DockPanel LastChildFill="True" Margin="{Binding Converter={StaticResource TreeViewItemMarginConverter}, RelativeSource={RelativeSource TemplatedParent}}">
                                <ToggleButton Name="Expander" ClickMode="Press" Style="{StaticResource ExpandCollapseToggleStyle}" IsChecked="{Binding IsExpanded , RelativeSource={RelativeSource TemplatedParent}}" />
                                <ContentPresenter Name="PART_Header" VerticalAlignment="Center" ContentSource="Header" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                            </DockPanel>
                        </Border>
                        <ItemsPresenter Name="ItemsHost" Grid.Row="1" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="TreeViewBaseStyle" TargetType="{x:Type TreeView}" BasedOn="{StaticResource BaseStyle}">
        <Style.Triggers>
            <Trigger Property="VirtualizingPanel.IsVirtualizing" Value="true">
                <Setter Property="ItemsPanel">
                    <Setter.Value>
                        <ItemsPanelTemplate>
                            <VirtualizingStackPanel />
                        </ItemsPanelTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
        <Setter Property="Focusable" Value="False" />
        <Setter Property="Background" Value="{DynamicResource RegionBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Padding" Value="0" />
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
        <Setter Property="ScrollViewer.PanningMode" Value="Both" />
        <Setter Property="hc:ScrollViewer.IsInertiaEnabled" Value="False" />
        <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="VirtualizingPanel.IsVirtualizing" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TreeView}">
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter TargetName="Bd" Value="{StaticResource {x:Static SystemColors.ControlBrushKey}}" Property="Background" />
                        </Trigger>
                        <Trigger Property="VirtualizingPanel.IsVirtualizing" Value="true">
                            <Setter TargetName="_tv_scrollviewer_" Property="ScrollViewer.CanContentScroll" Value="true" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                    <Border Name="Bd" BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" SnapsToDevicePixels="true">
                        <hc:ToggleBlock VerticalContentAlignment="Stretch" HorizontalContentAlignment="Stretch" IsChecked="{Binding HasItems , RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}" UnCheckedContent="{hc:Empty}">
                            <hc:ToggleBlock.CheckedContent>
                                <hc:ScrollViewer Name="_tv_scrollviewer_" Template="{StaticResource ScrollViewerBaseControlTemplate}" Background="{TemplateBinding Background}" ScrollViewer.CanContentScroll="false" Focusable="false" ScrollViewer.HorizontalScrollBarVisibility="{TemplateBinding HorizontalScrollBarVisibility}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" ScrollViewer.VerticalScrollBarVisibility="{TemplateBinding VerticalScrollBarVisibility}" IsInertiaEnabled="{Binding Path=(hc:ScrollViewer.IsInertiaEnabled), RelativeSource={RelativeSource TemplatedParent}}">
                                    <ItemsPresenter />
                                </hc:ScrollViewer>
                            </hc:ToggleBlock.CheckedContent>
                        </hc:ToggleBlock>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="WatermarkBaseStyle" TargetType="{x:Type hc:Watermark}">
        <Setter Property="hc:Watermark.MarkBrush" Value="{DynamicResource DarkMaskBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource DarkMaskBrush}" />
        <Setter Property="hc:Watermark.Angle" Value="20" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type hc:Watermark}">
                    <Border Name="PART_Root">
                        <ContentPresenter />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="AutoCompleteTextBoxInternal" BasedOn="{StaticResource ComboBoxEditableTextBox}" TargetType="{x:Type TextBox}" />
    <Style x:Key="AutoCompleteTextBoxItemBaseStyle" TargetType="{x:Type ComboBoxItem}">
        <Setter Property="Padding" Value="{StaticResource DefaultControlPadding}" />
        <Setter Property="UIElement.SnapsToDevicePixels" Value="True" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="MinHeight" Value="{StaticResource DefaultControlHeight}" />
        <Setter Property="Focusable" Value="False" />
        <Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBoxItem}">
                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="ListBoxItem.IsSelected" Value="False" />
                                <Condition Property="UIElement.IsMouseOver" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="Bd" Value="{DynamicResource SecondaryRegionBrush}" Property="Background" />
                        </MultiTrigger>
                        <Trigger Property="ListBoxItem.IsSelected" Value="True">
                            <Setter TargetName="Bd" Value="{DynamicResource PrimaryBrush}" Property="Background" />
                            <Setter Property="Foreground" Value="White" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                    <Border Name="Bd" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="true">
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="AutoCompleteTextBoxBaseStyle" TargetType="{x:Type hc:AutoCompleteTextBox}">
        <Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="Background" Value="{DynamicResource RegionBrush}" />
        <Setter Property="hc:BorderElement.CornerRadius" Value="{StaticResource DefaultCornerRadius}" />
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource PrimaryTextBrush}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="hc:ComboBox.CaretBrush" Value="{DynamicResource PrimaryTextBrush}" />
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
        <Setter Property="MinHeight" Value="{StaticResource DefaultControlHeight}" />
        <Setter Property="ScrollViewer.CanContentScroll" Value="true" />
        <Setter Property="ScrollViewer.PanningMode" Value="Both" />
        <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
        <Setter Property="Padding" Value="{StaticResource DefaultInputPadding}" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Validation.ErrorTemplate" Value="{x:Null}" />
        <Setter Property="ItemContainerStyle" Value="{StaticResource AutoCompleteTextBoxItemBaseStyle}" />
        <Setter Property="IsTabStop" Value="false" />
        <Setter Property="hc:Empty.ShowEmpty" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type hc:AutoCompleteTextBox}">
                    <ControlTemplate.Triggers>
                        <Trigger Property="ItemsControl.HasItems" Value="false">
                            <Setter TargetName="dropDownBorder" Property="Height" Value="95" />
                        </Trigger>
                        <Trigger Property="hc:DropDownElement.ConsistentWidth" Value="True">
                            <Setter TargetName="dropDownBorder" Value="{Binding ActualWidth , ElementName=PART_SearchTextBox}" Property="MaxWidth" />
                            <Setter TargetName="dropDownBorder" Value="{Binding ActualWidth , ElementName=PART_SearchTextBox}" Property="MinWidth" />
                        </Trigger>
                        <Trigger Property="hc:DropDownElement.AutoWidth" Value="True">
                            <Setter TargetName="dropDownBorder" Value="{x:Static system:Double.MaxValue}" Property="MaxWidth" />
                            <Setter TargetName="dropDownBorder" Value="{Binding ActualHeight , ElementName=PART_SearchTextBox}" Property="MinWidth" />
                        </Trigger>
                        <Trigger SourceName="PART_SearchTextBox" Property="UIElement.IsMouseOver" Value="true">
                            <Setter Value="{DynamicResource SecondaryBorderBrush}" Property="BorderBrush" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="UIElement.IsMouseOver" Value="true" />
                                <Condition SourceName="PART_SearchTextBox" Property="UIElement.IsFocused" Value="false" />
                            </MultiTrigger.Conditions>
                            <Setter Value="{DynamicResource SecondaryBorderBrush}" Property="BorderBrush" />
                        </MultiTrigger>
                        <Trigger SourceName="PART_SearchTextBox" Property="UIElement.IsFocused" Value="True">
                            <Setter Value="{DynamicResource PrimaryBrush}" Property="BorderBrush" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="UIElement.Opacity" Value="0.4" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                    <hc:SimplePanel>
                        <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="true" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}">
                            <TextBox Name="PART_SearchTextBox" CaretBrush="{TemplateBinding CaretBrush}" Padding="{TemplateBinding Padding}" Style="{StaticResource AutoCompleteTextBoxInternal}" />
                        </Border>
                        <Popup Name="PART_Popup" AllowsTransparency="true" Margin="1" PopupAnimation="{StaticResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}" Placement="Bottom" IsOpen="{Binding IsDropDownOpen , Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}">
                            <Border Name="dropDownBorder" BorderThickness="0,1,0,0" Effect="{StaticResource EffectShadow2}" Margin="8,0,8,8" MaxHeight="{TemplateBinding MaxDropDownHeight}" BorderBrush="{DynamicResource BorderBrush}" Background="{DynamicResource RegionBrush}" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}" MinWidth="{Binding ActualWidth , ElementName=toggleButton}">
                                <hc:ToggleBlock VerticalContentAlignment="Stretch" HorizontalContentAlignment="Stretch" IsChecked="{Binding HasItems , RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}" UnCheckedContent="{hc:Empty}">
                                    <hc:ToggleBlock.CheckedContent>
                                        <ScrollViewer Margin="0,4">
                                            <ItemsPresenter Name="ItemsPresenter" DirectionalNavigation="Contained" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                                        </ScrollViewer>
                                    </hc:ToggleBlock.CheckedContent>
                                </hc:ToggleBlock>
                            </Border>
                        </Popup>
                    </hc:SimplePanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="DataGridCellStyle" TargetType="{x:Type DataGridCell}">
        <Style.Triggers>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding IsSelected , RelativeSource={RelativeSource Self}}" Value="true" />
                    <Condition Binding="{Binding SelectionUnit , RelativeSource={RelativeSource FindAncestor , AncestorType=DataGrid}}" Value="Cell" />
                </MultiDataTrigger.Conditions>
                <Setter Property="Foreground" Value="{DynamicResource TextIconBrush}" />
                <Setter Property="Background" Value="{DynamicResource PrimaryBrush}" />
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding IsSelected , RelativeSource={RelativeSource Self}}" Value="true" />
                    <Condition Binding="{Binding IsSelected , RelativeSource={RelativeSource AncestorType=DataGridRow}}" Value="False" />
                    <Condition Binding="{Binding SelectionUnit , RelativeSource={RelativeSource FindAncestor , AncestorType=DataGrid}}" Value="CellOrRowHeader" />
                </MultiDataTrigger.Conditions>
                <Setter Property="Foreground" Value="{DynamicResource TextIconBrush}" />
                <Setter Property="Background" Value="{DynamicResource PrimaryBrush}" />
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding IsSelected , RelativeSource={RelativeSource Self}}" Value="true" />
                    <Condition Binding="{Binding IsSelected , RelativeSource={RelativeSource AncestorType=DataGridRow}}" Value="True" />
                    <Condition Binding="{Binding SelectionUnit , RelativeSource={RelativeSource FindAncestor , AncestorType=DataGrid}}" Value="CellOrRowHeader" />
                </MultiDataTrigger.Conditions>
                <Setter Property="Foreground" Value="{DynamicResource TextIconBrush}" />
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding IsSelected , RelativeSource={RelativeSource Self}}" Value="true" />
                    <Condition Binding="{Binding SelectionUnit , RelativeSource={RelativeSource FindAncestor , AncestorType=DataGrid}}" Value="FullRow" />
                </MultiDataTrigger.Conditions>
                <Setter Property="Foreground" Value="{DynamicResource TextIconBrush}" />
            </MultiDataTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="DataGridCell.IsSelected" Value="true" />
                    <Condition Property="Selector.IsSelectionActive" Value="false" />
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{DynamicResource DarkDefaultBrush}" />
                <Setter Property="Foreground" Value="{DynamicResource PrimaryTextBrush}" />
            </MultiTrigger>
        </Style.Triggers>
        <Setter Property="FrameworkElement.FocusVisualStyle">
            <Setter.Value>
                <Style>
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate>
                                <Rectangle Margin="2" Opacity=".6" SnapsToDevicePixels="true" Stroke="{DynamicResource SecondaryBorderBrush}" StrokeThickness="2" StrokeDashArray="1 1" RadiusX="4" RadiusY="4" />
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </Setter.Value>
        </Setter>
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="Padding" Value="{StaticResource DefaultControlPadding}" />
        <Setter Property="hc:BorderElement.CornerRadius" Value="{StaticResource DefaultCornerRadius}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DataGridCell}">
                    <Border Background="Transparent">
                        <Border Margin="0,0,4,0" Padding="{TemplateBinding Padding}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}">
                            <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        </Border>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="DataGridRowStyle" TargetType="{x:Type DataGridRow}">
        <Style.Triggers>
            <Trigger Property="UIElement.IsMouseOver" Value="true">
                <Setter Property="Background" Value="{DynamicResource DarkDefaultBrush}" />
            </Trigger>
            <Trigger Property="DataGridRow.IsSelected" Value="True">
                <Setter Property="Background" Value="{DynamicResource PrimaryBrush}" />
                <Setter Property="Foreground" Value="{DynamicResource TextIconBrush}" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="DataGridRow.IsSelected" Value="true" />
                    <Condition Property="Selector.IsSelectionActive" Value="false" />
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{DynamicResource DarkDefaultBrush}" />
                <Setter Property="Foreground" Value="{DynamicResource PrimaryTextBrush}" />
            </MultiTrigger>
        </Style.Triggers>
        <Setter Property="Background" Value="{DynamicResource RegionBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource PrimaryTextBrush}" />
        <Setter Property="UIElement.SnapsToDevicePixels" Value="true" />
        <Setter Property="Margin" Value="0,0,0,4" />
        <Setter Property="Padding" Value="0,6" />
        <Setter Property="Validation.ErrorTemplate" Value="{x:Null}" />
        <Setter Property="DataGridRow.ValidationErrorTemplate">
            <Setter.Value>
                <ControlTemplate>
                    <TextBlock Foreground="Red" Margin="2,0,0,0" Text="!" VerticalAlignment="Center" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DataGridRow}">
                    <SelectiveScrollingGrid>
                        <SelectiveScrollingGrid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="*" />
                        </SelectiveScrollingGrid.ColumnDefinitions>
                        <SelectiveScrollingGrid.RowDefinitions>
                            <RowDefinition Height="*" />
                            <RowDefinition Height="Auto" />
                        </SelectiveScrollingGrid.RowDefinitions>
                        <Border Name="DGR_Border" CornerRadius="4" Grid.ColumnSpan="2" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True" />
                        <DataGridCellsPresenter MinHeight="{TemplateBinding MinHeight}" VerticalContentAlignment="Center" Grid.Row="0" Grid.Column="1" ItemsPanel="{TemplateBinding ItemsPanel}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        <DataGridDetailsPresenter Margin="0,6" Grid.Column="1" Grid.Row="1" Visibility="{TemplateBinding DetailsVisibility}" SelectiveScrollingOrientation="{Binding AreRowDetailsFrozen , ConverterParameter={x:Static SelectiveScrollingOrientation.Vertical}, Converter={x:Static DataGrid.RowDetailsScrollingConverter}, RelativeSource={RelativeSource AncestorType=DataGrid}}" />
                        <DataGridRowHeader Grid.Row="0" Grid.Column="0" SelectiveScrollingOrientation="Vertical" Visibility="{Binding HeadersVisibility , ConverterParameter={x:Static DataGridHeadersVisibility.Row}, Converter={x:Static DataGrid.HeadersVisibilityConverter}, RelativeSource={RelativeSource AncestorType=DataGrid}}" />
                    </SelectiveScrollingGrid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="DataGridColumnHeaderStyle" TargetType="{x:Type DataGridColumnHeader}">
        <Style.Triggers>
            <Trigger Property="DataGridColumnHeader.SortDirection" Value="Ascending">
                <Setter Property="Foreground" Value="{DynamicResource PrimaryBrush}" />
            </Trigger>
            <Trigger Property="DataGridColumnHeader.SortDirection" Value="Descending">
                <Setter Property="Foreground" Value="{DynamicResource PrimaryBrush}" />
                <Setter Property="Foreground" Value="{DynamicResource PrimaryBrush}" />
            </Trigger>
        </Style.Triggers>
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Foreground" Value="{DynamicResource PrimaryTextBrush}" />
        <Setter Property="Padding" Value="12,0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DataGridColumnHeader}">
                    <ControlTemplate.Triggers>
                        <Trigger Value="{x:Null}" Property="DataGridColumnHeader.SortDirection">
                            <Setter TargetName="ToggleButtonSortDirection" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="DataGridColumnHeader.SortDirection" Value="Ascending">
                            <Setter TargetName="ToggleButtonSortDirection" Property="ToggleButton.IsChecked" Value="True" />
                        </Trigger>
                        <Trigger Property="DataGridColumnHeader.SortDirection" Value="Descending">
                            <Setter TargetName="ToggleButtonSortDirection" Property="ToggleButton.IsChecked" Value="False" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                    <hc:SimplePanel>
                        <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="Transparent" Padding="{TemplateBinding Padding}">
                            <Grid HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition />
                                    <ColumnDefinition Width="Auto" />
                                </Grid.ColumnDefinitions>
                                <ContentPresenter RecognizesAccessKey="True" VerticalAlignment="Center" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                                <ToggleButton Name="ToggleButtonSortDirection" Grid.Column="1" VerticalAlignment="Center" Height="{x:Static system:Double.NaN}" Padding="4,0" Width="20" IsEnabled="False" Opacity="1" Foreground="{DynamicResource PrimaryBrush}" Style="{StaticResource ToggleButtonIconTransparent}" Geometry="{StaticResource DownGeometry}" GeometrySelected="{StaticResource UpGeometry}" />
                            </Grid>
                        </Border>
                        <Thumb Name="PART_LeftHeaderGripper" HorizontalAlignment="Left" Style="{StaticResource ColumnHeaderGripperStyle}" />
                        <Thumb Name="PART_RightHeaderGripper" HorizontalAlignment="Right" Style="{StaticResource ColumnHeaderGripperStyle}" />
                    </hc:SimplePanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="DataGridRowHeaderStyle" TargetType="{x:Type DataGridRowHeader}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DataGridRowHeader}">
                    <hc:SimplePanel HorizontalAlignment="Center">
                        <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="Transparent" Padding="{TemplateBinding Padding}">
                            <StackPanel Orientation="Horizontal">
                                <ContentPresenter RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="Center" />
                            </StackPanel>
                        </Border>
                        <Thumb Name="PART_TopHeaderGripper" Style="{StaticResource RowHeaderGripperStyle}" VerticalAlignment="Top" />
                        <Thumb Name="PART_BottomHeaderGripper" Style="{StaticResource RowHeaderGripperStyle}" VerticalAlignment="Bottom" />
                    </hc:SimplePanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="{x:Type hc:Badge}" BasedOn="{StaticResource BadgeBaseStyle}" TargetType="{x:Type hc:Badge}">
        <Setter Property="Foreground" Value="{DynamicResource PrimaryTextBrush}" />
    </Style>
    <Style x:Key="BadgePrimary" BasedOn="{StaticResource BadgeBaseStyle}" TargetType="{x:Type hc:Badge}">
        <Setter Property="Background" Value="{DynamicResource PrimaryBrush}" />
    </Style>
    <Style x:Key="BadgeSuccess" BasedOn="{StaticResource BadgeBaseStyle}" TargetType="{x:Type hc:Badge}">
        <Setter Property="Background" Value="{DynamicResource SuccessBrush}" />
    </Style>
    <Style x:Key="BadgeInfo" BasedOn="{StaticResource BadgeBaseStyle}" TargetType="{x:Type hc:Badge}">
        <Setter Property="Background" Value="{DynamicResource InfoBrush}" />
    </Style>
    <Style x:Key="BadgeWarning" BasedOn="{StaticResource BadgeBaseStyle}" TargetType="{x:Type hc:Badge}">
        <Setter Property="Background" Value="{DynamicResource WarningBrush}" />
    </Style>
    <Style x:Key="BadgeDanger" BasedOn="{StaticResource BadgeBaseStyle}" TargetType="{x:Type hc:Badge}">
        <Setter Property="Background" Value="{DynamicResource DangerBrush}" />
    </Style>
    <Style x:Key="CalendarWithClockBaseStyle" TargetType="{x:Type hc:CalendarWithClock}">
        <Setter Property="Focusable" Value="False" />
        <Setter Property="Foreground" Value="{DynamicResource PrimaryTextBrush}" />
        <Setter Property="Background" Value="{DynamicResource RegionBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
        <Setter Property="hc:TitleElement.Background" Value="{DynamicResource TitleBrush}" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Margin" Value="8 0" />
        <Setter Property="hc:BorderElement.CornerRadius" Value="{StaticResource DefaultCornerRadius}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type hc:CalendarWithClock}">
                    <hc:SimplePanel Margin="0,4,0,8" HorizontalAlignment="Center" VerticalAlignment="Center">
                        <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Effect="{StaticResource EffectShadow2}" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}" />
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition Width="Auto" />
                            </Grid.ColumnDefinitions>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto" />
                                <RowDefinition />
                                <RowDefinition Height="Auto" />
                            </Grid.RowDefinitions>
                            <Border Margin="4" Grid.ColumnSpan="2" Height="42" VerticalAlignment="Top" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}" Background="{Binding Path=(hc:TitleElement.Background), RelativeSource={RelativeSource TemplatedParent}}" />
                            <ContentPresenter Name="PART_CalendarPresenter" Grid.Column="0" Grid.Row="0" Grid.RowSpan="2" Margin="-8,-4,-8,-8" />
                            <ContentPresenter Name="PART_ClockPresenter" Grid.Column="1" Grid.Row="0" Grid.RowSpan="2" Margin="-8,-4,-8,-8" />
                            <Button Name="PART_ButtonConfirm" Grid.Row="2" Grid.Column="0" Grid.ColumnSpan="2" HorizontalAlignment="Center" Margin="0,0,0,19" Width="180" VerticalAlignment="Bottom" Style="{StaticResource ButtonPrimary}" Visibility="{TemplateBinding ShowConfirmButton , Converter={StaticResource Boolean2VisibilityConverter}}" Content="{ex:Lang Key={x:Static langs:LangKeys.Confirm}}" />
                        </Grid>
                    </hc:SimplePanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="{x:Type hc:CalendarWithClock}" TargetType="{x:Type hc:CalendarWithClock}" BasedOn="{StaticResource CalendarWithClockBaseStyle}" />
    <Style x:Key="{x:Type hc:Card}" BasedOn="{StaticResource CardBaseStyle}" TargetType="{x:Type hc:Card}" />
    <Style x:Key="CarouselPateButton" BasedOn="{StaticResource BaseStyle}" TargetType="{x:Type RadioButton}">
        <Setter Property="Margin" Value="5,0" />
        <Setter Property="Width" Value="10" />
        <Setter Property="Height" Value="10" />
        <Setter Property="Background" Value="White" />
        <Setter Property="BorderBrush" Value="{DynamicResource PrimaryBrush}" />
        <Setter Property="Padding" Value="0" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <ControlTemplate.Triggers>
                        <Trigger Property="UIElement.IsMouseOver" Value="True">
                            <Setter Property="UIElement.Opacity" Value=".9" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="UIElement.Opacity" Value=".6" />
                        </Trigger>
                        <Trigger Property="ToggleButton.IsChecked" Value="True">
                            <Setter Value="{DynamicResource PrimaryBrush}" Property="Background" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                    <Border CornerRadius="5" SnapsToDevicePixels="true" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="{x:Type hc:Carousel}" TargetType="{x:Type hc:Carousel}">
        <Setter Property="hc:Carousel.PageButtonStyle" Value="{StaticResource CarouselPateButton}" />
        <Setter Property="hc:SimpleItemsControl.ItemContainerStyle" Value="{StaticResource CarouselItemBaseStyle}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type hc:Carousel}">
                    <ControlTemplate.Triggers>
                        <EventTrigger RoutedEvent="FrameworkElement.MouseEnter">
                            <BeginStoryboard>
                                <Storyboard>
                                    <DoubleAnimation TargetName="GridTop" TargetProperty="Opacity" To="1" Duration="0:0:.1" />
                                </Storyboard>
                            </BeginStoryboard>
                        </EventTrigger>
                        <EventTrigger RoutedEvent="FrameworkElement.MouseLeave">
                            <BeginStoryboard>
                                <Storyboard>
                                    <DoubleAnimation TargetName="GridTop" TargetProperty="Opacity" To="0" Duration="0:0:.1" />
                                </Storyboard>
                            </BeginStoryboard>
                        </EventTrigger>
                    </ControlTemplate.Triggers>
                    <hc:SimplePanel ClipToBounds="True">
                        <StackPanel Name="PART_Panel" Orientation="Horizontal" />
                        <hc:SimplePanel Name="GridTop" Opacity="0">
                            <Button Command="interactivity:ControlCommands.Prev" HorizontalAlignment="Left" VerticalAlignment="Center" Margin="30,0,0,0" Style="{StaticResource ButtonCustom}">
                                <Border Width="50" Height="100" Background="{DynamicResource DarkOpacityBrush}" CornerRadius="4">
                                    <Path Margin="16" Fill="White" Style="{StaticResource LeftPathStyle}" />
                                </Border>
                            </Button>
                            <Button Command="interactivity:ControlCommands.Next" HorizontalAlignment="Right" VerticalAlignment="Center" Margin="0,0,30,0" Style="{StaticResource ButtonCustom}">
                                <Border Width="50" Height="100" Background="{DynamicResource DarkOpacityBrush}" CornerRadius="4">
                                    <Path Margin="16" Fill="White" Style="{StaticResource RightPathStyle}" />
                                </Border>
                            </Button>
                        </hc:SimplePanel>
                        <StackPanel Name="PART_PanelPage" Orientation="Horizontal" VerticalAlignment="Bottom" HorizontalAlignment="Center" Margin="0,0,0,20" />
                    </hc:SimplePanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="{x:Type hc:ChatBubble}" BasedOn="{StaticResource ChatBubbleBaseStyle}" TargetType="{x:Type hc:ChatBubble}" />
    <Style x:Key="{x:Type hc:CheckComboBox}" BasedOn="{StaticResource CheckComboBoxBaseStyle}" TargetType="{x:Type hc:CheckComboBox}" />
    <Style x:Key="Tag4CheckComboBoxStyle.Small" BasedOn="{StaticResource Tag4CheckComboBoxStyle}" TargetType="{x:Type hc:Tag}">
        <Setter Property="Padding" Value="6,0,4,0" />
    </Style>
    <Style x:Key="CheckComboBox.Small" BasedOn="{StaticResource CheckComboBoxBaseStyle}" TargetType="{x:Type hc:CheckComboBox}">
        <Setter Property="hc:CheckComboBox.TagStyle" Value="{StaticResource Tag4CheckComboBoxStyle.Small}" />
        <Setter Property="MinHeight" Value="20" />
        <Setter Property="Padding" Value="6,1" />
    </Style>
    <Style x:Key="CheckComboBoxExtend" BasedOn="{StaticResource CheckComboBoxExtendBaseStyle}" TargetType="{x:Type hc:CheckComboBox}" />
    <Style x:Key="CheckComboBoxExtend.Small" BasedOn="{StaticResource CheckComboBoxExtend}" TargetType="{x:Type hc:CheckComboBox}">
        <Setter Property="hc:CheckComboBox.TagStyle" Value="{StaticResource Tag4CheckComboBoxStyle.Small}" />
        <Setter Property="hc:InfoElement.MinContentHeight" Value="20" />
        <Setter Property="hc:TitleElement.MarginOnTheLeft" Value="0,3,6,3" />
        <Setter Property="MinHeight" Value="20" />
        <Setter Property="Padding" Value="6,1" />
    </Style>
    <Style x:Key="CheckComboBoxPlus" BasedOn="{StaticResource CheckComboBoxPlusBaseStyle}" TargetType="{x:Type hc:CheckComboBox}" />
    <Style x:Key="CheckComboBoxPlus.Small" BasedOn="{StaticResource CheckComboBoxPlus}" TargetType="{x:Type hc:CheckComboBox}">
        <Setter Property="hc:CheckComboBox.TagStyle" Value="{StaticResource Tag4CheckComboBoxStyle.Small}" />
        <Setter Property="hc:InfoElement.MinContentHeight" Value="20" />
        <Setter Property="hc:TitleElement.MarginOnTheLeft" Value="0,3,6,3" />
        <Setter Property="MinHeight" Value="20" />
        <Setter Property="Padding" Value="6,1" />
    </Style>
    <Style x:Key="ClockRadioButtonStyle" TargetType="{x:Type hc:ClockRadioButton}">
        <Style.Triggers>
            <Trigger Property="ToggleButton.IsChecked" Value="True">
                <Setter Property="Foreground" Value="{DynamicResource TextIconBrush}" />
            </Trigger>
        </Style.Triggers>
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="Foreground" Value="{DynamicResource PrimaryTextBrush}" />
        <Setter Property="Focusable" Value="False" />
        <Setter Property="Width" Value="28" />
        <Setter Property="Height" Value="28" />
        <Setter Property="Background" Value="{DynamicResource DangerBrush}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type hc:ClockRadioButton}">
                    <ControlTemplate.Resources>
                        <Storyboard Name="Storyboard1">
                            <DoubleAnimationUsingKeyFrames TargetProperty="Opacity" TargetName="optionMark">
                                <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="1" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard Name="Storyboard2">
                            <DoubleAnimationUsingKeyFrames TargetProperty="Opacity" TargetName="optionMark">
                                <EasingDoubleKeyFrame KeyTime="0" Value="0" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </ControlTemplate.Resources>
                    <ControlTemplate.Triggers>
                        <Trigger Property="ToggleButton.IsChecked" Value="true">
                            <Trigger.EnterActions>
                                <BeginStoryboard Storyboard="{StaticResource Storyboard1}" />
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard Storyboard="{StaticResource Storyboard2}" />
                            </Trigger.ExitActions>
                        </Trigger>
                    </ControlTemplate.Triggers>
                    <hc:SimplePanel Name="templateRoot" Background="Transparent" SnapsToDevicePixels="True">
                        <Ellipse Name="optionMark" Fill="{TemplateBinding Background}" MinWidth="6" MinHeight="6" Opacity="0" />
                        <ContentPresenter Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                    </hc:SimplePanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ClockBaseStyle" TargetType="{x:Type hc:Clock}">
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Margin" Value="8 0" />
        <Setter Property="Focusable" Value="False" />
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
        <Setter Property="Background" Value="{DynamicResource RegionBrush}" />
        <Setter Property="hc:Clock.ClockRadioButtonStyle" Value="{StaticResource ClockRadioButtonStyle}" />
        <Setter Property="hc:TitleElement.Background" Value="{DynamicResource TitleBrush}" />
        <Setter Property="hc:BorderElement.CornerRadius" Value="{StaticResource DefaultCornerRadius}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type hc:Clock}">
                    <hc:SimplePanel Margin="0,4,0,8" HorizontalAlignment="Center" VerticalAlignment="Center">
                        <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Effect="{StaticResource EffectShadow2}" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}" />
                        <Grid>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="50" />
                                <RowDefinition />
                            </Grid.RowDefinitions>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition />
                                <ColumnDefinition />
                                <ColumnDefinition />
                            </Grid.ColumnDefinitions>
                            <Border Name="PART_BorderTitle" Margin="4" Grid.ColumnSpan="3" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}" Background="{Binding Path=(hc:TitleElement.Background), RelativeSource={RelativeSource TemplatedParent}}">
                                <TextBlock Name="PART_TimeStr" VerticalAlignment="Center" HorizontalAlignment="Center" TextBlock.FontSize="20" Foreground="{DynamicResource TextIconBrush}" />
                            </Border>
                            <Canvas Name="PART_Canvas" Grid.Row="1" Grid.Column="0" Grid.ColumnSpan="3" Margin="16,16,16,62" VerticalAlignment="Top" Width="178" Height="178">
                                <Border Background="{DynamicResource SecondaryRegionBrush}" Width="178" Height="178" CornerRadius="89" />
                                <hc:CirclePanel Name="PART_PanelNum" Diameter="130" KeepVertical="True" Margin="24,24,0,0" OffsetAngle="-60" />
                                <Border Name="PART_BorderClock" Focusable="False" Background="{DynamicResource PrimaryBrush}" RenderTransformOrigin="0.5,1" Height="63" Width="2" Left="88" Top="26" />
                                <Ellipse Fill="White" Width="8" Height="8" StrokeThickness="2" Stroke="{DynamicResource PrimaryBrush}" Top="85" Left="85" />
                            </Canvas>
                            <hc:ClockRadioButton Name="PART_ButtonAm" Grid.Row="1" Background="{DynamicResource PrimaryBrush}" Grid.Column="0" IsChecked="True" Height="30" Width="30" HorizontalAlignment="Left" VerticalAlignment="Bottom" Margin="16,0,0,16" Style="{StaticResource ClockRadioButtonStyle}" Content="{ex:Lang Key={x:Static langs:LangKeys.Am}}" />
                            <hc:ClockRadioButton Name="PART_ButtonPm" Grid.Row="1" Background="{DynamicResource PrimaryBrush}" Grid.Column="2" Height="30" Width="30" HorizontalAlignment="Right" VerticalAlignment="Bottom" Margin="0,0,16,16" Style="{StaticResource ClockRadioButtonStyle}" Content="{ex:Lang Key={x:Static langs:LangKeys.Pm}}" />
                            <Button Name="PART_ButtonConfirm" Grid.Row="1" Grid.Column="1" Foreground="{DynamicResource PrimaryBrush}" HorizontalAlignment="Center" Margin="0,0,0,19" Height="24" Width="60" VerticalAlignment="Bottom" Background="Transparent" Style="{StaticResource ButtonCustom}" Visibility="{TemplateBinding ShowConfirmButton , Converter={StaticResource Boolean2VisibilityConverter}}" Content="{ex:Lang Key={x:Static langs:LangKeys.Confirm}}" />
                        </Grid>
                    </hc:SimplePanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="{x:Type hc:Clock}" TargetType="{x:Type hc:Clock}" BasedOn="{StaticResource ClockBaseStyle}" />
    <Style x:Key="ClockListBoxItemStyle" TargetType="{x:Type ListBoxItem}" BasedOn="{StaticResource ListBoxItemBaseStyle}">
        <Style.Triggers>
            <Trigger Property="UIElement.IsMouseOver" Value="true">
                <Setter Property="Background" Value="{DynamicResource SecondaryRegionBrush}" />
            </Trigger>
            <Trigger Property="ListBoxItem.IsSelected" Value="true">
                <Setter Property="Background" Value="{DynamicResource PrimaryBrush}" />
                <Setter Property="Foreground" Value="{DynamicResource TextIconBrush}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="UIElement.Opacity" Value=".4" />
            </Trigger>
            <Trigger Property="hc:EdgeElement.ShowEdgeContent" Value="true">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ListBoxItem}">
                            <Border Name="Bd" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="true">
                                <StackPanel Orientation="Horizontal">
                                    <ContentControl Width="16" Height="16" Content="{Binding Path=(hc:EdgeElement.LeftContent), RelativeSource={RelativeSource TemplatedParent}}" />
                                    <ContentPresenter Margin="6,0,0,0" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                                </StackPanel>
                            </Border>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="ClockListBoxStyle" TargetType="{x:Type ListBox}" BasedOn="{StaticResource ListBoxBaseStyle}">
        <Setter Property="MaxHeight" Value="180" />
        <Setter Property="ScrollViewer.CanContentScroll" Value="True" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="ItemContainerStyle" Value="{StaticResource ClockListBoxItemStyle}" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
    </Style>
    <Style x:Key="ListClockBaseStyle" TargetType="{x:Type hc:ListClock}">
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Margin" Value="8 0" />
        <Setter Property="Focusable" Value="False" />
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
        <Setter Property="Background" Value="{DynamicResource RegionBrush}" />
        <Setter Property="hc:TitleElement.Background" Value="{DynamicResource TitleBrush}" />
        <Setter Property="hc:BorderElement.CornerRadius" Value="{StaticResource DefaultCornerRadius}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type hc:ListClock}">
                    <hc:SimplePanel Margin="0,4,0,8" HorizontalAlignment="Center" VerticalAlignment="Center">
                        <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Effect="{StaticResource EffectShadow2}" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}" />
                        <Grid Margin="0,4" Width="210">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition />
                                <ColumnDefinition />
                                <ColumnDefinition />
                            </Grid.ColumnDefinitions>
                            <Grid.RowDefinitions>
                                <RowDefinition />
                                <RowDefinition Height="Auto" />
                            </Grid.RowDefinitions>
                            <ListBox Name="PART_HourList" CornerRadius="0" Style="{StaticResource ClockListBoxStyle}" />
                            <ListBox Name="PART_MinuteList" CornerRadius="0" Grid.Row="0" Grid.Column="1" Style="{StaticResource ClockListBoxStyle}" BorderThickness="1,0" />
                            <ListBox Name="PART_SecondList" CornerRadius="0" Grid.Row="0" Grid.Column="2" Style="{StaticResource ClockListBoxStyle}" />
                            <Border VerticalAlignment="Bottom" Height="1" Grid.Row="0" Grid.Column="0" Grid.ColumnSpan="3" Background="{DynamicResource BorderBrush}" Visibility="{Binding Visibility , ElementName=PART_ButtonConfirm}" />
                            <Button Name="PART_ButtonConfirm" Margin="0,10" Grid.Column="0" Grid.ColumnSpan="3" Grid.Row="1" Foreground="{DynamicResource PrimaryBrush}" HorizontalAlignment="Center" Background="Transparent" Style="{StaticResource ButtonCustom}" Visibility="{TemplateBinding ShowConfirmButton , Converter={StaticResource Boolean2VisibilityConverter}}" Content="{ex:Lang Key={x:Static langs:LangKeys.Confirm}}" />
                        </Grid>
                    </hc:SimplePanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="{x:Type hc:ListClock}" TargetType="{x:Type hc:ListClock}" BasedOn="{StaticResource ListClockBaseStyle}" />
    <Style x:Key="{x:Type hc:ColorPicker}" BasedOn="{StaticResource ColorPickerBaseStyle}" TargetType="{x:Type hc:ColorPicker}" />
    <Style x:Key="{x:Type ContextMenu}" BasedOn="{StaticResource ContextMenuBaseStyle}" TargetType="{x:Type ContextMenu}" />
    <Style x:Key="{x:Type hc:CoverFlow}" BasedOn="{StaticResource CoverFlowBaseStyle}" TargetType="{x:Type hc:CoverFlow}" />
    <Style x:Key="{x:Type hc:CoverView}" BasedOn="{StaticResource CoverViewBaseStyle}" TargetType="{x:Type hc:CoverView}" />
    <Style x:Key="DataGridBaseStyle" TargetType="{x:Type DataGrid}">
        <Style.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="ItemsControl.IsGrouping" Value="true" />
                    <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false" />
                </MultiTrigger.Conditions>
                <Setter Property="ScrollViewer.CanContentScroll" Value="false" />
            </MultiTrigger>
        </Style.Triggers>
        <Setter Property="Background" Value="{DynamicResource SecondaryRegionBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="DataGrid.GridLinesVisibility" Value="None" />
        <Setter Property="DataGrid.RowDetailsVisibilityMode" Value="VisibleWhenSelected" />
        <Setter Property="ScrollViewer.CanContentScroll" Value="true" />
        <Setter Property="ScrollViewer.PanningMode" Value="Both" />
        <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
        <Setter Property="DataGrid.EnableRowVirtualization" Value="True" />
        <Setter Property="DataGrid.CanUserAddRows" Value="False" />
        <Setter Property="DataGrid.CanUserDeleteRows" Value="False" />
        <Setter Property="DataGrid.CanUserReorderColumns" Value="False" />
        <Setter Property="DataGrid.CanUserResizeRows" Value="False" />
        <Setter Property="DataGrid.ColumnHeaderStyle" Value="{StaticResource DataGridColumnHeaderStyle}" />
        <Setter Property="DataGrid.RowHeaderStyle" Value="{StaticResource DataGridRowHeaderStyle}" />
        <Setter Property="DataGrid.RowStyle" Value="{StaticResource DataGridRowStyle}" />
        <Setter Property="DataGrid.CellStyle" Value="{StaticResource DataGridCellStyle}" />
        <Setter Property="Padding" Value="6" />
        <Setter Property="DataGrid.RowHeight" Value="44" />
        <Setter Property="DataGrid.ColumnHeaderHeight" Value="44" />
        <Setter Property="hc:DataGridAttach.TextColumnStyle" Value="{StaticResource DataGridTextColumnStyle}" />
        <Setter Property="hc:DataGridAttach.EditingTextColumnStyle" Value="{StaticResource TextBoxBaseStyle}" />
        <Setter Property="hc:DataGridAttach.ComboBoxColumnStyle" Value="{StaticResource TextBlockComboBoxStyle}" />
        <Setter Property="hc:DataGridAttach.EditingComboBoxColumnStyle" Value="{StaticResource ComboBoxBaseStyle}" />
        <Setter Property="hc:DataGridAttach.CheckBoxColumnStyle" Value="{StaticResource CheckBoxBaseStyle}" />
        <Setter Property="hc:DataGridAttach.EditingCheckBoxColumnStyle" Value="{StaticResource CheckBoxBaseStyle}" />
        <Setter Property="hc:DataGridAttach.ApplyDefaultStyle" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DataGrid}">
                    <ControlTemplate.Resources>
                        <Storyboard Name="Storyboard1">
                            <DoubleAnimationUsingKeyFrames TargetProperty="Opacity" TargetName="PART_VerticalScrollBar">
                                <EasingDoubleKeyFrame KeyTime="0:0:.2" Value=".8" />
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames TargetProperty="Opacity" TargetName="PART_HorizontalScrollBar">
                                <EasingDoubleKeyFrame KeyTime="0:0:.2" Value=".8" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard Name="Storyboard2">
                            <DoubleAnimationUsingKeyFrames TargetProperty="Opacity" TargetName="PART_VerticalScrollBar">
                                <EasingDoubleKeyFrame KeyTime="0:0:.2" Value="0" />
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames TargetProperty="Opacity" TargetName="PART_HorizontalScrollBar">
                                <EasingDoubleKeyFrame KeyTime="0:0:.2" Value="0" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </ControlTemplate.Resources>
                    <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="True">
                        <ScrollViewer Name="DG_ScrollViewer" Focusable="false">
                            <ScrollViewer.Template>
                                <ControlTemplate TargetType="{x:Type ScrollViewer}">
                                    <ControlTemplate.Triggers>
                                        <EventTrigger RoutedEvent="MouseEnter">
                                            <BeginStoryboard Storyboard="{StaticResource Storyboard1}" />
                                        </EventTrigger>
                                        <EventTrigger RoutedEvent="MouseLeave">
                                            <BeginStoryboard Storyboard="{StaticResource Storyboard2}" />
                                        </EventTrigger>
                                    </ControlTemplate.Triggers>
                                    <Grid>
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="Auto" />
                                            <ColumnDefinition Width="*" />
                                            <ColumnDefinition Width="Auto" />
                                        </Grid.ColumnDefinitions>
                                        <Grid.RowDefinitions>
                                            <RowDefinition Height="Auto" />
                                            <RowDefinition Height="*" />
                                        </Grid.RowDefinitions>
                                        <ToggleButton Margin="0,0,0,6" Geometry="{StaticResource AllGeometry}" GeometrySelected="{StaticResource AllGeometry}" Foreground="{DynamicResource PrimaryBrush}" Style="{StaticResource ToggleButtonIconTransparent}" CurrentDataGrid="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type DataGrid}}}" IsSelectAll="{Binding IsChecked , RelativeSource={RelativeSource Self}}" Width="{Binding CellsPanelHorizontalOffset , RelativeSource={RelativeSource AncestorType=DataGrid}, Converter={StaticResource DoubleMinConverter}}">
                                            <ToggleButton.Visibility>
                                                <MultiBinding Converter="{StaticResource DataGridSelectAllButtonVisibilityConverter}">
                                                    <Binding Path="HeadersVisibility" RelativeSource="{RelativeSource AncestorType=DataGrid}" />
                                                    <Binding Path="(hc:DataGridAttach.ShowSelectAllButton)" RelativeSource="{RelativeSource AncestorType=DataGrid}" />
                                                </MultiBinding>
                                            </ToggleButton.Visibility>
                                        </ToggleButton>
                                        <DataGridColumnHeadersPresenter Name="PART_ColumnHeadersPresenter" Grid.ColumnSpan="2" Grid.Row="0" Grid.Column="1" Visibility="{Binding HeadersVisibility , ConverterParameter={x:Static DataGridHeadersVisibility.Column}, Converter={x:Static DataGrid.HeadersVisibilityConverter}, RelativeSource={RelativeSource AncestorType=DataGrid}}" />
                                        <hc:ToggleBlock Grid.ColumnSpan="3" Grid.Column="0" Grid.Row="1" VerticalContentAlignment="Stretch" HorizontalContentAlignment="Stretch" IsChecked="{Binding HasItems , RelativeSource={RelativeSource AncestorType=DataGrid}, Mode=OneWay}" CheckedContent="{ScrollContentPresenter Name=PART_ScrollContentPresenter, CanContentScroll={TemplateBinding CanContentScroll}}" UnCheckedContent="{hc:Empty}" />
                                        <ScrollBar Name="PART_VerticalScrollBar" Style="{StaticResource ScrollBarBaseStyle}" Opacity="0" Grid.Column="2" Maximum="{TemplateBinding ScrollableHeight}" Orientation="Vertical" Grid.Row="1" Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}" ViewportSize="{TemplateBinding ViewportHeight}" Value="{Binding VerticalOffset , Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" />
                                        <ScrollBar Name="PART_HorizontalScrollBar" Style="{StaticResource ScrollBarBaseStyle}" Opacity="0" Grid.Column="1" Maximum="{TemplateBinding ScrollableWidth}" Orientation="Horizontal" VerticalAlignment="Bottom" Grid.Row="1" Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}" ViewportSize="{TemplateBinding ViewportWidth}" Value="{Binding HorizontalOffset , Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" />
                                    </Grid>
                                </ControlTemplate>
                            </ScrollViewer.Template>
                            <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        </ScrollViewer>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="{x:Type DataGrid}" BasedOn="{StaticResource DataGridBaseStyle}" TargetType="{x:Type DataGrid}" />
    <Style x:Key="DataGridCellStyle.Small" BasedOn="{StaticResource DataGridCellStyle}" TargetType="{x:Type DataGridCell}">
        <Setter Property="Padding" Value="6,2" />
    </Style>
    <Style x:Key="DataGridRowStyle.Small" BasedOn="{StaticResource DataGridRowStyle}" TargetType="{x:Type DataGridRow}">
        <Setter Property="Margin" Value="0,0,0,2" />
    </Style>
    <Style x:Key="DataGridColumnHeaderStyle.Small" BasedOn="{StaticResource DataGridColumnHeaderStyle}" TargetType="{x:Type DataGridColumnHeader}">
        <Setter Property="Padding" Value="8,0" />
    </Style>
    <Style x:Key="DataGrid.Small" BasedOn="{StaticResource DataGridBaseStyle}" TargetType="{x:Type DataGrid}">
        <Setter Property="DataGrid.CellStyle" Value="{StaticResource DataGridCellStyle.Small}" />
        <Setter Property="DataGrid.RowStyle" Value="{StaticResource DataGridRowStyle.Small}" />
        <Setter Property="DataGrid.ColumnHeaderStyle" Value="{StaticResource DataGridColumnHeaderStyle.Small}" />
        <Setter Property="DataGrid.RowHeight" Value="24" />
        <Setter Property="DataGrid.ColumnHeaderHeight" Value="20" />
    </Style>
    <Style x:Key="{x:Type DatePicker}" BasedOn="{StaticResource DatePickerBaseStyle}" TargetType="{x:Type DatePicker}" />
    <Style x:Key="DatePickerExtend" BasedOn="{StaticResource DatePickerExtendBaseStyle}" TargetType="{x:Type DatePicker}" />
    <Style x:Key="{x:Type hc:DatePicker}" BasedOn="{StaticResource DatePickerPlusBaseStyle}" TargetType="{x:Type hc:DatePicker}" />
    <Style x:Key="{x:Type hc:DateTimePicker}" BasedOn="{StaticResource DateTimePickerBaseStyle}" TargetType="{x:Type hc:DateTimePicker}" />
    <Style x:Key="DateTimePickerExtend" BasedOn="{StaticResource DateTimePickerExtendBaseStyle}" TargetType="{x:Type hc:DateTimePicker}" />
    <Style x:Key="DateTimePickerPlus" BasedOn="{StaticResource DateTimePickerPlusBaseStyle}" TargetType="{x:Type hc:DateTimePicker}" />
    <Style x:Key="{x:Type hc:Dialog}" BasedOn="{StaticResource DialogBaseStyle}" TargetType="{x:Type hc:Dialog}" />
    <Style x:Key="{x:Type hc:Divider}" BasedOn="{StaticResource DividerBaseStyle}" TargetType="{x:Type hc:Divider}" />
    <Style x:Key="{x:Type hc:Drawer}" BasedOn="{StaticResource DrawerBaseStyle}" TargetType="{x:Type hc:Drawer}" />
    <Style x:Key="{x:Type hc:Empty}" BasedOn="{StaticResource EmptyBaseStyle}" TargetType="{x:Type hc:Empty}" />
    <Style x:Key="{x:Type Expander}" BasedOn="{StaticResource ExpanderBaseStyle}" TargetType="{x:Type Expander}" />
    <Style x:Key="{x:Type FlowDocumentScrollViewer}" BasedOn="{StaticResource FlowDocumentScrollViewerBaseStyle}" TargetType="{x:Type FlowDocumentScrollViewer}" />
    <Style x:Key="{x:Type FlowDocumentPageViewer}" BasedOn="{StaticResource FlowDocumentPageViewerBaseStyle}" TargetType="{x:Type FlowDocumentPageViewer}" />
    <Style x:Key="{x:Type FlowDocumentReader}" BasedOn="{StaticResource FlowDocumentReaderBaseStyle}" TargetType="{x:Type FlowDocumentReader}" />
    <Style x:Key="{x:Type Frame}" BasedOn="{StaticResource FrameBaseStyle}" TargetType="{x:Type Frame}" />
    <Style x:Key="{x:Type hc:GotoTop}" BasedOn="{StaticResource GotoTopBaseStyle}" TargetType="{x:Type hc:GotoTop}" />
    <Style x:Key="{x:Type hc:Gravatar}" BasedOn="{StaticResource GravatarBaseStyle}" TargetType="{x:Type hc:Gravatar}" />
    <Style x:Key="GravatarCircle" BasedOn="{StaticResource GravatarBaseStyle}" TargetType="{x:Type hc:Gravatar}">
        <Setter Property="Padding" Value="16" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type hc:Gravatar}">
                    <Border Style="{StaticResource BorderCircularClip}" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
                        <ContentPresenter Margin="{TemplateBinding Padding}" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="GravatarCircleImg" BasedOn="{StaticResource GravatarCircle}" TargetType="{x:Type hc:Gravatar}">
        <Setter Property="Padding" Value="0" />
    </Style>
    <Style x:Key="{x:Type hc:Growl}" TargetType="{x:Type hc:Growl}">
        <Setter Property="Focusable" Value="False" />
        <Setter Property="MinHeight" Value="60" />
        <Setter Property="Width" Value="320" />
        <Setter Property="Margin" Value="10,10,10,0" />
        <Setter Property="MaxWidth" Value="320" />
        <Setter Property="hc:BorderElement.CornerRadius" Value="8" />
        <Setter Property="Background" Value="{DynamicResource ThirdlyRegionBrush}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type hc:Growl}">
                    <Grid Name="PART_GridMain" RenderTransformOrigin="0.5,0.5">
                        <Grid.RenderTransform>
                            <TransformGroup>
                                <TranslateTransform X="{TemplateBinding MaxWidth}" />
                            </TransformGroup>
                        </Grid.RenderTransform>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="50" />
                            <ColumnDefinition />
                            <ColumnDefinition Width="Auto" />
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition />
                            <RowDefinition Height="Auto" />
                        </Grid.RowDefinitions>
                        <Border Grid.ColumnSpan="3" Grid.RowSpan="2" Effect="{StaticResource EffectShadow2}" Background="{TemplateBinding Background}" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}" />
                        <Path FlowDirection="LeftToRight" Grid.Row="0" Grid.Column="0" VerticalAlignment="Top" Margin="0,15,0,0" Width="30" Height="30" Data="{TemplateBinding Icon}" Stretch="Uniform" Fill="{TemplateBinding IconBrush}" />
                        <StackPanel VerticalAlignment="Center" Grid.Row="0" Grid.Column="1" Margin="0,10,10,10">
                            <TextBlock Text="{TemplateBinding Message}" Style="{StaticResource TextBlockDefault}" HorizontalAlignment="Left" TextWrapping="Wrap" />
                            <TextBlock Style="{StaticResource TextBlockDefault}" Foreground="{DynamicResource SecondaryTextBrush}" HorizontalAlignment="Left" Margin="0,4,0,0" Visibility="{Binding ShowDateTime , RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource Boolean2VisibilityConverter}}" Text="{Binding Time , RelativeSource={RelativeSource AncestorType=hc:Growl}, StringFormat=yyyy/MM/dd HH:mm:ss}" />
                            <TextBlock Style="{StaticResource TextBlockDefault}" Foreground="{DynamicResource SecondaryTextBrush}" HorizontalAlignment="Left" Margin="0,4,0,0" Visibility="{Binding ShowPersianDateTime , RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource Boolean2VisibilityConverter}}" Text="{Binding Time , RelativeSource={RelativeSource AncestorType=hc:Growl}, StringFormat=yyyy/MM/dd HH:mm:ss}" />
                        </StackPanel>
                        <Button Name="PART_ButtonClose" Grid.Row="0" Visibility="Collapsed" Margin="11,0" Command="interactivity:ControlCommands.Close" Grid.Column="2" Background="Transparent" Style="{StaticResource ButtonCustom}" VerticalAlignment="Center" HorizontalAlignment="Center" Width="18" Height="18">
                            <Path FlowDirection="LeftToRight" Data="{StaticResource ErrorGeometry}" Stretch="Uniform" Fill="{DynamicResource SecondaryTextBrush}" />
                        </Button>
                        <UniformGrid Name="PART_PanelMore" Columns="2" IsEnabled="False" Visibility="Collapsed" Grid.Row="1" Grid.ColumnSpan="3" Height="28" Grid.Column="0">
                            <Button Command="interactivity:ControlCommands.Cancel" Style="{StaticResource ButtonCustom}" HorizontalAlignment="Stretch" Background="Transparent">
                                <TextBlock HorizontalAlignment="Center" Foreground="{DynamicResource DangerBrush}" Text="{Binding CancelStr , RelativeSource={RelativeSource TemplatedParent}}" />
                            </Button>
                            <Button Command="interactivity:ControlCommands.Confirm" Style="{StaticResource ButtonCustom}" HorizontalAlignment="Stretch" Background="Transparent">
                                <TextBlock HorizontalAlignment="Center" Foreground="{DynamicResource PrimaryBrush}" Text="{Binding ConfirmStr , RelativeSource={RelativeSource TemplatedParent}}" />
                            </Button>
                        </UniformGrid>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="{x:Type hc:ImageSelector}" BasedOn="{StaticResource ImageSelectorBaseStyle}" TargetType="{x:Type hc:ImageSelector}" />
    <Style x:Key="{x:Type hc:ImageViewer}" TargetType="{x:Type hc:ImageViewer}">
        <Setter Property="Focusable" Value="False" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="MinWidth" Value="400" />
        <Setter Property="MinHeight" Value="250" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type hc:ImageViewer}">
                    <Border BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}">
                        <Grid>
                            <Grid.RowDefinitions>
                                <RowDefinition />
                                <RowDefinition Height="Auto" />
                            </Grid.RowDefinitions>
                            <hc:SimplePanel Name="PART_PanelMain" ClipToBounds="True" Grid.RowSpan="2">
                                <Border HorizontalAlignment="Left" VerticalAlignment="Top" Height="{TemplateBinding ImageHeight}" Width="{TemplateBinding ImageWidth}" Margin="{TemplateBinding ImageMargin}">
                                    <Image Name="PART_ImageMain" BitmapScalingMode="NearestNeighbor" RenderTransformOrigin="0.5,0.5" Source="{TemplateBinding ImageSource}" />
                                </Border>
                            </hc:SimplePanel>
                            <Border Grid.Row="0" Grid.RowSpan="2" Width="252" Height="162" HorizontalAlignment="Right" VerticalAlignment="Bottom" Background="{DynamicResource DarkOpacityBrush}" BorderBrush="{DynamicResource BorderBrush}" BorderThickness="1">
                                <Border.Visibility>
                                    <MultiBinding Converter="{StaticResource BooleanArr2VisibilityConverter}">
                                        <Binding Path="ShowSmallImgInternal" RelativeSource="{RelativeSource TemplatedParent}" />
                                        <Binding Path="ShowImgMap" RelativeSource="{RelativeSource TemplatedParent}" />
                                    </MultiBinding>
                                </Border.Visibility>
                                <Canvas Name="PART_CanvasSmallImg" ClipToBounds="True" MaxWidth="250" MaxHeight="160">
                                    <Border Name="PART_BorderMove" UseLayoutRounding="True" Background="Transparent" Width="50" Height="70" BorderThickness="1" BorderBrush="Black">
                                        <Border BorderThickness="1" BorderBrush="White" />
                                    </Border>
                                </Canvas>
                            </Border>
                            <Border Name="PART_BorderBottom" UseLayoutRounding="True" Opacity="0" CornerRadius="4,4,0,0" Grid.Row="1" HorizontalAlignment="Center" Background="{DynamicResource DarkOpacityBrush}">
                                <StackPanel Margin="30,10" VerticalAlignment="Center" Orientation="Horizontal">
                                    <Button Command="interactivity:ControlCommands.Save" Margin="6,0" Style="{StaticResource ButtonIcon}" Geometry="{StaticResource SaveGeometry}" Padding="3" />
                                    <Button Command="interactivity:ControlCommands.Open" Margin="6,0" Style="{StaticResource ButtonIcon}" Geometry="{StaticResource WindowsGeometry}" Padding="3" />
                                    <Border Margin="10,2" Background="White" Style="{StaticResource BorderVerticallySplitter}" />
                                    <Button Command="interactivity:ControlCommands.Reduce" Margin="6,0" Style="{StaticResource ButtonIcon}" Geometry="{StaticResource ReduceGeometry}" Padding="3" />
                                    <TextBlock Margin="6,0" Text="{TemplateBinding ScaleStr}" Style="{StaticResource TextBlockSubTitle}" Foreground="{DynamicResource TextIconBrush}" />
                                    <Button Command="interactivity:ControlCommands.Enlarge" Margin="6,0" Style="{StaticResource ButtonIcon}" Geometry="{StaticResource EnlargeGeometry}" Padding="3" />
                                    <Button Command="interactivity:ControlCommands.Restore" Background="Transparent" Margin="6,0" Style="{StaticResource ButtonCustom}" Foreground="White">
                                        <Border BorderThickness="1" BorderBrush="White" Padding="2">
                                            <TextBlock Text="1:1" />
                                        </Border>
                                    </Button>
                                    <Border Margin="10,2" Background="White" Style="{StaticResource BorderVerticallySplitter}" />
                                    <Button Command="interactivity:ControlCommands.RotateLeft" CommandParameter="" Margin="6,0" Style="{StaticResource ButtonIcon}" Geometry="{StaticResource RotateLeftGeometry}" Padding="3" />
                                    <Button Command="interactivity:ControlCommands.RotateRight" Margin="6,0,0,0" Style="{StaticResource ButtonIcon}" Geometry="{StaticResource RotateRightGeometry}" Padding="3" />
                                    <ToggleButton Foreground="{DynamicResource TextIconBrush}" Margin="12,0,6,0" Style="{StaticResource ToggleButtonIconTransparent}" Geometry="{StaticResource FullScreenGeometry}" GeometrySelected="{StaticResource FullScreenReturnGeometry}" Padding="3" Visibility="{TemplateBinding ShowFullScreenButton , Converter={StaticResource Boolean2VisibilityConverter}}" IsChecked="{Binding IsFullScreen , RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay}" />
                                </StackPanel>
                            </Border>
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="{x:Type ListBox}" BasedOn="{StaticResource ListBoxBaseStyle}" TargetType="{x:Type ListBox}" />
    <Style x:Key="ListBoxItemBaseStyle.Small" BasedOn="{StaticResource ListBoxItemBaseStyle}" TargetType="{x:Type ListBoxItem}">
        <Setter Property="Padding" Value="6,0" />
        <Setter Property="MinHeight" Value="24" />
    </Style>
    <Style x:Key="ListBox.Small" BasedOn="{StaticResource ListBoxBaseStyle}" TargetType="{x:Type ListBox}">
        <Setter Property="ItemContainerStyle" Value="{StaticResource ListBoxItemBaseStyle.Small}" />
    </Style>
    <Style x:Key="ListBoxCustom" BasedOn="{StaticResource ListBoxBaseStyle}" TargetType="{x:Type ListBox}">
        <Setter Property="ItemContainerStyle" Value="{StaticResource ListBoxItemCustom}" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
    </Style>
    <Style x:Key="WrapPanelHorizontalListBox" BasedOn="{StaticResource ListBoxCustom}" TargetType="{x:Type ListBox}">
        <Setter Property="ItemsPanel" Value="{StaticResource WrapPanelHorizontalItemsPanelTemplate}" />
    </Style>
    <Style x:Key="WrapPanelVerticalListBox" BasedOn="{StaticResource ListBoxCustom}" TargetType="{x:Type ListBox}">
        <Setter Property="ItemsPanel" Value="{StaticResource WrapPanelVerticalItemsPanelTemplate}" />
    </Style>
    <Style x:Key="StackPanelHorizontalListBox" BasedOn="{StaticResource ListBoxCustom}" TargetType="{x:Type ListBox}">
        <Setter Property="ItemsPanel" Value="{StaticResource StackPanelHorizontalItemsPanelTemplate}" />
    </Style>
    <Style x:Key="StackPanelVerticalListBox" BasedOn="{StaticResource ListBoxCustom}" TargetType="{x:Type ListBox}">
        <Setter Property="ItemsPanel" Value="{StaticResource StackPanelVerticalItemsPanelTemplate}" />
    </Style>
    <Style x:Key="ListViewBaseStyle" TargetType="{x:Type ListView}">
        <Style.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="ItemsControl.IsGrouping" Value="true" />
                    <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false" />
                </MultiTrigger.Conditions>
                <Setter Property="ScrollViewer.CanContentScroll" Value="false" />
            </MultiTrigger>
        </Style.Triggers>
        <Setter Property="Background" Value="{DynamicResource SecondaryRegionBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Padding" Value="6" />
        <Setter Property="Foreground" Value="{DynamicResource PrimaryTextBrush}" />
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
        <Setter Property="ScrollViewer.CanContentScroll" Value="true" />
        <Setter Property="ScrollViewer.PanningMode" Value="Both" />
        <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="ItemContainerStyle" Value="{StaticResource ListViewItemBaseStyle}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListView}">
                    <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="True">
                        <hc:ToggleBlock VerticalContentAlignment="Stretch" HorizontalContentAlignment="Stretch" IsChecked="{Binding HasItems , RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}" UnCheckedContent="{hc:Empty}">
                            <hc:ToggleBlock.CheckedContent>
                                <ScrollViewer>
                                    <Grid Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
                                        <Grid.RowDefinitions>
                                            <RowDefinition Height="Auto" />
                                            <RowDefinition Height="*" />
                                        </Grid.RowDefinitions>
                                        <GridViewHeaderRowPresenter Margin="2,0" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" AllowsColumnReorder="{Binding View.AllowsColumnReorder , RelativeSource={RelativeSource TemplatedParent}}" ColumnHeaderContainerStyle="{Binding View.ColumnHeaderContainerStyle , RelativeSource={RelativeSource TemplatedParent}}" ColumnHeaderToolTip="{Binding View.ColumnHeaderToolTip , RelativeSource={RelativeSource TemplatedParent}}" ColumnHeaderContextMenu="{Binding View.ColumnHeaderContextMenu , RelativeSource={RelativeSource TemplatedParent}}" ColumnHeaderTemplate="{Binding View.ColumnHeaderTemplate , RelativeSource={RelativeSource TemplatedParent}}">
                                            <GridViewHeaderRowPresenter.Columns>
                                                <Binding RelativeSource="{RelativeSource TemplatedParent}" />
                                            </GridViewHeaderRowPresenter.Columns>
                                        </GridViewHeaderRowPresenter>
                                        <ItemsPresenter Grid.Row="1" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                                    </Grid>
                                </ScrollViewer>
                            </hc:ToggleBlock.CheckedContent>
                        </hc:ToggleBlock>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="{x:Type ListView}" BasedOn="{StaticResource ListViewBaseStyle}" TargetType="{x:Type ListView}" />
    <Style x:Key="{x:Type hc:LoadingLine}" BasedOn="{StaticResource LoadingLineBaseStyle}" TargetType="{x:Type hc:LoadingLine}" />
    <Style x:Key="LoadingLineLight" BasedOn="{StaticResource LoadingLineBaseStyle}" TargetType="{x:Type hc:LoadingLine}">
        <Setter Property="Foreground" Value="{DynamicResource TextIconBrush}" />
    </Style>
    <Style x:Key="LoadingLineLarge" BasedOn="{StaticResource LoadingLineBaseStyle}" TargetType="{x:Type hc:LoadingLine}">
        <Setter Property="hc:LoadingBase.DotDiameter" Value="10" />
    </Style>
    <Style x:Key="LoadingLineLargeLight" BasedOn="{StaticResource LoadingLineLarge}" TargetType="{x:Type hc:LoadingLine}">
        <Setter Property="Foreground" Value="{DynamicResource TextIconBrush}" />
    </Style>
    <Style x:Key="{x:Type hc:LoadingCircle}" BasedOn="{StaticResource LoadingCircleBaseStyle}" TargetType="{x:Type hc:LoadingCircle}" />
    <Style x:Key="LoadingCircleLight" BasedOn="{StaticResource LoadingCircleBaseStyle}" TargetType="{x:Type hc:LoadingCircle}">
        <Setter Property="Foreground" Value="{DynamicResource TextIconBrush}" />
    </Style>
    <Style x:Key="LoadingCircleLarge" BasedOn="{StaticResource LoadingCircleBaseStyle}" TargetType="{x:Type hc:LoadingCircle}">
        <Setter Property="Width" Value="100" />
        <Setter Property="Height" Value="100" />
        <Setter Property="hc:LoadingBase.DotDiameter" Value="10" />
        <Setter Property="hc:LoadingBase.DotInterval" Value="20" />
        <Setter Property="hc:LoadingCircle.DotOffSet" Value="40" />
        <Setter Property="hc:LoadingBase.DotDelayTime" Value="120" />
    </Style>
    <Style x:Key="LoadingCircleLargeLight" BasedOn="{StaticResource LoadingCircleLarge}" TargetType="{x:Type hc:LoadingCircle}">
        <Setter Property="Foreground" Value="{DynamicResource TextIconBrush}" />
    </Style>
    <Style x:Key="{x:Type hc:Magnifier}" BasedOn="{StaticResource MagnifierBaseStyle}" TargetType="{x:Type hc:Magnifier}" />
    <Style x:Key="MessageBoxButtonStyle" BasedOn="{StaticResource ButtonDefault}" TargetType="{x:Type Button}">
        <Setter Property="MinWidth" Value="88" />
        <Setter Property="Visibility" Value="{Binding IsEnabled , RelativeSource={RelativeSource Self}, Converter={StaticResource Boolean2VisibilityConverter}}" />
        <Setter Property="Margin" Value="5,0" />
    </Style>
    <Style x:Key="MessageBoxPrimaryButtonStyle" BasedOn="{StaticResource ButtonPrimary}" TargetType="{x:Type Button}">
        <Setter Property="MinWidth" Value="88" />
        <Setter Property="Visibility" Value="{Binding IsEnabled , RelativeSource={RelativeSource Self}, Converter={StaticResource Boolean2VisibilityConverter}}" />
        <Setter Property="Margin" Value="5,0" />
    </Style>
    <Style x:Key="{x:Type hc:MessageBox}" TargetType="{x:Type hc:MessageBox}" BasedOn="{StaticResource WindowWin10}">
        <Setter Property="MinHeight" Value="172" />
        <Setter Property="Window.ShowInTaskbar" Value="False" />
        <Setter Property="MinWidth" Value="335" />
        <Setter Property="MaxWidth" Value="476" />
        <Setter Property="MaxHeight" Value="680" />
        <Setter Property="Window.ResizeMode" Value="NoResize" />
        <Setter Property="Window.SizeToContent" Value="WidthAndHeight" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type hc:MessageBox}">
                    <ControlTemplate.Triggers>
                        <Trigger Property="Window.IsActive" Value="False">
                            <Setter TargetName="ContentPresenterMain" Property="UIElement.Opacity" Value=".8" />
                        </Trigger>
                        <Trigger SourceName="PART_ButtonClose" Property="UIElement.IsMouseOver" Value="True">
                            <Setter TargetName="PART_ButtonClose" Value="{Binding CloseButtonHoverBackground , RelativeSource={RelativeSource TemplatedParent}}" Property="Background" />
                            <Setter TargetName="PART_ButtonClose" Value="{Binding CloseButtonHoverForeground , RelativeSource={RelativeSource TemplatedParent}}" Property="Foreground" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                    <Border SnapsToDevicePixels="True" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}">
                        <Grid Margin="{TemplateBinding Padding}">
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto" />
                                <RowDefinition />
                            </Grid.RowDefinitions>
                            <Grid Name="PART_NonClientArea" Background="{TemplateBinding NonClientAreaBackground}" Foreground="{TemplateBinding NonClientAreaForeground}">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition />
                                    <ColumnDefinition Width="Auto" />
                                </Grid.ColumnDefinitions>
                                <StackPanel IsHitTestVisibleInChrome="True" UseLayoutRounding="True" VerticalAlignment="Top" Grid.Column="1" HorizontalAlignment="Right" Orientation="Horizontal">
                                    <Button Name="PART_ButtonClose" Background="{TemplateBinding CloseButtonBackground}" Foreground="{TemplateBinding CloseButtonForeground}" IsTabStop="False" Height="29" Style="{StaticResource ButtonIcon}" Width="46" Geometry="{StaticResource CloseGeometry}" BorderThickness="1,0,0,0" Width="10" Height="10" />
                                </StackPanel>
                                <Grid Grid.Column="0">
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="Auto" />
                                        <ColumnDefinition Width="Auto" />
                                        <ColumnDefinition />
                                    </Grid.ColumnDefinitions>
                                    <Button Name="ButtonIcon" Command="{x:Static SystemCommands.ShowSystemMenuCommand}" Background="Transparent" Margin="10,0,0,0" IsHitTestVisibleInChrome="True" Style="{StaticResource ButtonCustom}" VerticalAlignment="Center" Visibility="{TemplateBinding Icon , Converter={StaticResource Object2VisibilityConverter}}">
                                        <Button.Triggers>
                                            <interactivity:EventTrigger EventName="MouseDoubleClick">
                                                <interactivity:InvokeCommandAction Command="{x:Static SystemCommands.CloseWindowCommand}" />
                                            </interactivity:EventTrigger>
                                        </Button.Triggers>
                                        <Image IsHitTestVisible="False" Source="{TemplateBinding Icon}" VerticalAlignment="Center" Width="16" Height="16" />
                                    </Button>
                                    <TextBlock Grid.Column="1" Text="{TemplateBinding Title}" Padding="10,0,0,0" VerticalAlignment="Center">
                                        <TextBlock.Visibility>
                                            <MultiBinding Converter="{StaticResource BooleanArr2VisibilityConverter}">
                                                <MultiBinding.Bindings>
                                                    <Binding Path="ShowTitle" RelativeSource="{RelativeSource TemplatedParent}" />
                                                    <Binding Path="Title" Converter="{StaticResource Object2BooleanConverter}" RelativeSource="{RelativeSource TemplatedParent}" />
                                                </MultiBinding.Bindings>
                                            </MultiBinding>
                                        </TextBlock.Visibility>
                                    </TextBlock>
                                    <ContentPresenter Name="ContentPresenterMain" IsHitTestVisibleInChrome="True" Grid.Column="2" Content="{TemplateBinding NonClientAreaContent}" />
                                </Grid>
                            </Grid>
                            <AdornerDecorator Grid.Row="1">
                                <Grid>
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="Auto" />
                                        <ColumnDefinition />
                                    </Grid.ColumnDefinitions>
                                    <Grid.RowDefinitions>
                                        <RowDefinition />
                                        <RowDefinition Height="Auto" />
                                    </Grid.RowDefinitions>
                                    <Path Data="{TemplateBinding Image}" Fill="{TemplateBinding ImageBrush}" HorizontalAlignment="Center" Grid.Row="0" Grid.Column="0" VerticalAlignment="Top" Margin="20,32,0,0" Width="30" Height="30" Stretch="Uniform" Visibility="{TemplateBinding ShowImage , Converter={StaticResource Boolean2VisibilityConverter}}" />
                                    <ScrollViewer Grid.Row="0" Grid.Column="1" VerticalAlignment="Top">
                                        <Border MinHeight="30" Margin="10,32,10,10" HorizontalAlignment="Left">
                                            <TextBlock VerticalAlignment="Center" Text="{TemplateBinding Message}" TextWrapping="Wrap" />
                                        </Border>
                                    </ScrollViewer>
                                    <StackPanel Name="PART_Panel" Grid.Column="0" Grid.ColumnSpan="2" Grid.Row="1" Margin="0,10,0,16" Orientation="Horizontal" HorizontalAlignment="Center" />
                                </Grid>
                            </AdornerDecorator>
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="{x:Type NavigationWindow}" BasedOn="{StaticResource NavigationWindowBaseStyle}" TargetType="{x:Type NavigationWindow}" />
    <Style x:Key="{x:Type hc:NumericUpDown}" BasedOn="{StaticResource NumericUpDownBaseStyle}" TargetType="{x:Type hc:NumericUpDown}" />
    <Style x:Key="NumericUpDownExtend" BasedOn="{StaticResource NumericUpDownExtendBaseStyle}" TargetType="{x:Type hc:NumericUpDown}" />
    <Style x:Key="NumericUpDownPlus" BasedOn="{StaticResource NumericUpDownPlusBaseStyle}" TargetType="{x:Type hc:NumericUpDown}" />
    <Style x:Key="PaginationButtonStyle" BasedOn="{StaticResource BaseStyle}" TargetType="{x:Type RadioButton}">
        <Style.Triggers>
            <Trigger Property="ToggleButton.IsChecked" Value="True">
                <Setter Property="Panel.ZIndex" Value="{x:Static system:Int32.MaxValue}" />
            </Trigger>
            <Trigger Property="UIElement.IsMouseOver" Value="True">
                <Setter Property="Background" Value="{DynamicResource SecondaryRegionBrush}" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background" Value="{DynamicResource BorderBrush}" />
            </Trigger>
        </Style.Triggers>
        <Setter Property="RadioButton.GroupName" Value="1" />
        <Setter Property="MinWidth" Value="30" />
        <Setter Property="Background" Value="{DynamicResource RegionBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="hc:BorderElement.CornerRadius" Value="0" />
        <Setter Property="Height" Value="{StaticResource DefaultControlHeight}" />
        <Setter Property="Padding" Value="10,0" />
        <Setter Property="Margin" Value="-1,0,0,0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RadioButton}">
                    <ControlTemplate.Triggers>
                        <Trigger Property="UIElement.IsMouseOver" Value="True">
                            <Setter Value="{DynamicResource PrimaryBrush}" TargetName="contentPresenter" Property="Foreground" />
                        </Trigger>
                        <Trigger Property="ToggleButton.IsChecked" Value="true">
                            <Setter TargetName="BorderRoot" Value="{Binding Path=(hc:VisualElement.HighlightBorderBrush), RelativeSource={RelativeSource TemplatedParent}}" Property="BorderBrush" />
                            <Setter TargetName="BorderRoot" Value="{Binding Path=(hc:VisualElement.HighlightBackground), RelativeSource={RelativeSource TemplatedParent}}" Property="Background" />
                            <Setter TargetName="contentPresenter" Value="{Binding Path=(hc:VisualElement.HighlightForeground), RelativeSource={RelativeSource TemplatedParent}}" Property="Foreground" />
                        </Trigger>
                        <Trigger Value="{x:Null}" Property="Content">
                            <Setter TargetName="contentPresenter" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                        <Trigger Value="{x:Null}" Property="hc:IconElement.Geometry">
                            <Setter TargetName="PathMain" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="contentPresenter" Property="Margin" Value="0" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                    <Border Name="BorderRoot" Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}">
                        <StackPanel Orientation="Horizontal" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Margin="{TemplateBinding Padding}">
                            <Path Name="PathMain" Width="{TemplateBinding Width}" Height="{TemplateBinding Height}" Fill="{TemplateBinding Foreground}" SnapsToDevicePixels="True" Stretch="Uniform" Data="{TemplateBinding Geometry}" />
                            <ContentPresenter Name="contentPresenter" RecognizesAccessKey="True" VerticalAlignment="Center" Margin="6,0,0,0" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        </StackPanel>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="{x:Type hc:Pagination}" TargetType="{x:Type hc:Pagination}">
        <Setter Property="hc:VisualElement.HighlightBorderBrush" Value="{DynamicResource TitleBrush}" />
        <Setter Property="hc:VisualElement.HighlightBackground" Value="{DynamicResource TitleBrush}" />
        <Setter Property="hc:VisualElement.HighlightForeground" Value="{DynamicResource TextIconBrush}" />
        <Setter Property="hc:BorderElement.CornerRadius" Value="{StaticResource DefaultCornerRadius}" />
        <Setter Property="Focusable" Value="False" />
        <Setter Property="FrameworkElement.UseLayoutRounding" Value="True" />
        <Setter Property="Background" Value="{DynamicResource RegionBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type hc:Pagination}">
                    <StackPanel Orientation="Horizontal" VerticalAlignment="Top">
                        <Button Name="PART_ButtonLeft" MinWidth="30" Padding="10,8" Geometry="{StaticResource LeftGeometry}" Command="interactivity:ControlCommands.Prev" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource CornerRadiusSplitConverter}, ConverterParameter=1,0,0,1}" />
                        <StackPanel ZIndex="999" HorizontalAlignment="Center" Orientation="Horizontal">
                            <StackPanel.Triggers>
                                <interactivity:RoutedEventTrigger RoutedEvent="RadioButton.Checked">
                                    <interactivity:EventToCommand Command="interactivity:ControlCommands.Selected" PassEventArgsToCommand="True" />
                                </interactivity:RoutedEventTrigger>
                            </StackPanel.Triggers>
                            <RadioButton Name="PART_ButtonFirst" Content="1" IsChecked="True" Style="{StaticResource PaginationButtonStyle}" />
                            <Border Name="PART_MoreLeft" Cursor="No" Margin="-1,0,0,0" BorderThickness="1" BorderBrush="{TemplateBinding BorderBrush}" Background="{DynamicResource SecondaryRegionBrush}" Padding="10,0">
                                <hc:SimpleText FontWeight="Bold" Foreground="{DynamicResource SecondaryTextBrush}" Text="..." VerticalAlignment="Center" />
                            </Border>
                            <StackPanel Name="PART_PanelMain" Orientation="Horizontal" />
                            <Border Name="PART_MoreRight" Cursor="No" Margin="-1,0,0,0" BorderThickness="1" BorderBrush="{TemplateBinding BorderBrush}" Background="{DynamicResource SecondaryRegionBrush}" Padding="10,0">
                                <hc:SimpleText FontWeight="Bold" Foreground="{DynamicResource SecondaryTextBrush}" Text="..." VerticalAlignment="Center" />
                            </Border>
                            <RadioButton Name="PART_ButtonLast" Content="10" Style="{StaticResource PaginationButtonStyle}" />
                        </StackPanel>
                        <Button Name="PART_ButtonRight" MinWidth="30" Padding="10,8" Geometry="{StaticResource RightGeometry}" Margin="-1,0,0,0" Command="interactivity:ControlCommands.Next" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource CornerRadiusSplitConverter}, ConverterParameter=0,1,1,0}" />
                        <hc:NumericUpDown Name="PART_Jump" IsEnabled="{TemplateBinding IsJumpEnabled}" Margin="6,0,0,0" Minimum="1" Visibility="{TemplateBinding IsJumpEnabled , Converter={StaticResource Boolean2VisibilityConverter}}" Maximum="{Binding MaxPageCount , RelativeSource={RelativeSource TemplatedParent}}" />
                        <Button IsEnabled="{TemplateBinding IsJumpEnabled}" Margin="6,0,0,0" Command="interactivity:ControlCommands.Jump" Visibility="{TemplateBinding IsJumpEnabled , Converter={StaticResource Boolean2VisibilityConverter}}" Content="{ex:Lang {x:Static langs:LangKeys.Jump}}" />
                    </StackPanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="{x:Type PasswordBox}" BasedOn="{StaticResource PasswordBoxBaseStyle}" TargetType="{x:Type PasswordBox}" />
    <Style x:Key="PasswordBox.Small" BasedOn="{StaticResource PasswordBoxBaseStyle}" TargetType="{x:Type PasswordBox}">
        <Setter Property="MinHeight" Value="20" />
        <Setter Property="Padding" Value="6,0" />
    </Style>
    <Style x:Key="PasswordBoxExtend" BasedOn="{StaticResource PasswordBoxExtendBaseStyle}" TargetType="{x:Type PasswordBox}" />
    <Style x:Key="PasswordBoxExtend.Small" BasedOn="{StaticResource PasswordBoxExtend}" TargetType="{x:Type PasswordBox}">
        <Setter Property="hc:InfoElement.MinContentHeight" Value="20" />
        <Setter Property="hc:InfoElement.ContentHeight" Value="20" />
        <Setter Property="hc:TitleElement.MarginOnTheLeft" Value="0,3,6,3" />
        <Setter Property="Padding" Value="6,0" />
    </Style>
    <Style x:Key="{x:Type hc:PasswordBox}" BasedOn="{StaticResource PasswordBoxPlusBaseStyle}" TargetType="{x:Type hc:PasswordBox}" />
    <Style x:Key="PasswordBoxPlus.Small" BasedOn="{StaticResource PasswordBoxPlusBaseStyle}" TargetType="{x:Type hc:PasswordBox}">
        <Setter Property="hc:InfoElement.MinContentHeight" Value="20" />
        <Setter Property="hc:InfoElement.ContentHeight" Value="20" />
        <Setter Property="hc:TitleElement.MarginOnTheLeft" Value="0,3,6,3" />
        <Setter Property="Padding" Value="6,0" />
    </Style>
    <Style x:Key="{x:Type hc:PinBox}" BasedOn="{StaticResource PinBoxBaseStyle}" TargetType="{x:Type hc:PinBox}" />
    <Style x:Key="{x:Type hc:Poptip}" BasedOn="{StaticResource PoptipBaseStyle}" TargetType="{x:Type hc:Poptip}" />
    <Style x:Key="{x:Type hc:PopupWindow}" TargetType="{x:Type hc:PopupWindow}">
        <Setter Property="Window.WindowStyle" Value="None" />
        <Setter Property="MinHeight" Value="220" />
        <Setter Property="FrameworkElement.UseLayoutRounding" Value="True" />
        <Setter Property="BorderThickness" Value="20" />
        <Setter Property="Window.ShowInTaskbar" Value="False" />
        <Setter Property="MinWidth" Value="300" />
        <Setter Property="Window.ResizeMode" Value="NoResize" />
        <Setter Property="Background" Value="{DynamicResource RegionBrush}" />
        <Setter Property="Window.SizeToContent" Value="WidthAndHeight" />
        <Setter Property="UIElement.Effect" Value="{DropShadowEffect Opacity=.6, ShadowDepth=0, BlurRadius=15}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type hc:PopupWindow}">
                    <ControlTemplate.Triggers>
                        <Trigger Property="hc:PopupWindow.ShowBorder" Value="True">
                            <Setter TargetName="PART_MainBorder" Property="BorderThickness" Value="1,0,1,1" />
                        </Trigger>
                        <Trigger Property="hc:PopupWindow.ShowTitle" Value="False">
                            <Setter TargetName="TitleGrid" Property="Visibility" Value="Collapsed" />
                            <Setter Property="Background" Value="Transparent" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                    <Border Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}">
                        <Grid>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto" />
                                <RowDefinition />
                                <RowDefinition Height="Auto" />
                            </Grid.RowDefinitions>
                            <Grid Name="TitleGrid" Height="30" Background="{DynamicResource TitleBrush}">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition />
                                    <ColumnDefinition Width="Auto" />
                                </Grid.ColumnDefinitions>
                                <TextBlock Name="PART_TitleBlock" Background="Transparent" Padding="{StaticResource DefaultControlPadding}" Foreground="White" Text="{TemplateBinding Title}" VerticalAlignment="Center" TextWrapping="Wrap" TextTrimming="WordEllipsis" />
                                <Button Name="CloseButton" Margin="0,0,1,0" Background="Transparent" Foreground="White" Grid.Column="1" MouseHoverBackground="Red" MouseDownBackground="Red" Command="interactivity:ControlCommands.Close" IsCancel="True" Height="28" Style="{StaticResource ButtonCustom}" Width="44" Padding="9">
                                    <Path Style="{StaticResource ClosePathStyle}" Fill="{Binding ElementName=CloseButton, Path=Foreground}" />
                                </Button>
                            </Grid>
                            <Border Name="PART_MainBorder" BorderBrush="{DynamicResource TitleBrush}" Grid.Row="1">
                                <StackPanel>
                                    <TextBlock Name="MyTextBlock" Text="{TemplateBinding ContentStr}" MinHeight="110" TextAlignment="Center" Padding="32" Foreground="{DynamicResource PrimaryTextBrush}" MaxWidth="300" TextWrapping="Wrap" TextTrimming="CharacterEllipsis" Background="{TemplateBinding Background}" />
                                    <StackPanel Margin="0,0,0,32" Orientation="Horizontal" Background="{DynamicResource RegionBrush}" HorizontalAlignment="Center">
                                        <Button IsCancel="True" MinWidth="80" Command="interactivity:ControlCommands.Cancel" Margin="0,0,16,0" Content="{ex:Lang Key={x:Static langs:LangKeys.Cancel}}" Visibility="{TemplateBinding ShowCancel , Converter={StaticResource Boolean2VisibilityConverter}}" />
                                        <Button IsDefault="True" MinWidth="80" Command="interactivity:ControlCommands.Confirm" Style="{StaticResource ButtonPrimary}" Content="{ex:Lang Key={x:Static langs:LangKeys.Confirm}}" />
                                    </StackPanel>
                                </StackPanel>
                            </Border>
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="{x:Type hc:ProgressButton}" BasedOn="{StaticResource ProgressButtonBaseStyle}" TargetType="{x:Type hc:ProgressButton}">
        <Style.Triggers>
            <Trigger Property="UIElement.IsMouseOver" Value="True">
                <Setter Property="Background" Value="{DynamicResource SecondaryRegionBrush}" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background" Value="{DynamicResource BorderBrush}" />
            </Trigger>
        </Style.Triggers>
        <Setter Property="Foreground" Value="{DynamicResource PrimaryTextBrush}" />
        <Setter Property="BorderThickness" Value="1" />
    </Style>
    <Style x:Key="ProgressButtonPrimary" BasedOn="{StaticResource ProgressButtonBaseStyle}" TargetType="{x:Type hc:ProgressButton}">
        <Setter Property="Background" Value="{DynamicResource PrimaryBrush}" />
    </Style>
    <Style x:Key="ProgressButtonSuccess" BasedOn="{StaticResource ProgressButtonBaseStyle}" TargetType="{x:Type hc:ProgressButton}">
        <Setter Property="Background" Value="{DynamicResource SuccessBrush}" />
    </Style>
    <Style x:Key="ProgressButtonInfo" BasedOn="{StaticResource ProgressButtonBaseStyle}" TargetType="{x:Type hc:ProgressButton}">
        <Setter Property="Background" Value="{DynamicResource InfoBrush}" />
    </Style>
    <Style x:Key="ProgressButtonWarning" BasedOn="{StaticResource ProgressButtonBaseStyle}" TargetType="{x:Type hc:ProgressButton}">
        <Setter Property="Background" Value="{DynamicResource WarningBrush}" />
    </Style>
    <Style x:Key="ProgressButtonDanger" BasedOn="{StaticResource ProgressButtonBaseStyle}" TargetType="{x:Type hc:ProgressButton}">
        <Setter Property="Background" Value="{DynamicResource DangerBrush}" />
    </Style>
    <Style x:Key="{x:Type hc:PropertyGrid}" BasedOn="{StaticResource PropertyGridBaseStyle}" TargetType="{x:Type hc:PropertyGrid}" />
    <Style x:Key="ComboBoxItemCapsuleBaseStyle" TargetType="{x:Type ComboBoxItem}" BasedOn="{x:Null}">
        <Style.Triggers>
            <Trigger Property="ListBoxItem.IsSelected" Value="True">
                <Setter Property="Panel.ZIndex" Value="{x:Static system:Int32.MaxValue}" />
            </Trigger>
            <Trigger Property="UIElement.IsMouseOver" Value="True">
                <Setter Property="Background" Value="{DynamicResource SecondaryRegionBrush}" />
                <Setter Property="Foreground" Value="{DynamicResource PrimaryBrush}" />
            </Trigger>
            <Trigger Property="ListBoxItem.IsSelected" Value="true">
                <Setter Property="BorderBrush" Value="{DynamicResource PrimaryBrush}" />
                <Setter Property="Background" Value="{DynamicResource PrimaryBrush}" />
                <Setter Property="Foreground" Value="{DynamicResource TextIconBrush}" />
            </Trigger>
        </Style.Triggers>
        <Setter Property="MinWidth" Value="40" />
        <Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="Background" Value="{DynamicResource RegionBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource PrimaryTextBrush}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="hc:BorderElement.CornerRadius" Value="0" />
        <Setter Property="MinHeight" Value="{StaticResource DefaultControlHeight}" />
        <Setter Property="Padding" Value="10,0" />
        <Setter Property="Margin" Value="-1,0,0,0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBoxItem}">
                    <Border Name="BorderRoot" Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}">
                        <ContentPresenter Name="contentPresenter" ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}" Foreground="{TemplateBinding Foreground}" Focusable="False" HorizontalAlignment="Center" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="Center" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ComboBoxItemCapsuleDefault" BasedOn="{StaticResource ComboBoxItemCapsuleBaseStyle}" TargetType="{x:Type ComboBoxItem}" />
    <Style x:Key="ComboBoxItemCapsuleHorizontalFirst" BasedOn="{StaticResource ComboBoxItemCapsuleBaseStyle}" TargetType="{x:Type ComboBoxItem}">
        <Setter Property="hc:BorderElement.CornerRadius" Value="4,0,0,4" />
        <Setter Property="Margin" Value="0" />
    </Style>
    <Style x:Key="ComboBoxItemCapsuleHorizontalLast" BasedOn="{StaticResource ComboBoxItemCapsuleBaseStyle}" TargetType="{x:Type ComboBoxItem}">
        <Setter Property="hc:BorderElement.CornerRadius" Value="0,4,4,0" />
    </Style>
    <Style x:Key="ComboBoxItemCapsuleSingle" BasedOn="{StaticResource ComboBoxItemCapsuleBaseStyle}" TargetType="{x:Type ComboBoxItem}">
        <Setter Property="hc:BorderElement.CornerRadius" Value="{StaticResource DefaultCornerRadius}" />
    </Style>
    <Style x:Key="ComboBoxItemCapsuleVerticalFirst" BasedOn="{StaticResource ComboBoxItemCapsuleBaseStyle}" TargetType="{x:Type ComboBoxItem}">
        <Setter Property="hc:BorderElement.CornerRadius" Value="4,4,0,0" />
        <Setter Property="Margin" Value="0" />
    </Style>
    <Style x:Key="ComboBoxItemCapsuleVerticalLast" BasedOn="{StaticResource ComboBoxItemCapsuleBaseStyle}" TargetType="{x:Type ComboBoxItem}">
        <Setter Property="hc:BorderElement.CornerRadius" Value="0,0,4,4" />
    </Style>
    <Style x:Key="ComboBoxCapsule" TargetType="{x:Type ComboBox}" BasedOn="{x:Null}">
        <Setter Property="ItemContainerStyleSelector" Value="{StaticResource ComboBoxItemCapsuleStyleSelector}" />
        <Setter Property="VerticalAlignment" Value="Top" />
        <Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="Focusable" Value="False" />
        <Setter Property="ItemsPanel" Value="{StaticResource ComboBoxCapsuleItemsPanelTemplate}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBox}">
                    <ItemsPresenter Name="ItemsPresenter" DirectionalNavigation="Contained" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="{x:Type hc:Rate}" BasedOn="{StaticResource RateBaseStyle}" TargetType="{x:Type hc:Rate}" />
    <Style x:Key="{x:Type hc:RunningBlock}" BasedOn="{StaticResource RunningBlockBaseStyle}" TargetType="{x:Type hc:RunningBlock}" />
    <Style x:Key="{x:Type Separator}" BasedOn="{StaticResource SeparatorBaseStyle}" TargetType="{x:Type Separator}" />
    <Style x:Key="{x:Type hc:Shield}" BasedOn="{StaticResource ShieldBaseStyle}" TargetType="{x:Type hc:Shield}" />
    <Style x:Key="{x:Type hc:SideMenu}" BasedOn="{StaticResource SideMenuBaseStyle}" TargetType="{x:Type hc:SideMenu}" />
    <Style x:Key="SideMenuAccordion" BasedOn="{StaticResource SideMenuBaseStyle}" TargetType="{x:Type hc:SideMenu}">
        <Setter Property="hc:SideMenu.ExpandMode" Value="Accordion" />
        <Setter Property="hc:SideMenu.PanelAreaLength" Value="200" />
        <Setter Property="hc:SimpleItemsControl.ItemContainerStyle" Value="{StaticResource SideMenuItemHeaderAccordionBaseStyle}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type hc:SideMenu}">
                    <Border Name="BorderRoot" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}">
                        <StackPanel Name="PART_Panel" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="{x:Type hc:SplitButton}" BasedOn="{StaticResource SplitButtonBaseStyle}" TargetType="{x:Type hc:SplitButton}">
        <Style.Triggers>
            <Trigger Property="UIElement.IsMouseOver" Value="True">
                <Setter Property="Background" Value="{DynamicResource SecondaryRegionBrush}" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background" Value="{DynamicResource BorderBrush}" />
            </Trigger>
        </Style.Triggers>
        <Setter Property="Foreground" Value="{DynamicResource PrimaryTextBrush}" />
        <Setter Property="BorderThickness" Value="1" />
    </Style>
    <Style x:Key="SplitButtonPrimary" BasedOn="{StaticResource SplitButtonBaseStyle}" TargetType="{x:Type hc:SplitButton}">
        <Setter Property="Background" Value="{DynamicResource PrimaryBrush}" />
    </Style>
    <Style x:Key="SplitButtonSuccess" BasedOn="{StaticResource SplitButtonBaseStyle}" TargetType="{x:Type hc:SplitButton}">
        <Setter Property="Background" Value="{DynamicResource SuccessBrush}" />
    </Style>
    <Style x:Key="SplitButtonInfo" BasedOn="{StaticResource SplitButtonBaseStyle}" TargetType="{x:Type hc:SplitButton}">
        <Setter Property="Background" Value="{DynamicResource InfoBrush}" />
    </Style>
    <Style x:Key="SplitButtonWarning" BasedOn="{StaticResource SplitButtonBaseStyle}" TargetType="{x:Type hc:SplitButton}">
        <Setter Property="Background" Value="{DynamicResource WarningBrush}" />
    </Style>
    <Style x:Key="SplitButtonDanger" BasedOn="{StaticResource SplitButtonBaseStyle}" TargetType="{x:Type hc:SplitButton}">
        <Setter Property="Background" Value="{DynamicResource DangerBrush}" />
    </Style>
    <Style x:Key="{x:Type StatusBar}" BasedOn="{StaticResource StatusBarBaseStyle}" TargetType="{x:Type StatusBar}" />
    <Style x:Key="{x:Type StatusBarItem}" BasedOn="{StaticResource StatusBarItemBaseStyle}" TargetType="{x:Type StatusBarItem}" />
    <Style x:Key="{x:Type hc:StepBar}" BasedOn="{StaticResource StepBarBaseStyle}" TargetType="{x:Type hc:StepBar}" />
    <Style x:Key="{x:Type TabControl}" BasedOn="{StaticResource TabControlBaseStyle}" TargetType="{x:Type TabControl}" />
    <Style x:Key="{x:Type hc:TabControl}" BasedOn="{StaticResource TabControlPlusBaseStyle}" TargetType="{x:Type hc:TabControl}" />
    <Style x:Key="TabItemInLine" BasedOn="{StaticResource TabItemStyle}" TargetType="{x:Type TabItem}">
        <Setter Property="MinWidth" Value="0" />
    </Style>
    <Style x:Key="TabControlInLine" BasedOn="{StaticResource TabControlBaseStyle}" TargetType="{x:Type TabControl}">
        <Setter Property="ItemContainerStyle" Value="{StaticResource TabItemInLine}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TabControl}">
                    <ControlTemplate.Triggers>
                        <Trigger Property="TabControl.TabStripPlacement" Value="Bottom">
                            <Setter TargetName="RowDefinition0" Property="Height" Value="*" />
                            <Setter TargetName="RowDefinition1" Property="Height" Value="Auto" />
                            <Setter TargetName="headerPanel" Property="Grid.Row" Value="1" />
                            <Setter TargetName="contentPanel" Property="Grid.Row" Value="0" />
                            <Setter TargetName="contentPanel" Value="{Binding BorderThickness , RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource ThicknessSplitConverter}, ConverterParameter=0,0,0,1}" Property="BorderThickness" />
                        </Trigger>
                        <Trigger Property="TabControl.TabStripPlacement" Value="Left">
                            <Setter TargetName="RowDefinition0" Property="Height" Value="*" />
                            <Setter TargetName="RowDefinition1" Property="Height" Value="0" />
                            <Setter TargetName="ColumnDefinition0" Property="Width" Value="Auto" />
                            <Setter TargetName="ColumnDefinition1" Property="Width" Value="*" />
                            <Setter TargetName="contentPanel" Property="Grid.Column" Value="1" />
                            <Setter TargetName="contentPanel" Property="Grid.Row" Value="0" />
                            <Setter TargetName="contentPanel" Value="{Binding BorderThickness , RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource ThicknessSplitConverter}, ConverterParameter=1,0,0,0}" Property="BorderThickness" />
                            <Setter TargetName="headerPanel" Property="Grid.Column" Value="0" />
                            <Setter TargetName="headerPanel" Property="Grid.Row" Value="0" />
                            <Setter TargetName="headerPanel" Property="UniformGrid.Rows" Value="0" />
                            <Setter TargetName="headerPanel" Property="UniformGrid.Columns" Value="1" />
                        </Trigger>
                        <Trigger Property="TabControl.TabStripPlacement" Value="Right">
                            <Setter TargetName="RowDefinition0" Property="Height" Value="*" />
                            <Setter TargetName="RowDefinition1" Property="Height" Value="0" />
                            <Setter TargetName="ColumnDefinition0" Property="Width" Value="*" />
                            <Setter TargetName="ColumnDefinition1" Property="Width" Value="Auto" />
                            <Setter TargetName="contentPanel" Property="Grid.Column" Value="0" />
                            <Setter TargetName="contentPanel" Property="Grid.Row" Value="0" />
                            <Setter TargetName="contentPanel" Value="{Binding BorderThickness , RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource ThicknessSplitConverter}, ConverterParameter=0,0,1,0}" Property="BorderThickness" />
                            <Setter TargetName="headerPanel" Property="Grid.Column" Value="1" />
                            <Setter TargetName="headerPanel" Property="Grid.Row" Value="0" />
                            <Setter TargetName="headerPanel" Property="UniformGrid.Rows" Value="0" />
                            <Setter TargetName="headerPanel" Property="UniformGrid.Columns" Value="1" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                    <Grid Name="templateRoot" Background="{TemplateBinding Background}" ClipToBounds="true" SnapsToDevicePixels="true" TabNavigation="Local">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Name="ColumnDefinition0" />
                            <ColumnDefinition Name="ColumnDefinition1" Width="0" />
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Name="RowDefinition0" Height="Auto" />
                            <RowDefinition Name="RowDefinition1" Height="*" />
                        </Grid.RowDefinitions>
                        <UniformGrid Name="headerPanel" Rows="1" Background="Transparent" Grid.Column="0" IsItemsHost="true" Margin="0" Grid.Row="0" TabIndex="1" ZIndex="1" />
                        <Border Name="contentPanel" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" BorderBrush="{DynamicResource BorderBrush}" Background="{TemplateBinding Background}" Grid.Column="0" DirectionalNavigation="Contained" Grid.Row="1" TabIndex="2" TabNavigation="Local" BorderThickness="{Binding BorderThickness , RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource ThicknessSplitConverter}, ConverterParameter=0,1,0,0}">
                            <ContentPresenter Name="PART_SelectedContentHost" ContentSource="SelectedContent" Margin="0" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        </Border>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="TabItemCapsuleDefault" BasedOn="{StaticResource TabItemCapsuleBaseStyle}" TargetType="{x:Type TabItem}" />
    <Style x:Key="TabItemCapsuleHorizontalFirst" BasedOn="{StaticResource TabItemCapsuleBaseStyle}" TargetType="{x:Type TabItem}">
        <Setter Property="hc:BorderElement.CornerRadius" Value="4,0,0,4" />
        <Setter Property="Margin" Value="0" />
    </Style>
    <Style x:Key="TabItemCapsuleHorizontalLast" BasedOn="{StaticResource TabItemCapsuleBaseStyle}" TargetType="{x:Type TabItem}">
        <Setter Property="hc:BorderElement.CornerRadius" Value="0,4,4,0" />
    </Style>
    <Style x:Key="TabItemCapsuleSingle" BasedOn="{StaticResource TabItemCapsuleBaseStyle}" TargetType="{x:Type TabItem}">
        <Setter Property="hc:BorderElement.CornerRadius" Value="{StaticResource DefaultCornerRadius}" />
    </Style>
    <Style x:Key="TabItemCapsuleVerticalFirst" BasedOn="{StaticResource TabItemCapsuleBaseStyle}" TargetType="{x:Type TabItem}">
        <Setter Property="hc:BorderElement.CornerRadius" Value="4,4,0,0" />
        <Setter Property="Margin" Value="0" />
    </Style>
    <Style x:Key="TabItemCapsuleVerticalLast" BasedOn="{StaticResource TabItemCapsuleBaseStyle}" TargetType="{x:Type TabItem}">
        <Setter Property="hc:BorderElement.CornerRadius" Value="0,0,4,4" />
    </Style>
    <Style x:Key="TabControlCapsule" TargetType="{x:Type TabControl}">
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Background" Value="{DynamicResource RegionBrush}" />
        <Setter Property="hc:TitleElement.BorderBrush" Value="{DynamicResource PrimaryBrush}" />
        <Setter Property="hc:TitleElement.Background" Value="{DynamicResource RegionBrush}" />
        <Setter Property="hc:TitleElement.Foreground" Value="{DynamicResource PrimaryBrush}" />
        <Setter Property="ItemContainerStyleSelector" Value="{tools:TabItemCapsuleStyleSelector}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TabControl}">
                    <ControlTemplate.Triggers>
                        <Trigger Property="TabControl.TabStripPlacement" Value="Bottom">
                            <Setter TargetName="RowDefinition0" Property="Height" Value="*" />
                            <Setter TargetName="RowDefinition1" Property="Height" Value="Auto" />
                            <Setter TargetName="headerPanel" Property="Grid.Row" Value="1" />
                            <Setter TargetName="contentPanel" Property="Margin" Value="0,0,0,6" />
                            <Setter TargetName="contentPanel" Property="Grid.Row" Value="0" />
                        </Trigger>
                        <Trigger Property="TabControl.TabStripPlacement" Value="Left">
                            <Setter TargetName="RowDefinition0" Property="Height" Value="*" />
                            <Setter TargetName="RowDefinition1" Property="Height" Value="0" />
                            <Setter TargetName="ColumnDefinition0" Property="Width" Value="Auto" />
                            <Setter TargetName="ColumnDefinition1" Property="Width" Value="*" />
                            <Setter TargetName="headerPanel" Property="Grid.Column" Value="0" />
                            <Setter TargetName="headerPanel" Property="Grid.Row" Value="0" />
                            <Setter TargetName="headerPanel" Property="UniformGrid.Rows" Value="0" />
                            <Setter TargetName="headerPanel" Property="UniformGrid.Columns" Value="1" />
                            <Setter TargetName="contentPanel" Property="Grid.Column" Value="1" />
                            <Setter TargetName="contentPanel" Property="Grid.Row" Value="0" />
                            <Setter TargetName="contentPanel" Property="Margin" Value="6,0,0,0" />
                        </Trigger>
                        <Trigger Property="TabControl.TabStripPlacement" Value="Right">
                            <Setter TargetName="RowDefinition0" Property="Height" Value="*" />
                            <Setter TargetName="RowDefinition1" Property="Height" Value="0" />
                            <Setter TargetName="ColumnDefinition0" Property="Width" Value="*" />
                            <Setter TargetName="ColumnDefinition1" Property="Width" Value="Auto" />
                            <Setter TargetName="headerPanel" Property="Grid.Column" Value="1" />
                            <Setter TargetName="headerPanel" Property="Grid.Row" Value="0" />
                            <Setter TargetName="headerPanel" Property="UniformGrid.Rows" Value="0" />
                            <Setter TargetName="headerPanel" Property="UniformGrid.Columns" Value="1" />
                            <Setter TargetName="contentPanel" Property="Grid.Column" Value="0" />
                            <Setter TargetName="contentPanel" Property="Grid.Row" Value="0" />
                            <Setter TargetName="contentPanel" Property="Margin" Value="0,0,6,0" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                    <Grid Name="templateRoot" Background="{TemplateBinding Background}" ClipToBounds="true" SnapsToDevicePixels="true" TabNavigation="Local">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Name="ColumnDefinition0" />
                            <ColumnDefinition Name="ColumnDefinition1" Width="0" />
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Name="RowDefinition0" Height="Auto" />
                            <RowDefinition Name="RowDefinition1" Height="*" />
                        </Grid.RowDefinitions>
                        <UniformGrid Name="headerPanel" Rows="1" HorizontalAlignment="Center" VerticalAlignment="Center" Background="Transparent" Grid.Column="0" IsItemsHost="true" Margin="0" Grid.Row="0" TabIndex="1" ZIndex="1" />
                        <Border Name="contentPanel" Margin="0,6,0,0" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{DynamicResource BorderBrush}" Background="{TemplateBinding Background}" Grid.Column="0" DirectionalNavigation="Contained" Grid.Row="1" TabIndex="2" TabNavigation="Local">
                            <ContentPresenter Name="PART_SelectedContentHost" ContentSource="SelectedContent" Margin="0" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        </Border>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="TabControlCapsuleSolid" BasedOn="{StaticResource TabControlCapsule}" TargetType="{x:Type TabControl}">
        <Setter Property="hc:TitleElement.BorderBrush" Value="{DynamicResource TitleBrush}" />
        <Setter Property="hc:TitleElement.Background" Value="{DynamicResource TitleBrush}" />
        <Setter Property="hc:TitleElement.Foreground" Value="{DynamicResource TextIconBrush}" />
    </Style>
    <Style x:Key="{x:Type hc:TimeBar}" TargetType="{x:Type hc:TimeBar}">
        <Setter Property="hc:TimeBar.HotspotsBrush" Value="{DynamicResource AccentBrush}" />
        <Setter Property="Focusable" Value="False" />
        <Setter Property="FrameworkElement.UseLayoutRounding" Value="True" />
        <Setter Property="BorderThickness" Value="0,1,0,0" />
        <Setter Property="Foreground" Value="White" />
        <Setter Property="Background" Value="{DynamicResource TitleBrush}" />
        <Setter Property="Height" Value="60" />
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type hc:TimeBar}">
                    <ControlTemplate.Triggers>
                        <EventTrigger RoutedEvent="FrameworkElement.MouseEnter">
                            <BeginStoryboard>
                                <Storyboard>
                                    <ObjectAnimationUsingKeyFrames TargetProperty="(UIElement.Visibility)" TargetName="PART_TextBlockMove">
                                        <DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Visible}" />
                                    </ObjectAnimationUsingKeyFrames>
                                </Storyboard>
                            </BeginStoryboard>
                        </EventTrigger>
                        <EventTrigger RoutedEvent="FrameworkElement.MouseLeave">
                            <BeginStoryboard>
                                <Storyboard>
                                    <ObjectAnimationUsingKeyFrames TargetProperty="(UIElement.Visibility)" TargetName="PART_TextBlockMove">
                                        <DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Collapsed}" />
                                    </ObjectAnimationUsingKeyFrames>
                                </Storyboard>
                            </BeginStoryboard>
                        </EventTrigger>
                    </ControlTemplate.Triggers>
                    <Border Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}">
                        <hc:SimplePanel ClipToBounds="True">
                            <Border BorderThickness="0,0,0,4" BorderBrush="White" VerticalAlignment="Top" Height="52">
                                <TextBlock Name="PART_TextBlockSelected" TextBlock.FontSize="16" VerticalAlignment="Top" Margin="0,14,0,0" HorizontalAlignment="Center" />
                            </Border>
                            <TextBlock Text="{TemplateBinding SpeStr}" HorizontalAlignment="Right" VerticalAlignment="Top" Margin="0,14,10,0" Visibility="{TemplateBinding ShowSpeStr , Converter={StaticResource Boolean2VisibilityConverter}}" />
                            <TextBlock Name="PART_TextBlockMove" Visibility="Collapsed" HorizontalAlignment="Left" VerticalAlignment="Top" Margin="0,2,0,0" />
                            <Canvas Name="PART_CanvasSpe" VerticalAlignment="Bottom" Height="28" />
                            <hc:SimplePanel Name="PART_Hotspots" Margin="0,48,0,0" VerticalAlignment="Top" Visibility="{Binding Hotspots , RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource Object2VisibilityConverter}}" />
                            <Border Width="1" Background="{DynamicResource DangerBrush}" />
                            <Border Name="PART_BorderTop" Background="Transparent" Cursor="Hand" />
                        </hc:SimplePanel>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="{x:Type hc:TimePicker}" BasedOn="{StaticResource TimePickerBaseStyle}" TargetType="{x:Type hc:TimePicker}" />
    <Style x:Key="TimePickerExtend" BasedOn="{StaticResource TimePickerExtendBaseStyle}" TargetType="{x:Type hc:TimePicker}" />
    <Style x:Key="TimePickerPlus" BasedOn="{StaticResource TimePickerPlusBaseStyle}" TargetType="{x:Type hc:TimePicker}" />
    <Style x:Key="{x:Type ToolBarTray}" BasedOn="{StaticResource ToolBarTrayBaseStyle}" TargetType="{x:Type ToolBarTray}" />
    <Style x:Key="{x:Type ToolBar}" BasedOn="{StaticResource ToolBarBaseStyle}" TargetType="{x:Type ToolBar}" />
    <Style x:Key="{x:Type ToolTip}" BasedOn="{StaticResource ToolTipBaseStyle}" TargetType="{x:Type ToolTip}" />
    <Style x:Key="{x:Type hc:Transfer}" BasedOn="{StaticResource TransferBaseStyle}" TargetType="{x:Type hc:Transfer}" />
    <Style x:Key="{x:Type TreeViewItem}" BasedOn="{StaticResource TreeViewItemBaseStyle}" TargetType="{x:Type TreeViewItem}" />
    <Style x:Key="{x:Type TreeView}" BasedOn="{StaticResource TreeViewBaseStyle}" TargetType="{x:Type TreeView}" />
    <Style x:Key="TreeViewItemBaseStyle.Small" BasedOn="{StaticResource TreeViewItemBaseStyle}" TargetType="{x:Type TreeViewItem}">
        <Setter Property="Padding" Value="6,0" />
        <Setter Property="MinHeight" Value="24" />
    </Style>
    <Style x:Key="TreeView.Small" BasedOn="{StaticResource TreeViewBaseStyle}" TargetType="{x:Type TreeView}">
        <Setter Property="ItemContainerStyle" Value="{StaticResource TreeViewItemBaseStyle.Small}" />
    </Style>
    <Style x:Key="{x:Type hc:Watermark}" BasedOn="{StaticResource WatermarkBaseStyle}" TargetType="{x:Type hc:Watermark}" />
    <Style x:Key="{x:Type hc:AutoCompleteTextBox}" BasedOn="{StaticResource AutoCompleteTextBoxBaseStyle}" TargetType="{x:Type hc:AutoCompleteTextBox}" />
    <Style x:Key="ListBoxModernItemBaseStyle" BasedOn="{StaticResource BaseStyle}" TargetType="{x:Type ListBoxItem}">
        <Style.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="hc:ListBoxAttach.IsOddEvenRow" Value="True" />
                    <Condition Property="ItemsControl.AlternationIndex" Value="0" />
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{DynamicResource RegionBrush}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="hc:ListBoxAttach.IsOddEvenRow" Value="True" />
                    <Condition Property="ItemsControl.AlternationIndex" Value="1" />
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{DynamicResource OddEvenRegionBrush}" />
            </MultiTrigger>
            <Trigger Property="UIElement.IsMouseOver" Value="true">
                <Setter Property="Background" Value="{DynamicResource SecondaryRegionBrush}" />
            </Trigger>
            <Trigger Property="ListBoxItem.IsSelected" Value="true">
                <Setter Property="Background" Value="{DynamicResource PrimaryBrush}" />
                <Setter Property="Foreground" Value="{DynamicResource TextIconBrush}" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="ListBoxItem.IsSelected" Value="true" />
                    <Condition Property="Selector.IsSelectionActive" Value="false" />
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{DynamicResource DarkDefaultBrush}" />
                <Setter Property="Foreground" Value="{DynamicResource PrimaryTextBrush}" />
            </MultiTrigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="UIElement.Opacity" Value=".4" />
            </Trigger>
        </Style.Triggers>
        <Setter Property="FrameworkElement.FocusVisualStyle" Value="{StaticResource FocusVisualRadius0Margin0}" />
        <Setter Property="hc:BorderElement.CornerRadius" Value="6" />
        <Setter Property="hc:IconElement.Width" Value="16" />
        <Setter Property="hc:IconElement.Height" Value="16" />
        <Setter Property="hc:ListBoxAttach.Geometry" Value="{DynamicResource NewGeometry}" />
        <Setter Property="hc:ListBoxAttach.GeoemtryBrush" Value="{DynamicResource DangerBrush}" />
        <Setter Property="hc:ListBoxAttach.Width" Value="30" />
        <Setter Property="hc:ListBoxAttach.Height" Value="14" />
        <Setter Property="UIElement.SnapsToDevicePixels" Value="True" />
        <Setter Property="Padding" Value="10,0" />
        <Setter Property="MinHeight" Value="{StaticResource DefaultControlHeight}" />
        <Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment , RelativeSource={RelativeSource AncestorType=ItemsControl}}" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Background" Value="{DynamicResource RegionBrush}" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Height" Value="38" />
        <Setter Property="Margin" Value="0,3,0,3" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListBoxItem}">
                    <ControlTemplate.Triggers>
                        <Trigger Property="ListBoxItem.IsSelected" Value="True">
                            <Setter TargetName="BdSide" Property="BorderThickness" Value="4,0,0,0" />
                            <Setter TargetName="ContentPath" Property="Fill" Value="White" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="ListBoxItem.IsSelected" Value="false" />
                                <Condition Property="UIElement.IsMouseOver" Value="true" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="ContentPath" Value="{DynamicResource PrimaryTextBrush}" Property="Fill" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="ListBoxItem.IsSelected" Value="true" />
                                <Condition Property="Selector.IsSelectionActive" Value="false" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="ContentPath" Value="{DynamicResource PrimaryTextBrush}" Property="Fill" />
                            <Setter TargetName="BdSide" Value="{DynamicResource DarkDefaultBrush}" Property="BorderBrush" />
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                    <Border Name="BdSide" BorderThickness="0" BorderBrush="{DynamicResource PrimaryBrush}" SnapsToDevicePixels="true">
                        <Border Name="Bd" Margin="20,0,10,0" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="true" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}">
                            <StackPanel HorizontalAlignment="Left" Orientation="Horizontal">
                                <Path Name="ContentPath" SnapsToDevicePixels="True" Stretch="Uniform" Fill="{DynamicResource PrimaryTextBrush}" Width="{Binding Path=(hc:IconElement.Width), RelativeSource={RelativeSource TemplatedParent}}" Height="{Binding Path=(hc:IconElement.Height), RelativeSource={RelativeSource TemplatedParent}}" Data="{Binding Path=(hc:IconElement.Geometry), RelativeSource={RelativeSource TemplatedParent}}" />
                                <ContentPresenter Margin="10,0" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                                <Path FlowDirection="LeftToRight" VerticalAlignment="Center" Stretch="Uniform" Visibility="{Binding Path=(hc:ListBoxAttach.IsNew), RelativeSource={RelativeSource self}, Converter={StaticResource Boolean2VisibilityConverter}}" Data="{Binding Path=(hc:ListBoxAttach.Geometry), RelativeSource={RelativeSource TemplatedParent}}" Width="{Binding Path=(hc:ListBoxAttach.Width), RelativeSource={RelativeSource TemplatedParent}}" Height="{Binding Path=(hc:ListBoxAttach.Height), RelativeSource={RelativeSource TemplatedParent}}" Fill="{Binding Path=(hc:ListBoxAttach.GeoemtryBrush), RelativeSource={RelativeSource TemplatedParent}}" />
                            </StackPanel>
                        </Border>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ListBoxModernBaseStyle" BasedOn="{StaticResource ListBoxBaseStyle}" TargetType="{x:Type ListBox}">
        <Setter Property="ItemContainerStyle" Value="{StaticResource ListBoxModernItemBaseStyle}" />
    </Style>
    <Style x:Key="ListBoxItemBaseTransparent" BasedOn="{StaticResource ListBoxItemBaseStyle}" TargetType="{x:Type ListBoxItem}">
        <Setter Property="hc:BorderElement.CornerRadius" Value="4" />
        <Setter Property="Background" Value="Transparent" />
    </Style>
    <Style x:Key="ListBoxBaseTransparentStyle" BasedOn="{StaticResource ListBoxBaseStyle}" TargetType="{x:Type ListBox}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="ItemContainerStyle" Value="{StaticResource ListBoxItemBaseTransparent}" />
    </Style>
    <Style x:Key="ListBoxItemBaseNewStyle" BasedOn="{StaticResource ListBoxItemBaseTransparent}" TargetType="{x:Type ListBoxItem}">
        <Style.Triggers>
            <Trigger Property="hc:EdgeElement.ShowEdgeContent" Value="true">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ListBoxItem}">
                            <Border Name="Bd" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="true">
                                <StackPanel Orientation="Horizontal">
                                    <ContentControl Width="16" Height="16" Content="{Binding Path=(hc:EdgeElement.LeftContent), RelativeSource={RelativeSource TemplatedParent}}" />
                                    <ContentPresenter Margin="6,0,0,0" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                                    <Path FlowDirection="LeftToRight" VerticalAlignment="Center" Data="{StaticResource NewGeometry}" Stretch="Uniform" Margin="10,0,0,0" Width="30" Height="14" Fill="{DynamicResource DangerBrush}" />
                                </StackPanel>
                            </Border>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListBoxItem}">
                    <Border Name="Bd" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="true">
                        <StackPanel Orientation="Horizontal">
                            <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                            <Path FlowDirection="LeftToRight" VerticalAlignment="Center" Data="{StaticResource NewGeometry}" Stretch="Uniform" Margin="10,0,0,0" Width="30" Height="14" Fill="{DynamicResource DangerBrush}" />
                        </StackPanel>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="DateTimePickerBaseStylePersian" TargetType="{x:Type hc:PersianDateTimePicker}">
        <Setter Property="Foreground" Value="{DynamicResource PrimaryTextBrush}" />
        <Setter Property="hc:BorderElement.CornerRadius" Value="{StaticResource DefaultCornerRadius}" />
        <Setter Property="Padding" Value="{StaticResource DefaultInputPadding}" />
        <Setter Property="Background" Value="{DynamicResource RegionBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
        <Setter Property="MinHeight" Value="{StaticResource DefaultControlHeight}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="hc:PersianDateTimePicker.CaretBrush" Value="{DynamicResource PrimaryTextBrush}" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Validation.ErrorTemplate" Value="{x:Null}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type hc:PersianDateTimePicker}">
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter TargetName="templateRoot" Property="UIElement.Opacity" Value="0.4" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="UIElement.IsMouseOver" Value="true" />
                                <Condition SourceName="PART_Popup" Property="IsOpen" Value="false" />
                            </MultiTrigger.Conditions>
                            <Setter Value="{DynamicResource SecondaryBorderBrush}" Property="BorderBrush" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="UIElement.IsMouseOver" Value="true" />
                                <Condition SourceName="PART_Popup" Property="IsOpen" Value="true" />
                            </MultiTrigger.Conditions>
                            <Setter Value="{DynamicResource PrimaryBrush}" Property="BorderBrush" />
                        </MultiTrigger>
                        <Trigger SourceName="PART_TextBox" Property="UIElement.IsFocused" Value="true">
                            <Setter Value="{DynamicResource PrimaryBrush}" Property="BorderBrush" />
                        </Trigger>
                        <Trigger SourceName="PART_Popup" Property="IsOpen" Value="True">
                            <Setter Value="{DynamicResource PrimaryBrush}" Property="BorderBrush" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                    <Border Name="templateRoot" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}">
                        <Grid Name="PART_Root" HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*" />
                                <ColumnDefinition Width="30" />
                            </Grid.ColumnDefinitions>
                            <Button Name="PART_Button" Height="{x:Static system:Double.NaN}" Style="{StaticResource ButtonIcon}" Padding="7,6" Geometry="{StaticResource ClockGeometry}" Grid.Column="1" Focusable="False" Grid.Row="0" Foreground="{Binding BorderBrush , ElementName=templateRoot}" />
                            <hc:WatermarkTextBox Name="PART_TextBox" CaretBrush="{TemplateBinding CaretBrush}" Foreground="{TemplateBinding Foreground}" Padding="{TemplateBinding Padding}" HorizontalAlignment="Stretch" Grid.Column="0" Focusable="{TemplateBinding Focusable}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" Grid.Row="0" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" />
                            <Popup Name="PART_Popup" Grid.Column="0" PopupAnimation="{StaticResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}" AllowsTransparency="True" Placement="Bottom" StaysOpen="False" PlacementTarget="{Binding ElementName=templateRoot}" />
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <ControlTemplate x:Key="DateTimePickerExtendTopTemplatePersian" TargetType="{x:Type hc:PersianDateTimePicker}">
        <ControlTemplate.Triggers>
            <Trigger Property="IsEnabled" Value="false">
                <Setter TargetName="templateRoot" Property="UIElement.Opacity" Value="0.4" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition SourceName="templateRoot" Property="UIElement.IsMouseOver" Value="true" />
                    <Condition SourceName="PART_Popup" Property="IsOpen" Value="false" />
                </MultiTrigger.Conditions>
                <Setter Value="{DynamicResource SecondaryBorderBrush}" Property="BorderBrush" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition SourceName="templateRoot" Property="UIElement.IsMouseOver" Value="true" />
                    <Condition SourceName="PART_Popup" Property="IsOpen" Value="true" />
                </MultiTrigger.Conditions>
                <Setter Value="{DynamicResource PrimaryBrush}" Property="BorderBrush" />
            </MultiTrigger>
            <Trigger SourceName="PART_TextBox" Property="UIElement.IsFocused" Value="true">
                <Setter TargetName="templateRoot" Value="{DynamicResource PrimaryBrush}" Property="BorderBrush" />
            </Trigger>
            <Trigger SourceName="PART_Popup" Property="IsOpen" Value="True">
                <Setter Value="{DynamicResource PrimaryBrush}" Property="BorderBrush" />
            </Trigger>
        </ControlTemplate.Triggers>
        <Grid>
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition MinHeight="{Binding Path=(hc:InfoElement.MinContentHeight), RelativeSource={RelativeSource TemplatedParent}}" Height="{Binding Path=(hc:InfoElement.ContentHeight), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource Double2GridLengthConverter}}" />
            </Grid.RowDefinitions>
            <DockPanel LastChildFill="True" Margin="{TemplateBinding Padding}" Visibility="{Binding Path=(hc:InfoElement.Title), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource String2VisibilityConverter}}" HorizontalAlignment="{Binding Path=(hc:TitleElement.HorizontalAlignment), RelativeSource={RelativeSource TemplatedParent}}">
                <ContentPresenter DockPanel.Dock="Right" Foreground="{DynamicResource DangerBrush}" Margin="4,0,0,0" Content="{Binding Path=(hc:InfoElement.Symbol), RelativeSource={RelativeSource TemplatedParent}}" Visibility="{Binding Path=(hc:InfoElement.Necessary), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource Boolean2VisibilityConverter}}" />
                <TextBlock AutoTooltip="True" TextWrapping="NoWrap" TextTrimming="CharacterEllipsis" Margin="1,0,1,0" Text="{Binding Path=(hc:InfoElement.Title), RelativeSource={RelativeSource TemplatedParent}}" />
            </DockPanel>
            <Border Name="templateRoot" Grid.Row="1" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}">
                <Grid Name="PART_Root" HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="*" />
                        <ColumnDefinition Width="30" />
                    </Grid.ColumnDefinitions>
                    <Button Name="PART_Button" Height="{x:Static system:Double.NaN}" Style="{StaticResource ButtonIcon}" Padding="7,6" Geometry="{StaticResource ClockGeometry}" Grid.Column="1" Focusable="False" Grid.Row="0" Foreground="{Binding BorderBrush , ElementName=templateRoot}" />
                    <hc:WatermarkTextBox Name="PART_TextBox" CaretBrush="{TemplateBinding CaretBrush}" Foreground="{TemplateBinding Foreground}" Padding="{TemplateBinding Padding}" HorizontalAlignment="Stretch" Grid.Column="0" Focusable="{TemplateBinding Focusable}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" Grid.Row="0" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" Watermark="{Binding Path=(hc:InfoElement.Placeholder), RelativeSource={RelativeSource TemplatedParent}}" />
                    <Popup Name="PART_Popup" Grid.Column="0" PopupAnimation="{StaticResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}" AllowsTransparency="True" Placement="Bottom" StaysOpen="False" PlacementTarget="{Binding ElementName=templateRoot}" />
                </Grid>
            </Border>
        </Grid>
    </ControlTemplate>
    <ControlTemplate x:Key="DateTimePickerExtendLeftTemplatePersian" TargetType="{x:Type hc:PersianDateTimePicker}">
        <ControlTemplate.Triggers>
            <Trigger Property="IsEnabled" Value="false">
                <Setter TargetName="templateRoot" Property="UIElement.Opacity" Value="0.4" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition SourceName="templateRoot" Property="UIElement.IsMouseOver" Value="true" />
                    <Condition SourceName="PART_Popup" Property="IsOpen" Value="false" />
                </MultiTrigger.Conditions>
                <Setter Value="{DynamicResource SecondaryBorderBrush}" Property="BorderBrush" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition SourceName="templateRoot" Property="UIElement.IsMouseOver" Value="true" />
                    <Condition SourceName="PART_Popup" Property="IsOpen" Value="true" />
                </MultiTrigger.Conditions>
                <Setter Value="{DynamicResource PrimaryBrush}" Property="BorderBrush" />
            </MultiTrigger>
            <Trigger SourceName="PART_TextBox" Property="UIElement.IsFocused" Value="true">
                <Setter TargetName="templateRoot" Value="{DynamicResource PrimaryBrush}" Property="BorderBrush" />
            </Trigger>
            <Trigger SourceName="PART_Popup" Property="IsOpen" Value="True">
                <Setter Value="{DynamicResource PrimaryBrush}" Property="BorderBrush" />
            </Trigger>
        </ControlTemplate.Triggers>
        <Grid MinHeight="{Binding Path=(hc:InfoElement.MinContentHeight), RelativeSource={RelativeSource TemplatedParent}}" Height="{Binding Path=(hc:InfoElement.ContentHeight), RelativeSource={RelativeSource TemplatedParent}}">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="{Binding Path=(hc:InfoElement.TitleWidth), RelativeSource={RelativeSource TemplatedParent}}" />
                <ColumnDefinition />
            </Grid.ColumnDefinitions>
            <DockPanel LastChildFill="True" Margin="0,7,6,7" Visibility="{Binding Path=(hc:InfoElement.Title), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource String2VisibilityConverter}}" HorizontalAlignment="{Binding Path=(hc:TitleElement.HorizontalAlignment), RelativeSource={RelativeSource TemplatedParent}}" VerticalAlignment="{Binding Path=(hc:TitleElement.VerticalAlignment), RelativeSource={RelativeSource TemplatedParent}}">
                <ContentPresenter DockPanel.Dock="Right" Foreground="{DynamicResource DangerBrush}" Margin="4,0,0,0" Content="{Binding Path=(hc:InfoElement.Symbol), RelativeSource={RelativeSource TemplatedParent}}" Visibility="{Binding Path=(hc:InfoElement.Necessary), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource Boolean2VisibilityConverter}}" />
                <TextBlock AutoTooltip="True" TextWrapping="NoWrap" TextTrimming="CharacterEllipsis" Text="{Binding Path=(hc:InfoElement.Title), RelativeSource={RelativeSource TemplatedParent}}" />
            </DockPanel>
            <Border Name="templateRoot" Grid.Column="1" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}">
                <Grid Name="PART_Root" HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="*" />
                        <ColumnDefinition Width="30" />
                    </Grid.ColumnDefinitions>
                    <Button Name="PART_Button" Height="{x:Static system:Double.NaN}" Style="{StaticResource ButtonIcon}" Padding="7,6" Geometry="{StaticResource ClockGeometry}" Grid.Column="1" Focusable="False" Grid.Row="0" Foreground="{Binding BorderBrush , ElementName=templateRoot}" />
                    <hc:WatermarkTextBox Name="PART_TextBox" CaretBrush="{TemplateBinding CaretBrush}" Foreground="{TemplateBinding Foreground}" Padding="{TemplateBinding Padding}" HorizontalAlignment="Stretch" Grid.Column="0" Focusable="{TemplateBinding Focusable}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" Grid.Row="0" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" Watermark="{Binding Path=(hc:InfoElement.Placeholder), RelativeSource={RelativeSource TemplatedParent}}" />
                    <Popup Name="PART_Popup" Grid.Column="0" PopupAnimation="{StaticResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}" AllowsTransparency="True" Placement="Bottom" StaysOpen="False" PlacementTarget="{Binding ElementName=templateRoot}" />
                </Grid>
            </Border>
        </Grid>
    </ControlTemplate>
    <Style x:Key="DateTimePickerExtendBaseStylePersian" BasedOn="{StaticResource DateTimePickerBaseStylePersian}" TargetType="{x:Type hc:PersianDateTimePicker}">
        <Style.Triggers>
            <Trigger Property="hc:TitleElement.TitlePlacement" Value="Left">
                <Setter Property="Template" Value="{StaticResource DateTimePickerExtendLeftTemplatePersian}" />
                <Setter Property="Width" Value="Auto" />
            </Trigger>
        </Style.Triggers>
        <Setter Property="Height" Value="Auto" />
        <Setter Property="hc:InfoElement.Symbol" Value="●" />
        <Setter Property="hc:InfoElement.ContentHeight" Value="{x:Static system:Double.NaN}" />
        <Setter Property="hc:InfoElement.MinContentHeight" Value="{StaticResource DefaultControlHeight}" />
        <Setter Property="Template" Value="{StaticResource DateTimePickerExtendTopTemplatePersian}" />
    </Style>
    <ControlTemplate x:Key="DateTimePickerPlusTopTemplatePersian" TargetType="{x:Type hc:PersianDateTimePicker}">
        <ControlTemplate.Resources>
            <Storyboard Name="StoryboardShow">
                <ThicknessAnimation TargetName="TextBlockError" TargetProperty="Margin" To="9,0,0,-18" Duration="0:0:.2" />
            </Storyboard>
            <Storyboard Name="StoryboardHidden">
                <ThicknessAnimation TargetName="TextBlockError" TargetProperty="Margin" To="9,0,0,4" Duration="0:0:0" />
            </Storyboard>
        </ControlTemplate.Resources>
        <ControlTemplate.Triggers>
            <Trigger Property="IsEnabled" Value="false">
                <Setter TargetName="templateRoot" Property="UIElement.Opacity" Value="0.4" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition SourceName="templateRoot" Property="UIElement.IsMouseOver" Value="true" />
                    <Condition SourceName="PART_Popup" Property="IsOpen" Value="false" />
                </MultiTrigger.Conditions>
                <Setter Value="{DynamicResource SecondaryBorderBrush}" Property="BorderBrush" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition SourceName="templateRoot" Property="UIElement.IsMouseOver" Value="true" />
                    <Condition SourceName="PART_Popup" Property="IsOpen" Value="true" />
                </MultiTrigger.Conditions>
                <Setter Value="{DynamicResource PrimaryBrush}" Property="BorderBrush" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition SourceName="templateRoot" Property="UIElement.IsMouseOver" Value="true" />
                    <Condition Property="hc:PersianDateTimePicker.ShowClearButton" Value="True" />
                </MultiTrigger.Conditions>
                <Setter TargetName="ButtonClear" Property="Visibility" Value="Visible" />
            </MultiTrigger>
            <Trigger SourceName="PART_TextBox" Property="UIElement.IsFocused" Value="true">
                <Setter TargetName="templateRoot" Value="{DynamicResource PrimaryBrush}" Property="BorderBrush" />
            </Trigger>
            <Trigger SourceName="PART_Popup" Property="IsOpen" Value="True">
                <Setter Value="{DynamicResource PrimaryBrush}" Property="BorderBrush" />
            </Trigger>
            <Trigger Property="hc:PersianDateTimePicker.IsError" Value="true">
                <Trigger.EnterActions>
                    <BeginStoryboard Storyboard="{StaticResource StoryboardShow}" />
                </Trigger.EnterActions>
                <Trigger.ExitActions>
                    <BeginStoryboard Storyboard="{StaticResource StoryboardHidden}" />
                </Trigger.ExitActions>
                <Setter TargetName="templateRoot" Value="{DynamicResource DangerBrush}" Property="BorderBrush" />
            </Trigger>
        </ControlTemplate.Triggers>
        <Grid>
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition MinHeight="{Binding Path=(hc:InfoElement.MinContentHeight), RelativeSource={RelativeSource TemplatedParent}}" Height="{Binding Path=(hc:InfoElement.ContentHeight), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource Double2GridLengthConverter}}" />
            </Grid.RowDefinitions>
            <DockPanel LastChildFill="True" Margin="{TemplateBinding Padding}" Visibility="{Binding Path=(hc:InfoElement.Title), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource String2VisibilityConverter}}" HorizontalAlignment="{Binding Path=(hc:TitleElement.HorizontalAlignment), RelativeSource={RelativeSource TemplatedParent}}">
                <ContentPresenter DockPanel.Dock="Right" Foreground="{DynamicResource DangerBrush}" Margin="4,0,0,0" Content="{Binding Path=(hc:InfoElement.Symbol), RelativeSource={RelativeSource TemplatedParent}}" Visibility="{Binding Path=(hc:InfoElement.Necessary), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource Boolean2VisibilityConverter}}" />
                <TextBlock AutoTooltip="True" TextWrapping="NoWrap" TextTrimming="CharacterEllipsis" Margin="1,0,1,0" Text="{Binding Path=(hc:InfoElement.Title), RelativeSource={RelativeSource TemplatedParent}}" />
            </DockPanel>
            <TextBlock Name="TextBlockError" TextBlock.FontSize="12" Grid.Row="1" Text="{TemplateBinding ErrorStr}" VerticalAlignment="Bottom" Margin="9,0,0,4" Foreground="{DynamicResource DangerBrush}" />
            <Border Name="templateRoot" Grid.Row="1" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}">
                <Grid Name="PART_Root" HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition />
                        <ColumnDefinition Width="Auto" />
                        <ColumnDefinition Width="25" />
                    </Grid.ColumnDefinitions>
                    <Button Name="ButtonClear" Height="{x:Static system:Double.NaN}" Command="interactivity:ControlCommands.Clear" Visibility="Collapsed" Width="16" Grid.Column="1" Style="{StaticResource ButtonIcon}" Padding="0,6" Geometry="{StaticResource DeleteFillCircleGeometry}" Foreground="{Binding BorderBrush , ElementName=templateRoot}" />
                    <Button Name="PART_Button" Height="{x:Static system:Double.NaN}" Style="{StaticResource ButtonIcon}" Padding="2,6,7,6" Geometry="{StaticResource ClockGeometry}" Grid.Column="2" Focusable="False" Grid.Row="0" Foreground="{Binding BorderBrush , ElementName=templateRoot}" />
                    <hc:WatermarkTextBox Name="PART_TextBox" CaretBrush="{TemplateBinding CaretBrush}" Foreground="{TemplateBinding Foreground}" Padding="{TemplateBinding Padding}" HorizontalAlignment="Stretch" Grid.Column="0" Focusable="{TemplateBinding Focusable}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" Grid.Row="0" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" Watermark="{Binding Path=(hc:InfoElement.Placeholder), RelativeSource={RelativeSource TemplatedParent}}" />
                    <Popup Name="PART_Popup" Grid.Column="0" PopupAnimation="{StaticResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}" AllowsTransparency="True" Placement="Bottom" StaysOpen="False" PlacementTarget="{Binding ElementName=templateRoot}" />
                </Grid>
            </Border>
        </Grid>
    </ControlTemplate>
    <ControlTemplate x:Key="DateTimePickerPlusLeftTemplatePersian" TargetType="{x:Type hc:PersianDateTimePicker}">
        <ControlTemplate.Resources>
            <Storyboard Name="StoryboardShow">
                <ThicknessAnimation TargetName="TextBlockError" TargetProperty="Margin" To="9,0,0,-18" Duration="0:0:.2" />
            </Storyboard>
            <Storyboard Name="StoryboardHidden">
                <ThicknessAnimation TargetName="TextBlockError" TargetProperty="Margin" To="9,0,0,4" Duration="0:0:0" />
            </Storyboard>
        </ControlTemplate.Resources>
        <ControlTemplate.Triggers>
            <Trigger Property="IsEnabled" Value="false">
                <Setter TargetName="templateRoot" Property="UIElement.Opacity" Value="0.4" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition SourceName="templateRoot" Property="UIElement.IsMouseOver" Value="true" />
                    <Condition SourceName="PART_Popup" Property="IsOpen" Value="false" />
                </MultiTrigger.Conditions>
                <Setter Value="{DynamicResource SecondaryBorderBrush}" Property="BorderBrush" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition SourceName="templateRoot" Property="UIElement.IsMouseOver" Value="true" />
                    <Condition SourceName="PART_Popup" Property="IsOpen" Value="true" />
                </MultiTrigger.Conditions>
                <Setter Value="{DynamicResource PrimaryBrush}" Property="BorderBrush" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition SourceName="templateRoot" Property="UIElement.IsMouseOver" Value="true" />
                    <Condition Property="hc:PersianDateTimePicker.ShowClearButton" Value="True" />
                </MultiTrigger.Conditions>
                <Setter TargetName="ButtonClear" Property="Visibility" Value="Visible" />
            </MultiTrigger>
            <Trigger SourceName="PART_TextBox" Property="UIElement.IsFocused" Value="true">
                <Setter TargetName="templateRoot" Value="{DynamicResource PrimaryBrush}" Property="BorderBrush" />
            </Trigger>
            <Trigger SourceName="PART_Popup" Property="IsOpen" Value="True">
                <Setter Value="{DynamicResource PrimaryBrush}" Property="BorderBrush" />
            </Trigger>
            <Trigger Property="hc:PersianDateTimePicker.IsError" Value="true">
                <Trigger.EnterActions>
                    <BeginStoryboard Storyboard="{StaticResource StoryboardShow}" />
                </Trigger.EnterActions>
                <Trigger.ExitActions>
                    <BeginStoryboard Storyboard="{StaticResource StoryboardHidden}" />
                </Trigger.ExitActions>
                <Setter TargetName="templateRoot" Value="{DynamicResource DangerBrush}" Property="BorderBrush" />
            </Trigger>
        </ControlTemplate.Triggers>
        <Grid MinHeight="{Binding Path=(hc:InfoElement.MinContentHeight), RelativeSource={RelativeSource TemplatedParent}}" Height="{Binding Path=(hc:InfoElement.ContentHeight), RelativeSource={RelativeSource TemplatedParent}}">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="{Binding Path=(hc:InfoElement.TitleWidth), RelativeSource={RelativeSource TemplatedParent}}" />
                <ColumnDefinition />
            </Grid.ColumnDefinitions>
            <DockPanel LastChildFill="True" Margin="0,7,6,7" Visibility="{Binding Path=(hc:InfoElement.Title), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource String2VisibilityConverter}}" HorizontalAlignment="{Binding Path=(hc:TitleElement.HorizontalAlignment), RelativeSource={RelativeSource TemplatedParent}}" VerticalAlignment="{Binding Path=(hc:TitleElement.VerticalAlignment), RelativeSource={RelativeSource TemplatedParent}}">
                <ContentPresenter DockPanel.Dock="Right" Foreground="{DynamicResource DangerBrush}" Margin="4,0,0,0" Content="{Binding Path=(hc:InfoElement.Symbol), RelativeSource={RelativeSource TemplatedParent}}" Visibility="{Binding Path=(hc:InfoElement.Necessary), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource Boolean2VisibilityConverter}}" />
                <TextBlock AutoTooltip="True" TextWrapping="NoWrap" TextTrimming="CharacterEllipsis" Text="{Binding Path=(hc:InfoElement.Title), RelativeSource={RelativeSource TemplatedParent}}" />
            </DockPanel>
            <TextBlock Name="TextBlockError" TextBlock.FontSize="12" Text="{TemplateBinding ErrorStr}" VerticalAlignment="Bottom" Margin="9,0,0,4" Foreground="{DynamicResource DangerBrush}" Grid.Column="1" />
            <Border Name="templateRoot" Grid.Column="1" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}">
                <Grid Name="PART_Root" HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition />
                        <ColumnDefinition Width="Auto" />
                        <ColumnDefinition Width="25" />
                    </Grid.ColumnDefinitions>
                    <Button Name="ButtonClear" Height="{x:Static system:Double.NaN}" Command="interactivity:ControlCommands.Clear" Visibility="Collapsed" Width="16" Grid.Column="1" Style="{StaticResource ButtonIcon}" Padding="0,6" Geometry="{StaticResource DeleteFillCircleGeometry}" Foreground="{Binding BorderBrush , ElementName=templateRoot}" />
                    <Button Name="PART_Button" Height="{x:Static system:Double.NaN}" Style="{StaticResource ButtonIcon}" Padding="2,6,7,6" Geometry="{StaticResource ClockGeometry}" Grid.Column="2" Focusable="False" Grid.Row="0" Foreground="{Binding BorderBrush , ElementName=templateRoot}" />
                    <hc:WatermarkTextBox Name="PART_TextBox" CaretBrush="{TemplateBinding CaretBrush}" Foreground="{TemplateBinding Foreground}" Padding="{TemplateBinding Padding}" HorizontalAlignment="Stretch" Grid.Column="0" Focusable="{TemplateBinding Focusable}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" Grid.Row="0" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" Watermark="{Binding Path=(hc:InfoElement.Placeholder), RelativeSource={RelativeSource TemplatedParent}}" />
                    <Popup Name="PART_Popup" Grid.Column="0" PopupAnimation="{StaticResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}" AllowsTransparency="True" Placement="Bottom" StaysOpen="False" PlacementTarget="{Binding ElementName=templateRoot}" />
                </Grid>
            </Border>
        </Grid>
    </ControlTemplate>
    <Style x:Key="DateTimePickerPlusBaseStylePersian" BasedOn="{StaticResource DateTimePickerExtendBaseStylePersian}" TargetType="{x:Type hc:PersianDateTimePicker}">
        <Style.Triggers>
            <Trigger Property="hc:TitleElement.TitlePlacement" Value="Left">
                <Setter Property="Template" Value="{StaticResource DateTimePickerPlusLeftTemplatePersian}" />
                <Setter Property="Width" Value="Auto" />
            </Trigger>
        </Style.Triggers>
        <Setter Property="hc:PersianDateTimePicker.IsError" Value="{Binding Path=(Validation.HasError), RelativeSource={RelativeSource Self}}" />
        <Setter Property="Template" Value="{StaticResource DateTimePickerPlusTopTemplatePersian}" />
    </Style>
    <Style x:Key="{x:Type hc:BusyIndicator}" TargetType="{x:Type hc:BusyIndicator}">
        <Setter Property="hc:BusyIndicator.BusyContent" Value="{x:Static langs:Lang.BusyIndicatorLoading}" />
        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="Focusable" Value="False" />
        <Setter Property="Foreground" Value="White" />
        <Setter Property="hc:BusyIndicator.ProgressBarStyle" Value="{DynamicResource ProgressBarPrimaryStripe}" />
        <Setter Property="hc:BusyIndicator.OverlayStyle">
            <Setter.Value>
                <Style TargetType="{x:Type Rectangle}">
                    <Setter Property="Fill" Value="{DynamicResource BackgroundBrush}" />
                    <Setter Property="UIElement.Opacity" Value="0.5" />
                </Style>
            </Setter.Value>
        </Setter>
        <Setter Property="hc:BusyIndicator.DisplayAfter" Value="00:00:00.1" />
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="VerticalAlignment" Value="Stretch" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="VerticalContentAlignment" Value="Stretch" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type hc:BusyIndicator}">
                    <Grid>
                        <Grid.VisualStateGroups>
                            <VisualStateGroup x:Name="VisibilityStates">
                                <VisualState x:Name="Hidden">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames BeginTime="00:00:00" Duration="00:00:00.001" TargetName="busycontent" TargetProperty="(UIElement.Visibility)">
                                            <DiscreteObjectKeyFrame KeyTime="00:00:00">
                                                <DiscreteObjectKeyFrame.Value>
                                                    <Visibility>Collapsed</Visibility>
                                                </DiscreteObjectKeyFrame.Value>
                                            </DiscreteObjectKeyFrame>
                                        </ObjectAnimationUsingKeyFrames>
                                        <ObjectAnimationUsingKeyFrames BeginTime="00:00:00" Duration="00:00:00.001" TargetName="overlay" TargetProperty="(UIElement.Visibility)">
                                            <DiscreteObjectKeyFrame KeyTime="00:00:00">
                                                <DiscreteObjectKeyFrame.Value>
                                                    <Visibility>Collapsed</Visibility>
                                                </DiscreteObjectKeyFrame.Value>
                                            </DiscreteObjectKeyFrame>
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Visible">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames BeginTime="00:00:00" Duration="00:00:00.001" TargetName="busycontent" TargetProperty="(UIElement.Visibility)">
                                            <DiscreteObjectKeyFrame KeyTime="00:00:00">
                                                <DiscreteObjectKeyFrame.Value>
                                                    <Visibility>Visible</Visibility>
                                                </DiscreteObjectKeyFrame.Value>
                                            </DiscreteObjectKeyFrame>
                                        </ObjectAnimationUsingKeyFrames>
                                        <ObjectAnimationUsingKeyFrames BeginTime="00:00:00" Duration="00:00:00.001" TargetName="overlay" TargetProperty="(UIElement.Visibility)">
                                            <DiscreteObjectKeyFrame KeyTime="00:00:00">
                                                <DiscreteObjectKeyFrame.Value>
                                                    <Visibility>Visible</Visibility>
                                                </DiscreteObjectKeyFrame.Value>
                                            </DiscreteObjectKeyFrame>
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="BusyStatusStates">
                                <VisualState x:Name="Idle">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames BeginTime="00:00:00" Duration="00:00:00.001" TargetName="content" TargetProperty="(Control.IsEnabled)">
                                            <DiscreteObjectKeyFrame KeyTime="00:00:00">
                                                <DiscreteObjectKeyFrame.Value>
                                                    <system:Boolean>True</system:Boolean>
                                                </DiscreteObjectKeyFrame.Value>
                                            </DiscreteObjectKeyFrame>
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Busy">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames BeginTime="00:00:00" Duration="00:00:00.001" TargetName="content" TargetProperty="(Control.IsEnabled)">
                                            <DiscreteObjectKeyFrame KeyTime="00:00:00">
                                                <DiscreteObjectKeyFrame.Value>
                                                    <system:Boolean>False</system:Boolean>
                                                </DiscreteObjectKeyFrame.Value>
                                            </DiscreteObjectKeyFrame>
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </Grid.VisualStateGroups>
                        <ContentControl Name="content" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" IsTabStop="False" Focusable="False" />
                        <Rectangle Name="overlay" Style="{TemplateBinding OverlayStyle}" />
                        <ContentPresenter Name="busycontent">
                            <ContentPresenter.Content>
                                <Grid HorizontalAlignment="Center" VerticalAlignment="Center">
                                    <Border Background="{DynamicResource TitleBrush}" BorderThickness="1" BorderBrush="{DynamicResource TitleBrush}" CornerRadius="2">
                                        <Border CornerRadius="1.5" Background="{DynamicResource TitleBrush}" Margin="1">
                                            <Grid Name="_grid" MinWidth="150">
                                                <Grid.RowDefinitions>
                                                    <RowDefinition />
                                                    <RowDefinition Height="Auto" />
                                                </Grid.RowDefinitions>
                                                <ContentPresenter Name="busyContent" Content="{TemplateBinding BusyContent}" ContentTemplate="{TemplateBinding BusyContentTemplate}" HorizontalAlignment="Center" Margin="8" />
                                                <ProgressBar Grid.Row="1" Value="100" Maximum="100" IsIndeterminate="True" Style="{TemplateBinding ProgressBarStyle}">
                                                    <ProgressBar.Width>
                                                        <MultiBinding Converter="{StaticResource ProgressBarWidthConverter}">
                                                            <Binding Path="ActualWidth" ElementName="busyContent" />
                                                            <Binding Path="MinWidth" ElementName="_grid" />
                                                        </MultiBinding>
                                                    </ProgressBar.Width>
                                                </ProgressBar>
                                            </Grid>
                                        </Border>
                                    </Border>
                                </Grid>
                            </ContentPresenter.Content>
                        </ContentPresenter>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <ControlTemplate x:Key="BusyIndicatorTemplate" TargetType="{x:Type hc:BusyIndicator}">
        <Grid>
            <Grid.VisualStateGroups>
                <VisualStateGroup x:Name="VisibilityStates">
                    <VisualState x:Name="Hidden">
                        <Storyboard>
                            <ObjectAnimationUsingKeyFrames BeginTime="00:00:00" Duration="00:00:00.001" TargetName="busycontent" TargetProperty="(UIElement.Visibility)">
                                <DiscreteObjectKeyFrame KeyTime="00:00:00">
                                    <DiscreteObjectKeyFrame.Value>
                                        <Visibility>Collapsed</Visibility>
                                    </DiscreteObjectKeyFrame.Value>
                                </DiscreteObjectKeyFrame>
                            </ObjectAnimationUsingKeyFrames>
                            <ObjectAnimationUsingKeyFrames BeginTime="00:00:00" Duration="00:00:00.001" TargetName="overlay" TargetProperty="(UIElement.Visibility)">
                                <DiscreteObjectKeyFrame KeyTime="00:00:00">
                                    <DiscreteObjectKeyFrame.Value>
                                        <Visibility>Collapsed</Visibility>
                                    </DiscreteObjectKeyFrame.Value>
                                </DiscreteObjectKeyFrame>
                            </ObjectAnimationUsingKeyFrames>
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="Visible">
                        <Storyboard>
                            <ObjectAnimationUsingKeyFrames BeginTime="00:00:00" Duration="00:00:00.001" TargetName="busycontent" TargetProperty="(UIElement.Visibility)">
                                <DiscreteObjectKeyFrame KeyTime="00:00:00">
                                    <DiscreteObjectKeyFrame.Value>
                                        <Visibility>Visible</Visibility>
                                    </DiscreteObjectKeyFrame.Value>
                                </DiscreteObjectKeyFrame>
                            </ObjectAnimationUsingKeyFrames>
                            <ObjectAnimationUsingKeyFrames BeginTime="00:00:00" Duration="00:00:00.001" TargetName="overlay" TargetProperty="(UIElement.Visibility)">
                                <DiscreteObjectKeyFrame KeyTime="00:00:00">
                                    <DiscreteObjectKeyFrame.Value>
                                        <Visibility>Visible</Visibility>
                                    </DiscreteObjectKeyFrame.Value>
                                </DiscreteObjectKeyFrame>
                            </ObjectAnimationUsingKeyFrames>
                        </Storyboard>
                    </VisualState>
                </VisualStateGroup>
                <VisualStateGroup x:Name="BusyStatusStates">
                    <VisualState x:Name="Idle">
                        <Storyboard>
                            <ObjectAnimationUsingKeyFrames BeginTime="00:00:00" Duration="00:00:00.001" TargetName="content" TargetProperty="(Control.IsEnabled)">
                                <DiscreteObjectKeyFrame KeyTime="00:00:00">
                                    <DiscreteObjectKeyFrame.Value>
                                        <system:Boolean>True</system:Boolean>
                                    </DiscreteObjectKeyFrame.Value>
                                </DiscreteObjectKeyFrame>
                            </ObjectAnimationUsingKeyFrames>
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="Busy">
                        <Storyboard>
                            <ObjectAnimationUsingKeyFrames BeginTime="00:00:00" Duration="00:00:00.001" TargetName="content" TargetProperty="(Control.IsEnabled)">
                                <DiscreteObjectKeyFrame KeyTime="00:00:00">
                                    <DiscreteObjectKeyFrame.Value>
                                        <system:Boolean>False</system:Boolean>
                                    </DiscreteObjectKeyFrame.Value>
                                </DiscreteObjectKeyFrame>
                            </ObjectAnimationUsingKeyFrames>
                        </Storyboard>
                    </VisualState>
                </VisualStateGroup>
            </Grid.VisualStateGroups>
            <ContentControl Name="content" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" IsTabStop="False" Focusable="False" />
            <Rectangle Name="overlay" Style="{TemplateBinding OverlayStyle}" />
            <ContentPresenter Name="busycontent">
                <ContentPresenter.Content>
                    <Grid HorizontalAlignment="Center" VerticalAlignment="Center">
                        <Border Background="White" BorderThickness="1" BorderBrush="{DynamicResource PrimaryBrush}" CornerRadius="0">
                            <Border Margin="1" Background="{TemplateBinding Background}" CornerRadius="0">
                                <Grid Name="_grid" MinWidth="150">
                                    <Grid.RowDefinitions>
                                        <RowDefinition />
                                        <RowDefinition Height="Auto" />
                                    </Grid.RowDefinitions>
                                    <ContentPresenter Name="busyContent" Content="{TemplateBinding BusyContent}" ContentTemplate="{TemplateBinding BusyContentTemplate}" HorizontalAlignment="Center" Margin="8" />
                                    <ProgressBar Grid.Row="1" Value="100" Maximum="100" IsIndeterminate="True" Style="{TemplateBinding ProgressBarStyle}">
                                        <ProgressBar.Width>
                                            <MultiBinding Converter="{StaticResource ProgressBarWidthConverter}">
                                                <Binding Path="ActualWidth" ElementName="busyContent" />
                                                <Binding Path="MinWidth" ElementName="_grid" />
                                            </MultiBinding>
                                        </ProgressBar.Width>
                                    </ProgressBar>
                                </Grid>
                            </Border>
                        </Border>
                    </Grid>
                </ContentPresenter.Content>
            </ContentPresenter>
        </Grid>
    </ControlTemplate>
    <Style x:Key="{x:Type hc:CheckTreeView}" TargetType="{x:Type hc:CheckTreeView}">
        <Setter Property="hc:TreeViewAttach.IsCheckTreeView" Value="True" />
        <Setter Property="ItemContainerStyle" Value="{DynamicResource TreeViewItemBaseStyle}" />
        <Setter Property="ItemTemplate">
            <Setter.Value>
                <HierarchicalDataTemplate DataType="{x:Type hc:CheckTreeView}" ItemsSource="{Binding Children}">
                    <StackPanel Orientation="Horizontal">
                        <CheckBox FlowDirection="LeftToRight" Margin="1" IsChecked="{Binding IsChecked}" Command="{Binding ClickCommand}" />
                        <TextBlock Margin="5,0" Text="{Binding Text}" />
                    </StackPanel>
                </HierarchicalDataTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <ContextMenu x:Key="TextBoxContextMenu" Style="{StaticResource ContextMenuBaseStyle}">
        <MenuItem Command="ApplicationCommands.Copy" />
        <MenuItem Command="ApplicationCommands.Cut" />
        <MenuItem Command="ApplicationCommands.Paste" />
    </ContextMenu>
    <Style x:Key="ListBoxModernStyle" BasedOn="{StaticResource ListBoxModernBaseStyle}" TargetType="{x:Type ListBox}" />
    <Style x:Key="ListBoxTransparentStyle" BasedOn="{StaticResource ListBoxBaseTransparentStyle}" TargetType="{x:Type ListBox}" />
    <Style x:Key="ListBoxItemNewStyle" BasedOn="{StaticResource ListBoxItemBaseNewStyle}" TargetType="{x:Type ListBoxItem}" />
    <Style x:Key="ChessBoard" TargetType="{x:Type ContentControl}">
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
        <Setter Property="hc:BorderElement.CornerRadius" Value="{StaticResource DefaultCornerRadius}" />
        <Setter Property="Padding" Value="{StaticResource DefaultControlPadding}" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ContentControl}">
                    <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{DynamicResource MainContentBackgroundBrush}" SnapsToDevicePixels="True" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}">
                        <Border Background="{DynamicResource MainContentForegroundDrawingBrush}" SnapsToDevicePixels="True" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}">
                            <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Content="{TemplateBinding Content}" />
                        </Border>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="LiveStyle" TargetType="{x:Type ContentControl}">
        <Setter Property="Background" Value="White" />
        <Setter Property="Padding" Value="{StaticResource DefaultControlPadding}" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ContentControl}">
                    <Grid SnapsToDevicePixels="True" Background="{TemplateBinding Background}">
                        <Grid SnapsToDevicePixels="True">
                            <Rectangle>
                                <Rectangle.Fill>
                                    <LinearGradientBrush StartPoint="0.499,1" EndPoint="0.5,1" x:Name="BasicBrush">
                                        <GradientStop Color="#08000000" Offset="0.0" />
                                        <GradientStop Color="#03000000" Offset="1.0" />
                                    </LinearGradientBrush>
                                </Rectangle.Fill>
                                <Rectangle.Triggers>
                                    <EventTrigger RoutedEvent="Rectangle.Loaded">
                                        <BeginStoryboard>
                                            <Storyboard>
                                                <PointAnimation TargetName="BasicBrush" TargetProperty="StartPoint" From="0.0,1" To="1,1" Duration="0:0:40" FillBehavior="HoldEnd" AutoReverse="True" RepeatBehavior="Forever" />
                                                <PointAnimation TargetName="BasicBrush" TargetProperty="EndPoint" From="0.001,1" To="1,1" Duration="0:0:40" FillBehavior="HoldEnd" AutoReverse="True" RepeatBehavior="Forever" />
                                            </Storyboard>
                                        </BeginStoryboard>
                                    </EventTrigger>
                                </Rectangle.Triggers>
                            </Rectangle>
                            <Rectangle>
                                <Rectangle.Fill>
                                    <LinearGradientBrush StartPoint="0.499,1" EndPoint="0.5,1" x:Name="ThirdBrush">
                                        <GradientStop Color="#08000000" Offset="0.0" />
                                        <GradientStop Color="#03000000" Offset="1.0" />
                                    </LinearGradientBrush>
                                </Rectangle.Fill>
                                <Rectangle.Triggers>
                                    <EventTrigger RoutedEvent="Rectangle.Loaded">
                                        <BeginStoryboard>
                                            <Storyboard>
                                                <PointAnimation TargetName="ThirdBrush" TargetProperty="StartPoint" From="1,1" To="0.0,1" Duration="0:0:15" FillBehavior="HoldEnd" RepeatBehavior="Forever" />
                                                <PointAnimation TargetName="ThirdBrush" TargetProperty="EndPoint" From="1,1" To="0.001,1" Duration="0:0:15" FillBehavior="HoldEnd" RepeatBehavior="Forever" />
                                                <PointAnimation TargetName="ThirdBrush" TargetProperty="EndPoint" From="1,1" To="0.0,1" BeginTime="0:0:15" Duration="0:0:15" FillBehavior="HoldEnd" RepeatBehavior="Forever" />
                                                <PointAnimation TargetName="ThirdBrush" TargetProperty="StartPoint" From="1,1" To="0.001,1" BeginTime="0:0:15" Duration="0:0:15" FillBehavior="HoldEnd" RepeatBehavior="Forever" />
                                            </Storyboard>
                                        </BeginStoryboard>
                                    </EventTrigger>
                                </Rectangle.Triggers>
                            </Rectangle>
                            <Rectangle>
                                <Rectangle.Fill>
                                    <LinearGradientBrush StartPoint="1,0.499" EndPoint="1,0.5" x:Name="SecondBrush">
                                        <GradientStop Color="#02000000" Offset="0.0" />
                                        <GradientStop Color="#07000000" Offset="1.0" />
                                    </LinearGradientBrush>
                                </Rectangle.Fill>
                                <Rectangle.Triggers>
                                    <EventTrigger RoutedEvent="Rectangle.Loaded">
                                        <BeginStoryboard>
                                            <Storyboard>
                                                <PointAnimation TargetName="SecondBrush" TargetProperty="StartPoint" From="1,1" To="1,0" Duration="0:0:20" FillBehavior="HoldEnd" AutoReverse="True" RepeatBehavior="Forever" />
                                                <PointAnimation TargetName="SecondBrush" TargetProperty="EndPoint" From="1,1" To="1,0.001" Duration="0:0:20" FillBehavior="HoldEnd" AutoReverse="True" RepeatBehavior="Forever" />
                                            </Storyboard>
                                        </BeginStoryboard>
                                    </EventTrigger>
                                </Rectangle.Triggers>
                            </Rectangle>
                        </Grid>
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Content="{TemplateBinding Content}" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="TabItemTransparentStyle" BasedOn="{StaticResource TabItemInLine}" TargetType="{x:Type TabItem}">
        <Setter Property="Background" Value="Transparent" />
    </Style>
    <Style x:Key="{x:Type hc:MaskedTextBox}" TargetType="{x:Type hc:MaskedTextBox}" BasedOn="{StaticResource TextBoxPlusBaseStyle}" />
    <Style x:Key="LoadingIndicatorArcsStyle" TargetType="{x:Type hc:LoadingIndicator}">
        <Setter Property="Foreground" Value="{DynamicResource PrimaryBrush}" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="Width" Value="40" />
        <Setter Property="Height" Value="40" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type hc:LoadingIndicator}">
                    <Border Name="PART_Border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}">
                        <Border.VisualStateGroups>
                            <VisualStateGroup x:Name="SizeStates">
                                <VisualState x:Name="Large" />
                                <VisualState x:Name="Small" />
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="ActiveStates">
                                <VisualState x:Name="Inactive" />
                                <VisualState x:Name="Active">
                                    <Storyboard SpeedRatio="{TemplateBinding SpeedRatio}">
                                        <DoubleAnimationUsingKeyFrames RepeatBehavior="Forever" TargetName="PART_Canvas0" TargetProperty="(UIElement.RenderTransform).(RotateTransform.Angle)">
                                            <LinearDoubleKeyFrame KeyTime="0:0:0.000" Value="0" />
                                            <LinearDoubleKeyFrame KeyTime="0:0:3.000" Value="360" />
                                        </DoubleAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames RepeatBehavior="Forever" TargetName="PART_Canvas1" TargetProperty="(UIElement.RenderTransform).(RotateTransform.Angle)">
                                            <LinearDoubleKeyFrame KeyTime="0:0:0.000" Value="0" />
                                            <LinearDoubleKeyFrame KeyTime="0:0:2.000" Value="-360" />
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </Border.VisualStateGroups>
                        <Border.Resources>
                            <Style TargetType="{x:Type Canvas}">
                                <Setter x:Key="{x:Type Canvas}" Property="UIElement.RenderTransformOrigin" Value="0.5,0.5" />
                                <Setter Property="RenderTransform" Value="{RotateTransform}" />
                            </Style>
                        </Border.Resources>
                        <Grid Background="Transparent">
                            <Grid.RenderTransform>
                                <TransformGroup>
                                    <ScaleTransform ScaleX="0.5" ScaleY="0.5" />
                                    <TranslateTransform X="10" Y="10" />
                                </TransformGroup>
                            </Grid.RenderTransform>
                            <Canvas Name="PART_Canvas0" Opacity="1.0">
                                <Path Stroke="{TemplateBinding Foreground}" StrokeThickness="10">
                                    <Path.Data>
                                        <PathGeometry Transform="{TranslateTransform X=20, Y=-20}">
                                            <PathGeometry.Figures>
                                                <PathFigureCollection>
                                                    <PathFigure StartPoint="0,0">
                                                        <PathFigure.Segments>
                                                            <PathSegmentCollection>
                                                                <ArcSegment Size="40,40" IsLargeArc="True" SweepDirection="CounterClockwise" Point="40,40" />
                                                            </PathSegmentCollection>
                                                        </PathFigure.Segments>
                                                    </PathFigure>
                                                </PathFigureCollection>
                                            </PathGeometry.Figures>
                                        </PathGeometry>
                                    </Path.Data>
                                </Path>
                            </Canvas>
                            <Canvas Name="PART_Canvas1" Opacity="0.3">
                                <Path Stroke="{TemplateBinding Foreground}" StrokeThickness="10">
                                    <Path.Data>
                                        <PathGeometry Transform="{TranslateTransform X=-7, Y=7}">
                                            <PathGeometry.Figures>
                                                <PathFigureCollection>
                                                    <PathFigure StartPoint="0,0">
                                                        <PathFigure.Segments>
                                                            <PathSegmentCollection>
                                                                <ArcSegment Size="30,30" IsLargeArc="True" SweepDirection="Clockwise" Point="40,40" />
                                                            </PathSegmentCollection>
                                                        </PathFigure.Segments>
                                                    </PathFigure>
                                                </PathFigureCollection>
                                            </PathGeometry.Figures>
                                        </PathGeometry>
                                    </Path.Data>
                                </Path>
                            </Canvas>
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="LoadingIndicatorArcsRingStyle" TargetType="{x:Type hc:LoadingIndicator}">
        <Setter Property="Foreground" Value="{DynamicResource PrimaryBrush}" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="Width" Value="40" />
        <Setter Property="Height" Value="40" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type hc:LoadingIndicator}">
                    <Border Name="PART_Border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}">
                        <Border.VisualStateGroups>
                            <VisualStateGroup x:Name="SizeStates">
                                <VisualState x:Name="Large" />
                                <VisualState x:Name="Small" />
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="ActiveStates">
                                <VisualState x:Name="Inactive" />
                                <VisualState x:Name="Active">
                                    <Storyboard>
                                        <DoubleAnimationUsingKeyFrames BeginTime="0:0:0.000" RepeatBehavior="Forever" TargetName="PART_Canvas0" TargetProperty="(UIElement.Opacity)">
                                            <DiscreteDoubleKeyFrame KeyTime="0:0:0.000" Value="1" />
                                            <DiscreteDoubleKeyFrame KeyTime="0:0:0.100" Value="0.3" />
                                            <DiscreteDoubleKeyFrame KeyTime="0:0:0.800" Value="0.3" />
                                        </DoubleAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames BeginTime="0:0:0.100" RepeatBehavior="Forever" TargetName="PART_Canvas1" TargetProperty="(UIElement.Opacity)">
                                            <DiscreteDoubleKeyFrame KeyTime="0:0:0.000" Value="1" />
                                            <DiscreteDoubleKeyFrame KeyTime="0:0:0.100" Value="0.3" />
                                            <DiscreteDoubleKeyFrame KeyTime="0:0:0.800" Value="0.3" />
                                        </DoubleAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames BeginTime="0:0:0.200" RepeatBehavior="Forever" TargetName="PART_Canvas2" TargetProperty="(UIElement.Opacity)">
                                            <DiscreteDoubleKeyFrame KeyTime="0:0:0.000" Value="1" />
                                            <DiscreteDoubleKeyFrame KeyTime="0:0:0.100" Value="0.3" />
                                            <DiscreteDoubleKeyFrame KeyTime="0:0:0.800" Value="0.3" />
                                        </DoubleAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames BeginTime="0:0:0.300" RepeatBehavior="Forever" TargetName="PART_Canvas3" TargetProperty="(UIElement.Opacity)">
                                            <DiscreteDoubleKeyFrame KeyTime="0:0:0.000" Value="1" />
                                            <DiscreteDoubleKeyFrame KeyTime="0:0:0.100" Value="0.3" />
                                            <DiscreteDoubleKeyFrame KeyTime="0:0:0.800" Value="0.3" />
                                        </DoubleAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames BeginTime="0:0:0.400" RepeatBehavior="Forever" TargetName="PART_Canvas4" TargetProperty="(UIElement.Opacity)">
                                            <DiscreteDoubleKeyFrame KeyTime="0:0:0.000" Value="1" />
                                            <DiscreteDoubleKeyFrame KeyTime="0:0:0.100" Value="0.3" />
                                            <DiscreteDoubleKeyFrame KeyTime="0:0:0.800" Value="0.3" />
                                        </DoubleAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames BeginTime="0:0:0.500" RepeatBehavior="Forever" TargetName="PART_Canvas5" TargetProperty="(UIElement.Opacity)">
                                            <DiscreteDoubleKeyFrame KeyTime="0:0:0.000" Value="1" />
                                            <DiscreteDoubleKeyFrame KeyTime="0:0:0.100" Value="0.3" />
                                            <DiscreteDoubleKeyFrame KeyTime="0:0:0.800" Value="0.3" />
                                        </DoubleAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames BeginTime="0:0:0.600" RepeatBehavior="Forever" TargetName="PART_Canvas6" TargetProperty="(UIElement.Opacity)">
                                            <DiscreteDoubleKeyFrame KeyTime="0:0:0.000" Value="1" />
                                            <DiscreteDoubleKeyFrame KeyTime="0:0:0.100" Value="0.3" />
                                            <DiscreteDoubleKeyFrame KeyTime="0:0:0.800" Value="0.3" />
                                        </DoubleAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames BeginTime="0:0:0.700" RepeatBehavior="Forever" TargetName="PART_Canvas7" TargetProperty="(UIElement.Opacity)">
                                            <DiscreteDoubleKeyFrame KeyTime="0:0:0.000" Value="1" />
                                            <DiscreteDoubleKeyFrame KeyTime="0:0:0.100" Value="0.3" />
                                            <DiscreteDoubleKeyFrame KeyTime="0:0:0.800" Value="0.3" />
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </Border.VisualStateGroups>
                        <Border.Resources>
                            <Style TargetType="{x:Type Canvas}">
                                <Setter x:Key="{x:Type Canvas}" Property="UIElement.Opacity" Value="0.3" />
                            </Style>
                            <Style TargetType="{x:Type Path}">
                                <Setter x:Key="{x:Type Path}" Property="StrokeThickness" Value="10" />
                            </Style>
                        </Border.Resources>
                        <Grid Background="Transparent" Width="40" Height="40" VerticalAlignment="Center" HorizontalAlignment="Center" RenderTransformOrigin="0.5,0.5" RenderTransform="{ScaleTransform ScaleX=0.5, ScaleY=0.5}">
                            <Canvas Name="PART_Canvas0" RenderTransform="{TranslateTransform X=0, Y=-14}">
                                <Path Stroke="{TemplateBinding Foreground}" Data="F0 M 10,0 A 40,40 0 0 1 30,0 " />
                            </Canvas>
                            <Canvas Name="PART_Canvas1" RenderTransform="{TranslateTransform X=12, Y=-12}">
                                <Path Stroke="{TemplateBinding Foreground}" Data="F0 M 40,14 A 40,40 0 0 0 24,0 " />
                            </Canvas>
                            <Canvas Name="PART_Canvas2" RenderTransform="{TranslateTransform X=14, Y=0}">
                                <Path Stroke="{TemplateBinding Foreground}" Data="F0 M 40,10 A 40,40 0 0 1 40,30 " />
                            </Canvas>
                            <Canvas Name="PART_Canvas3" RenderTransform="{TranslateTransform X=12, Y=12}">
                                <Path Stroke="{TemplateBinding Foreground}" Data="F0 M 40,24 A 40,40 0 0 1 24,40 " />
                            </Canvas>
                            <Canvas Name="PART_Canvas4" RenderTransform="{TranslateTransform X=0, Y=14}">
                                <Path Stroke="{TemplateBinding Foreground}" Data="F0 M 10,40 A 40,40 0 0 0 30,40 " />
                            </Canvas>
                            <Canvas Name="PART_Canvas5" RenderTransform="{TranslateTransform X=-12, Y=12}">
                                <Path Stroke="{TemplateBinding Foreground}" Data="F0 M 0,24 A 40,40 0 0 0 14,40 " />
                            </Canvas>
                            <Canvas Name="PART_Canvas6" RenderTransform="{TranslateTransform X=-14, Y=0}">
                                <Path Stroke="{TemplateBinding Foreground}" Data="F0 M 0,10 A 40,40 0 0 0 0,30 " />
                            </Canvas>
                            <Canvas Name="PART_Canvas7" RenderTransform="{TranslateTransform X=-12, Y=-12}">
                                <Path Stroke="{TemplateBinding Foreground}" Data="F0 M 0,14 A 40,40 0 0 1 14,0 " />
                            </Canvas>
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="LoadingIndicatorDoubleBounceStyle" TargetType="{x:Type hc:LoadingIndicator}">
        <Setter Property="Foreground" Value="{DynamicResource PrimaryBrush}" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="Width" Value="40" />
        <Setter Property="Height" Value="40" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type hc:LoadingIndicator}">
                    <Border Name="PART_Border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}">
                        <Border.VisualStateGroups>
                            <VisualStateGroup x:Name="SizeStates">
                                <VisualState x:Name="Large" />
                                <VisualState x:Name="Small" />
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="ActiveStates">
                                <VisualState x:Name="Inactive" />
                                <VisualState x:Name="Active">
                                    <Storyboard SpeedRatio="{TemplateBinding SpeedRatio}" RepeatBehavior="Forever" Duration="0:0:1.000">
                                        <DoubleAnimationUsingKeyFrames TargetName="PART_Ellipse0" TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleY)">
                                            <EasingDoubleKeyFrame KeyTime="0:0:0.000" Value="0" />
                                            <EasingDoubleKeyFrame KeyTime="0:0:1.000" Value="1" />
                                        </DoubleAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames TargetName="PART_Ellipse0" TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleX)">
                                            <EasingDoubleKeyFrame KeyTime="0:0:0.000" Value="0" />
                                            <EasingDoubleKeyFrame KeyTime="0:0:1.000" Value="1" />
                                        </DoubleAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames TargetName="PART_Ellipse1" TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleY)">
                                            <EasingDoubleKeyFrame KeyTime="0:0:0.000" Value="1" />
                                            <EasingDoubleKeyFrame KeyTime="0:0:1.000" Value="0" />
                                        </DoubleAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames TargetName="PART_Ellipse1" TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleX)">
                                            <EasingDoubleKeyFrame KeyTime="0:0:0.000" Value="1" />
                                            <EasingDoubleKeyFrame KeyTime="0:0:1.000" Value="0" />
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </Border.VisualStateGroups>
                        <Grid Background="Transparent">
                            <Ellipse Name="PART_Ellipse0" RenderTransformOrigin="0.5,0.5" Opacity="0.3" Fill="{TemplateBinding Foreground}" RenderTransform="{ScaleTransform}" />
                            <Ellipse Name="PART_Ellipse1" RenderTransformOrigin="0.5,0.5" Opacity="0.3" Fill="{TemplateBinding Foreground}" RenderTransform="{ScaleTransform}" />
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="LoadingIndicatorFlipPlaneStyle" TargetType="{x:Type hc:LoadingIndicator}">
        <Setter Property="Foreground" Value="{DynamicResource PrimaryBrush}" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="Width" Value="40" />
        <Setter Property="Height" Value="40" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type hc:LoadingIndicator}">
                    <Border Name="PART_Border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}">
                        <Border.VisualStateGroups>
                            <VisualStateGroup x:Name="SizeStates">
                                <VisualState x:Name="Large" />
                                <VisualState x:Name="Small" />
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="ActiveStates">
                                <VisualState x:Name="Inactive" />
                                <VisualState x:Name="Active">
                                    <Storyboard SpeedRatio="{TemplateBinding SpeedRatio}" RepeatBehavior="Forever" Duration="0:0:1.600">
                                        <DoubleAnimationUsingKeyFrames BeginTime="0:0:0.000" TargetName="PART_Rect" TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleY)">
                                            <LinearDoubleKeyFrame KeyTime="0:0:0.000" Value="1" />
                                            <LinearDoubleKeyFrame KeyTime="0:0:0.400" Value="0" />
                                            <LinearDoubleKeyFrame KeyTime="0:0:0.800" Value="1" />
                                        </DoubleAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames BeginTime="0:0:0.800" TargetName="PART_Rect" TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleX)">
                                            <LinearDoubleKeyFrame KeyTime="0:0:0.000" Value="1" />
                                            <LinearDoubleKeyFrame KeyTime="0:0:0.400" Value="0" />
                                            <LinearDoubleKeyFrame KeyTime="0:0:0.800" Value="1" />
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </Border.VisualStateGroups>
                        <Grid Background="Transparent">
                            <Rectangle Name="PART_Rect" RenderTransformOrigin="0.5,0.5" Fill="{TemplateBinding Foreground}" RenderTransform="{ScaleTransform}" />
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="LoadingIndicatorPulseStyle" TargetType="{x:Type hc:LoadingIndicator}">
        <Setter Property="Foreground" Value="{DynamicResource PrimaryBrush}" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="Width" Value="40" />
        <Setter Property="Height" Value="40" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type hc:LoadingIndicator}">
                    <Border Name="PART_Border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}">
                        <Border.VisualStateGroups>
                            <VisualStateGroup x:Name="SizeStates">
                                <VisualState x:Name="Large" />
                                <VisualState x:Name="Small" />
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="ActiveStates">
                                <VisualState x:Name="Inactive" />
                                <VisualState x:Name="Active">
                                    <Storyboard SpeedRatio="{TemplateBinding SpeedRatio}" RepeatBehavior="Forever" Duration="0:0:1.500">
                                        <DoubleAnimationUsingKeyFrames TargetName="PART_Ellipse" TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleY)">
                                            <LinearDoubleKeyFrame KeyTime="0:0:0.000" Value="0" />
                                            <LinearDoubleKeyFrame KeyTime="0:0:1.500" Value="1" />
                                        </DoubleAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames TargetName="PART_Ellipse" TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleX)">
                                            <LinearDoubleKeyFrame KeyTime="0:0:0.000" Value="0" />
                                            <LinearDoubleKeyFrame KeyTime="0:0:1.500" Value="1" />
                                        </DoubleAnimationUsingKeyFrames>
                                        <DoubleAnimation From="1" To="0" Duration="0:0:1.500" TargetName="PART_Ellipse" TargetProperty="(UIElement.Opacity)" />
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </Border.VisualStateGroups>
                        <Grid Background="Transparent">
                            <Ellipse Name="PART_Ellipse" RenderTransformOrigin="0.5,0.5" Fill="{TemplateBinding Foreground}" RenderTransform="{ScaleTransform}" />
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="LoadingIndicatorRingStyle" TargetType="{x:Type hc:LoadingIndicator}">
        <Setter Property="Foreground" Value="{DynamicResource PrimaryBrush}" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="Width" Value="40" />
        <Setter Property="Height" Value="40" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type hc:LoadingIndicator}">
                    <Border Name="PART_Border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}">
                        <Border.VisualStateGroups>
                            <VisualStateGroup x:Name="SizeStates">
                                <VisualState x:Name="Large" />
                                <VisualState x:Name="Small" />
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="ActiveStates">
                                <VisualState x:Name="Inactive" />
                                <VisualState x:Name="Active">
                                    <Storyboard SpeedRatio="{TemplateBinding SpeedRatio}">
                                        <DoubleAnimationUsingKeyFrames RepeatBehavior="Forever" BeginTime="0:0:0.000" TargetName="PART_Ellipse0" TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleX)">
                                            <LinearDoubleKeyFrame KeyTime="0:0:0.000" Value="0" />
                                            <LinearDoubleKeyFrame KeyTime="0:0:0.400" Value="1" />
                                            <LinearDoubleKeyFrame KeyTime="0:0:0.800" Value="0" />
                                        </DoubleAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames RepeatBehavior="Forever" BeginTime="0:0:0.100" TargetName="PART_Ellipse1" TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleX)">
                                            <LinearDoubleKeyFrame KeyTime="0:0:0.000" Value="0" />
                                            <LinearDoubleKeyFrame KeyTime="0:0:0.400" Value="1" />
                                            <LinearDoubleKeyFrame KeyTime="0:0:0.800" Value="0" />
                                        </DoubleAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames RepeatBehavior="Forever" BeginTime="0:0:0.200" TargetName="PART_Ellipse2" TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleX)">
                                            <LinearDoubleKeyFrame KeyTime="0:0:0.000" Value="0" />
                                            <LinearDoubleKeyFrame KeyTime="0:0:0.400" Value="1" />
                                            <LinearDoubleKeyFrame KeyTime="0:0:0.800" Value="0" />
                                        </DoubleAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames RepeatBehavior="Forever" BeginTime="0:0:0.300" TargetName="PART_Ellipse3" TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleX)">
                                            <LinearDoubleKeyFrame KeyTime="0:0:0.000" Value="0" />
                                            <LinearDoubleKeyFrame KeyTime="0:0:0.400" Value="1" />
                                            <LinearDoubleKeyFrame KeyTime="0:0:0.800" Value="0" />
                                        </DoubleAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames RepeatBehavior="Forever" BeginTime="0:0:0.400" TargetName="PART_Ellipse4" TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleX)">
                                            <LinearDoubleKeyFrame KeyTime="0:0:0.000" Value="0" />
                                            <LinearDoubleKeyFrame KeyTime="0:0:0.400" Value="1" />
                                            <LinearDoubleKeyFrame KeyTime="0:0:0.800" Value="0" />
                                        </DoubleAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames RepeatBehavior="Forever" BeginTime="0:0:0.500" TargetName="PART_Ellipse5" TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleX)">
                                            <LinearDoubleKeyFrame KeyTime="0:0:0.000" Value="0" />
                                            <LinearDoubleKeyFrame KeyTime="0:0:0.400" Value="1" />
                                            <LinearDoubleKeyFrame KeyTime="0:0:0.800" Value="0" />
                                        </DoubleAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames RepeatBehavior="Forever" BeginTime="0:0:0.600" TargetName="PART_Ellipse6" TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleX)">
                                            <LinearDoubleKeyFrame KeyTime="0:0:0.000" Value="0" />
                                            <LinearDoubleKeyFrame KeyTime="0:0:0.400" Value="1" />
                                            <LinearDoubleKeyFrame KeyTime="0:0:0.800" Value="0" />
                                        </DoubleAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames RepeatBehavior="Forever" BeginTime="0:0:0.700" TargetName="PART_Ellipse7" TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleX)">
                                            <LinearDoubleKeyFrame KeyTime="0:0:0.000" Value="0" />
                                            <LinearDoubleKeyFrame KeyTime="0:0:0.400" Value="1" />
                                            <LinearDoubleKeyFrame KeyTime="0:0:0.800" Value="0" />
                                        </DoubleAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames RepeatBehavior="Forever" BeginTime="0:0:0.000" TargetName="PART_Ellipse0" TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleY)">
                                            <LinearDoubleKeyFrame KeyTime="0:0:0.000" Value="0" />
                                            <LinearDoubleKeyFrame KeyTime="0:0:0.400" Value="1" />
                                            <LinearDoubleKeyFrame KeyTime="0:0:0.800" Value="0" />
                                        </DoubleAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames RepeatBehavior="Forever" BeginTime="0:0:0.100" TargetName="PART_Ellipse1" TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleY)">
                                            <LinearDoubleKeyFrame KeyTime="0:0:0.000" Value="0" />
                                            <LinearDoubleKeyFrame KeyTime="0:0:0.400" Value="1" />
                                            <LinearDoubleKeyFrame KeyTime="0:0:0.800" Value="0" />
                                        </DoubleAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames RepeatBehavior="Forever" BeginTime="0:0:0.200" TargetName="PART_Ellipse2" TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleY)">
                                            <LinearDoubleKeyFrame KeyTime="0:0:0.000" Value="0" />
                                            <LinearDoubleKeyFrame KeyTime="0:0:0.400" Value="1" />
                                            <LinearDoubleKeyFrame KeyTime="0:0:0.800" Value="0" />
                                        </DoubleAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames RepeatBehavior="Forever" BeginTime="0:0:0.300" TargetName="PART_Ellipse3" TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleY)">
                                            <LinearDoubleKeyFrame KeyTime="0:0:0.000" Value="0" />
                                            <LinearDoubleKeyFrame KeyTime="0:0:0.400" Value="1" />
                                            <LinearDoubleKeyFrame KeyTime="0:0:0.800" Value="0" />
                                        </DoubleAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames RepeatBehavior="Forever" BeginTime="0:0:0.400" TargetName="PART_Ellipse4" TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleY)">
                                            <LinearDoubleKeyFrame KeyTime="0:0:0.000" Value="0" />
                                            <LinearDoubleKeyFrame KeyTime="0:0:0.400" Value="1" />
                                            <LinearDoubleKeyFrame KeyTime="0:0:0.800" Value="0" />
                                        </DoubleAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames RepeatBehavior="Forever" BeginTime="0:0:0.500" TargetName="PART_Ellipse5" TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleY)">
                                            <LinearDoubleKeyFrame KeyTime="0:0:0.000" Value="0" />
                                            <LinearDoubleKeyFrame KeyTime="0:0:0.400" Value="1" />
                                            <LinearDoubleKeyFrame KeyTime="0:0:0.800" Value="0" />
                                        </DoubleAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames RepeatBehavior="Forever" BeginTime="0:0:0.600" TargetName="PART_Ellipse6" TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleY)">
                                            <LinearDoubleKeyFrame KeyTime="0:0:0.000" Value="0" />
                                            <LinearDoubleKeyFrame KeyTime="0:0:0.400" Value="1" />
                                            <LinearDoubleKeyFrame KeyTime="0:0:0.800" Value="0" />
                                        </DoubleAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames RepeatBehavior="Forever" BeginTime="0:0:0.700" TargetName="PART_Ellipse7" TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleY)">
                                            <LinearDoubleKeyFrame KeyTime="0:0:0.000" Value="0" />
                                            <LinearDoubleKeyFrame KeyTime="0:0:0.400" Value="1" />
                                            <LinearDoubleKeyFrame KeyTime="0:0:0.800" Value="0" />
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </Border.VisualStateGroups>
                        <Grid Background="Transparent" Width="40" Height="40">
                            <Grid.Resources>
                                <Style TargetType="{x:Type Ellipse}">
                                    <Setter x:Key="{x:Type Ellipse}" Property="UIElement.RenderTransformOrigin" Value="0.5,0.5" />
                                    <Setter Property="Width" Value="5" />
                                    <Setter Property="Height" Value="5" />
                                    <Setter Property="RenderTransform" Value="{ScaleTransform ScaleX=0, ScaleY=0}" />
                                </Style>
                            </Grid.Resources>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition />
                                <ColumnDefinition />
                                <ColumnDefinition />
                                <ColumnDefinition />
                                <ColumnDefinition />
                            </Grid.ColumnDefinitions>
                            <Grid.RowDefinitions>
                                <RowDefinition />
                                <RowDefinition />
                                <RowDefinition />
                                <RowDefinition />
                                <RowDefinition />
                            </Grid.RowDefinitions>
                            <Ellipse Name="PART_Ellipse0" Grid.Row="0" Grid.Column="2" Grid.RowSpan="1" Grid.ColumnSpan="1" Fill="{TemplateBinding Foreground}" />
                            <Ellipse Name="PART_Ellipse1" Grid.Row="0" Grid.Column="3" Grid.RowSpan="2" Grid.ColumnSpan="2" Fill="{TemplateBinding Foreground}" />
                            <Ellipse Name="PART_Ellipse2" Grid.Row="2" Grid.Column="4" Grid.RowSpan="1" Grid.ColumnSpan="1" Fill="{TemplateBinding Foreground}" />
                            <Ellipse Name="PART_Ellipse3" Grid.Row="3" Grid.Column="3" Grid.RowSpan="2" Grid.ColumnSpan="2" Fill="{TemplateBinding Foreground}" />
                            <Ellipse Name="PART_Ellipse4" Grid.Row="4" Grid.Column="2" Grid.RowSpan="1" Grid.ColumnSpan="1" Fill="{TemplateBinding Foreground}" />
                            <Ellipse Name="PART_Ellipse5" Grid.Row="3" Grid.Column="0" Grid.RowSpan="2" Grid.ColumnSpan="2" Fill="{TemplateBinding Foreground}" />
                            <Ellipse Name="PART_Ellipse6" Grid.Row="2" Grid.Column="0" Grid.RowSpan="1" Grid.ColumnSpan="1" Fill="{TemplateBinding Foreground}" />
                            <Ellipse Name="PART_Ellipse7" Grid.Row="0" Grid.Column="0" Grid.RowSpan="2" Grid.ColumnSpan="2" Fill="{TemplateBinding Foreground}" />
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="LoadingIndicatorThreeDotsStyle" TargetType="{x:Type hc:LoadingIndicator}">
        <Setter Property="Foreground" Value="{DynamicResource PrimaryBrush}" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="MinWidth" Value="70" />
        <Setter Property="MinHeight" Value="20" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type hc:LoadingIndicator}">
                    <Border Name="PART_Border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}">
                        <Border.VisualStateGroups>
                            <VisualStateGroup x:Name="SizeStates">
                                <VisualState x:Name="Large" />
                                <VisualState x:Name="Small" />
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="ActiveStates">
                                <VisualState x:Name="Inactive" />
                                <VisualState x:Name="Active">
                                    <Storyboard SpeedRatio="{TemplateBinding SpeedRatio}" RepeatBehavior="Forever" Duration="0:0:1.900">
                                        <DoubleAnimationUsingKeyFrames TargetName="PART_Ellipse0" TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleX)">
                                            <LinearDoubleKeyFrame KeyTime="0:0:0.000" Value="0" />
                                            <LinearDoubleKeyFrame KeyTime="0:0:0.500" Value="1" />
                                            <LinearDoubleKeyFrame KeyTime="0:0:0.600" Value="1" />
                                            <LinearDoubleKeyFrame KeyTime="0:0:1.100" Value="0" />
                                        </DoubleAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames TargetName="PART_Ellipse1" TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleX)">
                                            <LinearDoubleKeyFrame KeyTime="0:0:0.250" Value="0" />
                                            <LinearDoubleKeyFrame KeyTime="0:0:0.750" Value="1" />
                                            <LinearDoubleKeyFrame KeyTime="0:0:0.850" Value="1" />
                                            <LinearDoubleKeyFrame KeyTime="0:0:1.350" Value="0" />
                                        </DoubleAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames TargetName="PART_Ellipse2" TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleX)">
                                            <LinearDoubleKeyFrame KeyTime="0:0:0.500" Value="0" />
                                            <LinearDoubleKeyFrame KeyTime="0:0:1.000" Value="1" />
                                            <LinearDoubleKeyFrame KeyTime="0:0:1.100" Value="1" />
                                            <LinearDoubleKeyFrame KeyTime="0:0:1.600" Value="0" />
                                        </DoubleAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames TargetName="PART_Ellipse0" TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleY)">
                                            <LinearDoubleKeyFrame KeyTime="0:0:0.000" Value="0" />
                                            <LinearDoubleKeyFrame KeyTime="0:0:0.500" Value="1" />
                                            <LinearDoubleKeyFrame KeyTime="0:0:0.600" Value="1" />
                                            <LinearDoubleKeyFrame KeyTime="0:0:1.100" Value="0" />
                                        </DoubleAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames TargetName="PART_Ellipse1" TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleY)">
                                            <LinearDoubleKeyFrame KeyTime="0:0:0.250" Value="0" />
                                            <LinearDoubleKeyFrame KeyTime="0:0:0.750" Value="1" />
                                            <LinearDoubleKeyFrame KeyTime="0:0:0.850" Value="1" />
                                            <LinearDoubleKeyFrame KeyTime="0:0:1.350" Value="0" />
                                        </DoubleAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames TargetName="PART_Ellipse2" TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleY)">
                                            <LinearDoubleKeyFrame KeyTime="0:0:0.500" Value="0" />
                                            <LinearDoubleKeyFrame KeyTime="0:0:1.000" Value="1" />
                                            <LinearDoubleKeyFrame KeyTime="0:0:1.100" Value="1" />
                                            <LinearDoubleKeyFrame KeyTime="0:0:1.600" Value="0" />
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </Border.VisualStateGroups>
                        <Border.Resources>
                            <Style TargetType="{x:Type Ellipse}">
                                <Setter x:Key="{x:Type Ellipse}" Property="UIElement.RenderTransformOrigin" Value="0.5,0.5" />
                                <Setter Property="Width" Value="20" />
                                <Setter Property="Height" Value="20" />
                                <Setter Property="RenderTransform" Value="{ScaleTransform ScaleX=0, ScaleY=0}" />
                            </Style>
                        </Border.Resources>
                        <Border Background="Transparent">
                            <Grid Width="70" Height="20">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="Auto" />
                                    <ColumnDefinition Width="5" />
                                    <ColumnDefinition Width="Auto" />
                                    <ColumnDefinition Width="5" />
                                    <ColumnDefinition Width="Auto" />
                                </Grid.ColumnDefinitions>
                                <Ellipse Name="PART_Ellipse0" Grid.Column="0" Fill="{TemplateBinding Foreground}" />
                                <Ellipse Name="PART_Ellipse1" Grid.Column="2" Fill="{TemplateBinding Foreground}" />
                                <Ellipse Name="PART_Ellipse2" Grid.Column="4" Fill="{TemplateBinding Foreground}" />
                            </Grid>
                        </Border>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="LoadingIndicatorWaveStyle" TargetType="{x:Type hc:LoadingIndicator}">
        <Setter Property="Foreground" Value="{DynamicResource PrimaryBrush}" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="Height" Value="25" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type hc:LoadingIndicator}">
                    <ControlTemplate.Resources>
                        <Style TargetType="{x:Type Rectangle}">
                            <Setter x:Key="{x:Type Rectangle}" Property="Width" Value="6" />
                            <Setter Property="VerticalAlignment" Value="Stretch" />
                            <Setter Property="UIElement.RenderTransformOrigin" Value="0.5,0.5" />
                            <Setter Property="RenderTransform" Value="{ScaleTransform}" />
                        </Style>
                    </ControlTemplate.Resources>
                    <Border Name="PART_Border" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}">
                        <Border.VisualStateGroups>
                            <VisualStateGroup x:Name="SizeStates">
                                <VisualState x:Name="Large" />
                                <VisualState x:Name="Small" />
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="ActiveStates">
                                <VisualState x:Name="Inactive" />
                                <VisualState x:Name="Active">
                                    <Storyboard SpeedRatio="{TemplateBinding SpeedRatio}" RepeatBehavior="Forever" Duration="0:0:1.000">
                                        <DoubleAnimationUsingKeyFrames TargetName="PART_Rect0" TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleY)">
                                            <LinearDoubleKeyFrame KeyTime="0:0:0.100" Value="1.6" />
                                            <LinearDoubleKeyFrame KeyTime="0:0:0.150" Value="1.6" />
                                            <LinearDoubleKeyFrame KeyTime="0:0:0.350" Value="1" />
                                        </DoubleAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames TargetName="PART_Rect1" TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleY)">
                                            <LinearDoubleKeyFrame KeyTime="0:0:0.150" Value="1.6" />
                                            <LinearDoubleKeyFrame KeyTime="0:0:0.200" Value="1.6" />
                                            <LinearDoubleKeyFrame KeyTime="0:0:0.400" Value="1" />
                                        </DoubleAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames TargetName="PART_Rect2" TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleY)">
                                            <LinearDoubleKeyFrame KeyTime="0:0:0.200" Value="1.6" />
                                            <LinearDoubleKeyFrame KeyTime="0:0:0.250" Value="1.6" />
                                            <LinearDoubleKeyFrame KeyTime="0:0:0.450" Value="1" />
                                        </DoubleAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames TargetName="PART_Rect3" TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleY)">
                                            <LinearDoubleKeyFrame KeyTime="0:0:0.250" Value="1.6" />
                                            <LinearDoubleKeyFrame KeyTime="0:0:0.300" Value="1.6" />
                                            <LinearDoubleKeyFrame KeyTime="0:0:0.500" Value="1" />
                                        </DoubleAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames TargetName="PART_Rect4" TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleY)">
                                            <LinearDoubleKeyFrame KeyTime="0:0:0.300" Value="1.6" />
                                            <LinearDoubleKeyFrame KeyTime="0:0:0.350" Value="1.6" />
                                            <LinearDoubleKeyFrame KeyTime="0:0:0.550" Value="1" />
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </Border.VisualStateGroups>
                        <Grid Background="Transparent">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="6" />
                                <ColumnDefinition Width="5" />
                                <ColumnDefinition Width="6" />
                                <ColumnDefinition Width="5" />
                                <ColumnDefinition Width="6" />
                                <ColumnDefinition Width="5" />
                                <ColumnDefinition Width="6" />
                                <ColumnDefinition Width="5" />
                                <ColumnDefinition Width="6" />
                                <ColumnDefinition Width="5" />
                            </Grid.ColumnDefinitions>
                            <Rectangle Name="PART_Rect0" Grid.Column="0" Fill="{TemplateBinding Foreground}" />
                            <Rectangle Name="PART_Rect1" Grid.Column="2" Fill="{TemplateBinding Foreground}" />
                            <Rectangle Name="PART_Rect2" Grid.Column="4" Fill="{TemplateBinding Foreground}" />
                            <Rectangle Name="PART_Rect3" Grid.Column="6" Fill="{TemplateBinding Foreground}" />
                            <Rectangle Name="PART_Rect4" Grid.Column="8" Fill="{TemplateBinding Foreground}" />
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="LoadingIndicatorAppleStyle" TargetType="{x:Type hc:LoadingIndicator}">
        <Setter Property="Foreground" Value="{DynamicResource PrimaryBrush}" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="Height" Value="40" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type hc:LoadingIndicator}">
                    <Border Name="PART_Border" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}">
                        <Border.VisualStateGroups>
                            <VisualStateGroup x:Name="ActiveStates">
                                <VisualState x:Name="Inactive">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames TargetProperty="Visibility" Duration="0:0:0">
                                            <ObjectAnimationUsingKeyFrames.KeyFrames>
                                                <DiscreteObjectKeyFrame KeyTime="0:0:0">
                                                    <DiscreteObjectKeyFrame.Value>
                                                        <Visibility>Collapsed</Visibility>
                                                    </DiscreteObjectKeyFrame.Value>
                                                </DiscreteObjectKeyFrame>
                                            </ObjectAnimationUsingKeyFrames.KeyFrames>
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Active">
                                    <Storyboard BeginTime="00:00:00" RepeatBehavior="Forever">
                                        <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" TargetName="PART_Rect0" TargetProperty="(UIElement.Opacity)">
                                            <EasingDoubleKeyFrame KeyTime="00:00:00" Value="1" />
                                            <EasingDoubleKeyFrame KeyTime="00:00:00.1000000" Value="0.5" />
                                            <EasingDoubleKeyFrame KeyTime="00:00:00.2000000" Value="0.25" />
                                            <EasingDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0.2" />
                                        </DoubleAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" TargetName="PART_Rect11" TargetProperty="(UIElement.Opacity)">
                                            <EasingDoubleKeyFrame KeyTime="00:00:00" Value="0.5" />
                                            <EasingDoubleKeyFrame KeyTime="00:00:00.1000000" Value="0.25" />
                                            <EasingDoubleKeyFrame KeyTime="00:00:00.2000000" Value="0.2" />
                                            <EasingDoubleKeyFrame KeyTime="00:00:01" Value="0.2" />
                                            <EasingDoubleKeyFrame KeyTime="00:00:01.1000000" Value="1" />
                                        </DoubleAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" TargetName="PART_Rect10" TargetProperty="(UIElement.Opacity)">
                                            <EasingDoubleKeyFrame KeyTime="00:00:00" Value="0.25" />
                                            <EasingDoubleKeyFrame KeyTime="00:00:00.1000000" Value="0.2" />
                                            <EasingDoubleKeyFrame KeyTime="00:00:00.9000000" Value="0.2" />
                                            <EasingDoubleKeyFrame KeyTime="00:00:01" Value="1" />
                                            <EasingDoubleKeyFrame KeyTime="00:00:01.1000000" Value="0.5" />
                                        </DoubleAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" TargetName="PART_Rect1" TargetProperty="(UIElement.Opacity)">
                                            <EasingDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1" />
                                            <EasingDoubleKeyFrame KeyTime="00:00:00.2000000" Value="0.5" />
                                            <EasingDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0.25" />
                                            <EasingDoubleKeyFrame KeyTime="00:00:00.4000000" Value="0.2" />
                                        </DoubleAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" TargetName="PART_Rect2" TargetProperty="(UIElement.Opacity)">
                                            <EasingDoubleKeyFrame KeyTime="00:00:00.1000000" Value="0.2" />
                                            <EasingDoubleKeyFrame KeyTime="00:00:00.2000000" Value="1" />
                                            <EasingDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0.5" />
                                            <EasingDoubleKeyFrame KeyTime="00:00:00.4000000" Value="0.25" />
                                            <EasingDoubleKeyFrame KeyTime="00:00:00.5000000" Value="0.2" />
                                        </DoubleAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" TargetName="PART_Rect3" TargetProperty="(UIElement.Opacity)">
                                            <EasingDoubleKeyFrame KeyTime="00:00:00.1000000" Value="0.2" />
                                            <EasingDoubleKeyFrame KeyTime="00:00:00.2000000" Value="0.2" />
                                            <EasingDoubleKeyFrame KeyTime="00:00:00.3000000" Value="1" />
                                            <EasingDoubleKeyFrame KeyTime="00:00:00.4000000" Value="0.5" />
                                            <EasingDoubleKeyFrame KeyTime="00:00:00.5000000" Value="0.25" />
                                            <EasingDoubleKeyFrame KeyTime="00:00:00.6000000" Value="0.2" />
                                        </DoubleAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" TargetName="PART_Rect4" TargetProperty="(UIElement.Opacity)">
                                            <EasingDoubleKeyFrame KeyTime="00:00:00.1000000" Value="0.2" />
                                            <EasingDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0.2" />
                                            <EasingDoubleKeyFrame KeyTime="00:00:00.4000000" Value="1" />
                                            <EasingDoubleKeyFrame KeyTime="00:00:00.5000000" Value="0.5" />
                                            <EasingDoubleKeyFrame KeyTime="00:00:00.6000000" Value="0.25" />
                                            <EasingDoubleKeyFrame KeyTime="00:00:00.7000000" Value="0.2" />
                                        </DoubleAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" TargetName="PART_Rect5" TargetProperty="(UIElement.Opacity)">
                                            <EasingDoubleKeyFrame KeyTime="00:00:00.1000000" Value="0.2" />
                                            <EasingDoubleKeyFrame KeyTime="00:00:00.4000000" Value="0.2" />
                                            <EasingDoubleKeyFrame KeyTime="00:00:00.5000000" Value="1" />
                                            <EasingDoubleKeyFrame KeyTime="00:00:00.6000000" Value="0.5" />
                                            <EasingDoubleKeyFrame KeyTime="00:00:00.7000000" Value="0.25" />
                                            <EasingDoubleKeyFrame KeyTime="00:00:00.8000000" Value="0.2" />
                                        </DoubleAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" TargetName="PART_Rect6" TargetProperty="(UIElement.Opacity)">
                                            <EasingDoubleKeyFrame KeyTime="00:00:00.1000000" Value="0.2" />
                                            <EasingDoubleKeyFrame KeyTime="00:00:00.5000000" Value="0.2" />
                                            <EasingDoubleKeyFrame KeyTime="00:00:00.6000000" Value="1" />
                                            <EasingDoubleKeyFrame KeyTime="00:00:00.7000000" Value="0.5" />
                                            <EasingDoubleKeyFrame KeyTime="00:00:00.8000000" Value="0.25" />
                                            <EasingDoubleKeyFrame KeyTime="00:00:00.9000000" Value="0.2" />
                                        </DoubleAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" TargetName="PART_Rect7" TargetProperty="(UIElement.Opacity)">
                                            <EasingDoubleKeyFrame KeyTime="00:00:00.1000000" Value="0.2" />
                                            <EasingDoubleKeyFrame KeyTime="00:00:00.6000000" Value="0.2" />
                                            <EasingDoubleKeyFrame KeyTime="00:00:00.7000000" Value="1" />
                                            <EasingDoubleKeyFrame KeyTime="00:00:00.8000000" Value="0.5" />
                                            <EasingDoubleKeyFrame KeyTime="00:00:00.9000000" Value="0.25" />
                                            <EasingDoubleKeyFrame KeyTime="00:00:01" Value="0.2" />
                                        </DoubleAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" TargetName="PART_Rect8" TargetProperty="(UIElement.Opacity)">
                                            <EasingDoubleKeyFrame KeyTime="00:00:00.1000000" Value="0.2" />
                                            <EasingDoubleKeyFrame KeyTime="00:00:00.7000000" Value="0.2" />
                                            <EasingDoubleKeyFrame KeyTime="00:00:00.8000000" Value="1" />
                                            <EasingDoubleKeyFrame KeyTime="00:00:00.9000000" Value="0.5" />
                                            <EasingDoubleKeyFrame KeyTime="00:00:01" Value="0.25" />
                                            <EasingDoubleKeyFrame KeyTime="00:00:01.1000000" Value="0.2" />
                                        </DoubleAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" TargetName="PART_Rect9" TargetProperty="(UIElement.Opacity)">
                                            <EasingDoubleKeyFrame KeyTime="00:00:00.1000000" Value="0.2" />
                                            <EasingDoubleKeyFrame KeyTime="00:00:00.8000000" Value="0.2" />
                                            <EasingDoubleKeyFrame KeyTime="00:00:00.9000000" Value="1" />
                                            <EasingDoubleKeyFrame KeyTime="00:00:01" Value="0.5" />
                                            <EasingDoubleKeyFrame KeyTime="00:00:01.1000000" Value="0.25" />
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </Border.VisualStateGroups>
                        <Canvas Background="Transparent">
                            <Rectangle Name="PART_Rect0" Left="0" Top="2" Width="2" Height="6" Fill="{TemplateBinding Foreground}" Opacity="0.2" RadiusX="1" RadiusY="1" />
                            <Rectangle Name="PART_Rect1" Left="0" Top="2" Width="2" Height="6" Fill="{TemplateBinding Foreground}" Opacity="0.2" RadiusX="1" RadiusY="1" RenderTransformOrigin="0.5,0.5">
                                <Rectangle.RenderTransform>
                                    <TransformGroup>
                                        <ScaleTransform />
                                        <SkewTransform />
                                        <RotateTransform Angle="30" />
                                        <TranslateTransform X="3.7499999999999996" Y="1.00480947161671" />
                                    </TransformGroup>
                                </Rectangle.RenderTransform>
                            </Rectangle>
                            <Rectangle Name="PART_Rect2" Left="0" Top="2" Width="2" Height="6" Fill="{TemplateBinding Foreground}" Opacity="0.2" RadiusX="1" RadiusY="1" RenderTransformOrigin="0.5,0.5" UseLayoutRounding="False">
                                <Rectangle.RenderTransform>
                                    <TransformGroup>
                                        <ScaleTransform />
                                        <SkewTransform />
                                        <RotateTransform Angle="60" />
                                        <TranslateTransform X="6.49519052838329" Y="3.7500000271702154" />
                                    </TransformGroup>
                                </Rectangle.RenderTransform>
                            </Rectangle>
                            <Rectangle Name="PART_Rect3" Left="0" Top="2" Width="2" Height="6" Fill="{TemplateBinding Foreground}" Opacity="0.2" RadiusX="1" RadiusY="1" RenderTransformOrigin="0.5,0.5" UseLayoutRounding="False">
                                <Rectangle.RenderTransform>
                                    <TransformGroup>
                                        <ScaleTransform />
                                        <SkewTransform />
                                        <RotateTransform Angle="90" />
                                        <TranslateTransform X="7.5000000920390741" Y="7.5" />
                                    </TransformGroup>
                                </Rectangle.RenderTransform>
                            </Rectangle>
                            <Rectangle Name="PART_Rect4" Left="0" Top="2" Width="2" Height="6" Fill="{TemplateBinding Foreground}" Opacity="0.2" RadiusX="1" RadiusY="1" RenderTransformOrigin="0.5,0.5" UseLayoutRounding="False">
                                <Rectangle.RenderTransform>
                                    <TransformGroup>
                                        <ScaleTransform />
                                        <SkewTransform />
                                        <RotateTransform Angle="120" />
                                        <TranslateTransform X="6.49519052838329" Y="11.25" />
                                    </TransformGroup>
                                </Rectangle.RenderTransform>
                            </Rectangle>
                            <Rectangle Name="PART_Rect5" Left="0" Top="2" Width="2" Height="6" Fill="{TemplateBinding Foreground}" Opacity="0.2" RadiusX="1" RadiusY="1" RenderTransformOrigin="0.5,0.5" UseLayoutRounding="False">
                                <Rectangle.RenderTransform>
                                    <TransformGroup>
                                        <ScaleTransform />
                                        <SkewTransform />
                                        <RotateTransform Angle="150" />
                                        <TranslateTransform X="3.7500000920390728" Y="13.995190528383292" />
                                    </TransformGroup>
                                </Rectangle.RenderTransform>
                            </Rectangle>
                            <Rectangle Name="PART_Rect6" Left="0" Top="17" Width="2" Height="6" Fill="{TemplateBinding Foreground}" Opacity="0.2" RadiusX="1" RadiusY="1" />
                            <Rectangle Name="PART_Rect7" Left="0" Top="17" Width="2" Height="6" Fill="{TemplateBinding Foreground}" Opacity="0.2" RadiusX="1" RadiusY="1" RenderTransformOrigin="0.5,0.5">
                                <Rectangle.RenderTransform>
                                    <TransformGroup>
                                        <ScaleTransform />
                                        <SkewTransform />
                                        <RotateTransform Angle="30" />
                                        <TranslateTransform X="-3.7499999999999996" Y="-1.00480947161671" />
                                    </TransformGroup>
                                </Rectangle.RenderTransform>
                            </Rectangle>
                            <Rectangle Name="PART_Rect8" Left="0" Top="17" Width="2" Height="6" Fill="{TemplateBinding Foreground}" Opacity="0.2" RadiusX="1" RadiusY="1" RenderTransformOrigin="0.5,0.5" UseLayoutRounding="False">
                                <Rectangle.RenderTransform>
                                    <TransformGroup>
                                        <ScaleTransform />
                                        <SkewTransform />
                                        <RotateTransform Angle="60" />
                                        <TranslateTransform X="-6.49519052838329" Y="-3.7500000271702154" />
                                    </TransformGroup>
                                </Rectangle.RenderTransform>
                            </Rectangle>
                            <Rectangle Name="PART_Rect9" Left="0" Top="17" Width="2" Height="6" Fill="{TemplateBinding Foreground}" Opacity="0.2" RadiusX="1" RadiusY="1" RenderTransformOrigin="0.5,0.5" UseLayoutRounding="False">
                                <Rectangle.RenderTransform>
                                    <TransformGroup>
                                        <ScaleTransform />
                                        <SkewTransform />
                                        <RotateTransform Angle="90" />
                                        <TranslateTransform X="-7.5000000920390741" Y="-7.5" />
                                    </TransformGroup>
                                </Rectangle.RenderTransform>
                            </Rectangle>
                            <Rectangle Name="PART_Rect10" Left="0" Top="17" Width="2" Height="6" Fill="{TemplateBinding Foreground}" Opacity="0.2" RadiusX="1" RadiusY="1" RenderTransformOrigin="0.5,0.5" UseLayoutRounding="False">
                                <Rectangle.RenderTransform>
                                    <TransformGroup>
                                        <ScaleTransform />
                                        <SkewTransform />
                                        <RotateTransform Angle="120" />
                                        <TranslateTransform X="-6.49519052838329" Y="-11.25" />
                                    </TransformGroup>
                                </Rectangle.RenderTransform>
                            </Rectangle>
                            <Rectangle Name="PART_Rect11" Left="0" Top="17" Width="2" Height="6" Fill="{TemplateBinding Foreground}" Opacity="0.2" RadiusX="1" RadiusY="1" RenderTransformOrigin="0.5,0.5" UseLayoutRounding="False">
                                <Rectangle.RenderTransform>
                                    <TransformGroup>
                                        <ScaleTransform />
                                        <SkewTransform />
                                        <RotateTransform Angle="150" />
                                        <TranslateTransform X="-3.7500000920390728" Y="-13.995190528383292" />
                                    </TransformGroup>
                                </Rectangle.RenderTransform>
                            </Rectangle>
                        </Canvas>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="LoadingIndicatorGridsStyle" TargetType="{x:Type hc:LoadingIndicator}">
        <Setter Property="Foreground" Value="{DynamicResource PrimaryBrush}" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="Height" Value="40" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type hc:LoadingIndicator}">
                    <Border Name="PART_Border" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}">
                        <Border.VisualStateGroups>
                            <VisualStateGroup x:Name="ActiveStates">
                                <VisualState x:Name="Inactive">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames TargetProperty="(UIElement.Visibility)">
                                            <DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Collapsed}" />
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Active">
                                    <Storyboard SpeedRatio="{TemplateBinding SpeedRatio}" RepeatBehavior="Forever" Duration="0:0:1.2">
                                        <DoubleAnimationUsingKeyFrames TargetName="R1S" TargetProperty="ScaleX" BeginTime="0">
                                            <SplineDoubleKeyFrame KeyTime="00:00:00" Value="0" />
                                            <SplineDoubleKeyFrame KeyTime="00:00:0.2" Value="1" />
                                            <SplineDoubleKeyFrame KeyTime="00:00:0.4" Value="0" />
                                            <SplineDoubleKeyFrame KeyTime="00:00:0.8" Value="0" />
                                            <SplineDoubleKeyFrame KeyTime="00:00:1" Value="0" />
                                            <SplineDoubleKeyFrame KeyTime="00:00:1.2" Value="0" />
                                        </DoubleAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames TargetName="R1S" TargetProperty="ScaleY" BeginTime="0">
                                            <SplineDoubleKeyFrame KeyTime="00:00:00" Value="0" />
                                            <SplineDoubleKeyFrame KeyTime="00:00:0.2" Value="1" />
                                            <SplineDoubleKeyFrame KeyTime="00:00:0.4" Value="0" />
                                            <SplineDoubleKeyFrame KeyTime="00:00:0.8" Value="0" />
                                            <SplineDoubleKeyFrame KeyTime="00:00:1" Value="0" />
                                            <SplineDoubleKeyFrame KeyTime="00:00:1.2" Value="0" />
                                        </DoubleAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames TargetName="R2S" TargetProperty="ScaleX" BeginTime="0">
                                            <SplineDoubleKeyFrame KeyTime="00:00:00" Value="0" />
                                            <SplineDoubleKeyFrame KeyTime="00:00:0.2" Value="1" />
                                            <SplineDoubleKeyFrame KeyTime="00:00:0.4" Value="0.6" />
                                            <SplineDoubleKeyFrame KeyTime="00:00:0.8" Value="0" />
                                            <SplineDoubleKeyFrame KeyTime="00:00:1" Value="0" />
                                            <SplineDoubleKeyFrame KeyTime="00:00:1.2" Value="0" />
                                        </DoubleAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames TargetName="R2S" TargetProperty="ScaleY" BeginTime="0">
                                            <SplineDoubleKeyFrame KeyTime="00:00:00" Value="0" />
                                            <SplineDoubleKeyFrame KeyTime="00:00:0.2" Value="1" />
                                            <SplineDoubleKeyFrame KeyTime="00:00:0.4" Value="0.6" />
                                            <SplineDoubleKeyFrame KeyTime="00:00:0.8" Value="0" />
                                            <SplineDoubleKeyFrame KeyTime="00:00:1" Value="0" />
                                            <SplineDoubleKeyFrame KeyTime="00:00:1.2" Value="0" />
                                        </DoubleAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames TargetName="R3S" TargetProperty="ScaleX" BeginTime="0">
                                            <SplineDoubleKeyFrame KeyTime="00:00:00" Value="0" />
                                            <SplineDoubleKeyFrame KeyTime="00:00:0.2" Value="1" />
                                            <SplineDoubleKeyFrame KeyTime="00:00:0.4" Value="1" />
                                            <SplineDoubleKeyFrame KeyTime="00:00:0.8" Value="0.6" />
                                            <SplineDoubleKeyFrame KeyTime="00:00:1" Value="0" />
                                            <SplineDoubleKeyFrame KeyTime="00:00:1.2" Value="0" />
                                        </DoubleAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames TargetName="R3S" TargetProperty="ScaleY" BeginTime="0">
                                            <SplineDoubleKeyFrame KeyTime="00:00:00" Value="0" />
                                            <SplineDoubleKeyFrame KeyTime="00:00:0.2" Value="1" />
                                            <SplineDoubleKeyFrame KeyTime="00:00:0.4" Value="1" />
                                            <SplineDoubleKeyFrame KeyTime="00:00:0.8" Value="0.6" />
                                            <SplineDoubleKeyFrame KeyTime="00:00:1" Value="0" />
                                            <SplineDoubleKeyFrame KeyTime="00:00:1.2" Value="0" />
                                        </DoubleAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames TargetName="R4S" TargetProperty="ScaleX" BeginTime="0">
                                            <SplineDoubleKeyFrame KeyTime="00:00:00" Value="0" />
                                            <SplineDoubleKeyFrame KeyTime="00:00:0.2" Value="1" />
                                            <SplineDoubleKeyFrame KeyTime="00:00:0.4" Value="0.6" />
                                            <SplineDoubleKeyFrame KeyTime="00:00:0.8" Value="0" />
                                            <SplineDoubleKeyFrame KeyTime="00:00:1" Value="0" />
                                            <SplineDoubleKeyFrame KeyTime="00:00:1.2" Value="0" />
                                        </DoubleAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames TargetName="R4S" TargetProperty="ScaleY" BeginTime="0">
                                            <SplineDoubleKeyFrame KeyTime="00:00:00" Value="0" />
                                            <SplineDoubleKeyFrame KeyTime="00:00:0.2" Value="1" />
                                            <SplineDoubleKeyFrame KeyTime="00:00:0.4" Value="0.6" />
                                            <SplineDoubleKeyFrame KeyTime="00:00:0.8" Value="0" />
                                            <SplineDoubleKeyFrame KeyTime="00:00:1" Value="0" />
                                            <SplineDoubleKeyFrame KeyTime="00:00:1.2" Value="0" />
                                        </DoubleAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames TargetName="R5S" TargetProperty="ScaleX" BeginTime="0">
                                            <SplineDoubleKeyFrame KeyTime="00:00:00" Value="0" />
                                            <SplineDoubleKeyFrame KeyTime="00:00:0.2" Value="1" />
                                            <SplineDoubleKeyFrame KeyTime="00:00:0.4" Value="1" />
                                            <SplineDoubleKeyFrame KeyTime="00:00:0.8" Value="0.6" />
                                            <SplineDoubleKeyFrame KeyTime="00:00:1" Value="0" />
                                            <SplineDoubleKeyFrame KeyTime="00:00:1.2" Value="0" />
                                        </DoubleAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames TargetName="R5S" TargetProperty="ScaleY" BeginTime="0">
                                            <SplineDoubleKeyFrame KeyTime="00:00:00" Value="0" />
                                            <SplineDoubleKeyFrame KeyTime="00:00:0.2" Value="1" />
                                            <SplineDoubleKeyFrame KeyTime="00:00:0.4" Value="1" />
                                            <SplineDoubleKeyFrame KeyTime="00:00:0.8" Value="0.6" />
                                            <SplineDoubleKeyFrame KeyTime="00:00:1" Value="0" />
                                            <SplineDoubleKeyFrame KeyTime="00:00:1.2" Value="0" />
                                        </DoubleAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames TargetName="R6S" TargetProperty="ScaleX" BeginTime="0">
                                            <SplineDoubleKeyFrame KeyTime="00:00:00" Value="0" />
                                            <SplineDoubleKeyFrame KeyTime="00:00:0.2" Value="1" />
                                            <SplineDoubleKeyFrame KeyTime="00:00:0.4" Value="1" />
                                            <SplineDoubleKeyFrame KeyTime="00:00:0.8" Value="1" />
                                            <SplineDoubleKeyFrame KeyTime="00:00:1" Value="0.6" />
                                            <SplineDoubleKeyFrame KeyTime="00:00:1.2" Value="0" />
                                        </DoubleAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames TargetName="R6S" TargetProperty="ScaleY" BeginTime="0">
                                            <SplineDoubleKeyFrame KeyTime="00:00:00" Value="0" />
                                            <SplineDoubleKeyFrame KeyTime="00:00:0.2" Value="1" />
                                            <SplineDoubleKeyFrame KeyTime="00:00:0.4" Value="1" />
                                            <SplineDoubleKeyFrame KeyTime="00:00:0.8" Value="1" />
                                            <SplineDoubleKeyFrame KeyTime="00:00:1" Value="0.6" />
                                            <SplineDoubleKeyFrame KeyTime="00:00:1.2" Value="0" />
                                        </DoubleAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames TargetName="R7S" TargetProperty="ScaleX" BeginTime="0">
                                            <SplineDoubleKeyFrame KeyTime="00:00:00" Value="0" />
                                            <SplineDoubleKeyFrame KeyTime="00:00:0.2" Value="1" />
                                            <SplineDoubleKeyFrame KeyTime="00:00:0.4" Value="1" />
                                            <SplineDoubleKeyFrame KeyTime="00:00:0.8" Value="0.6" />
                                            <SplineDoubleKeyFrame KeyTime="00:00:1" Value="0" />
                                            <SplineDoubleKeyFrame KeyTime="00:00:1.2" Value="0" />
                                        </DoubleAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames TargetName="R7S" TargetProperty="ScaleY" BeginTime="0">
                                            <SplineDoubleKeyFrame KeyTime="00:00:00" Value="0" />
                                            <SplineDoubleKeyFrame KeyTime="00:00:0.2" Value="1" />
                                            <SplineDoubleKeyFrame KeyTime="00:00:0.4" Value="1" />
                                            <SplineDoubleKeyFrame KeyTime="00:00:0.8" Value="0.6" />
                                            <SplineDoubleKeyFrame KeyTime="00:00:1" Value="0" />
                                            <SplineDoubleKeyFrame KeyTime="00:00:1.2" Value="0" />
                                        </DoubleAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames TargetName="R8S" TargetProperty="ScaleX" BeginTime="0">
                                            <SplineDoubleKeyFrame KeyTime="00:00:00" Value="0" />
                                            <SplineDoubleKeyFrame KeyTime="00:00:0.2" Value="1" />
                                            <SplineDoubleKeyFrame KeyTime="00:00:0.4" Value="1" />
                                            <SplineDoubleKeyFrame KeyTime="00:00:0.8" Value="1" />
                                            <SplineDoubleKeyFrame KeyTime="00:00:1" Value="1" />
                                            <SplineDoubleKeyFrame KeyTime="00:00:1.2" Value="0" />
                                        </DoubleAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames TargetName="R8S" TargetProperty="ScaleY" BeginTime="0">
                                            <SplineDoubleKeyFrame KeyTime="00:00:00" Value="0" />
                                            <SplineDoubleKeyFrame KeyTime="00:00:0.2" Value="1" />
                                            <SplineDoubleKeyFrame KeyTime="00:00:0.4" Value="1" />
                                            <SplineDoubleKeyFrame KeyTime="00:00:0.8" Value="1" />
                                            <SplineDoubleKeyFrame KeyTime="00:00:1" Value="1" />
                                            <SplineDoubleKeyFrame KeyTime="00:00:1.2" Value="0" />
                                        </DoubleAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames TargetName="R9S" TargetProperty="ScaleX" BeginTime="0">
                                            <SplineDoubleKeyFrame KeyTime="00:00:00" Value="0" />
                                            <SplineDoubleKeyFrame KeyTime="00:00:0.2" Value="1" />
                                            <SplineDoubleKeyFrame KeyTime="00:00:0.4" Value="1" />
                                            <SplineDoubleKeyFrame KeyTime="00:00:0.8" Value="1" />
                                            <SplineDoubleKeyFrame KeyTime="00:00:1" Value="1" />
                                            <SplineDoubleKeyFrame KeyTime="00:00:1.2" Value="1" />
                                        </DoubleAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames TargetName="R9S" TargetProperty="ScaleY" BeginTime="0">
                                            <SplineDoubleKeyFrame KeyTime="00:00:00" Value="0" />
                                            <SplineDoubleKeyFrame KeyTime="00:00:0.2" Value="1" />
                                            <SplineDoubleKeyFrame KeyTime="00:00:0.4" Value="1" />
                                            <SplineDoubleKeyFrame KeyTime="00:00:0.8" Value="1" />
                                            <SplineDoubleKeyFrame KeyTime="00:00:1" Value="1" />
                                            <SplineDoubleKeyFrame KeyTime="00:00:1.2" Value="1" />
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </Border.VisualStateGroups>
                        <Grid HorizontalAlignment="Center" VerticalAlignment="Center" RenderTransformOrigin=".5,.5">
                            <Grid.Resources>
                                <Style Name="RectangleStyle" TargetType="{x:Type Rectangle}">
                                    <Setter Property="Width" Value="10" />
                                    <Setter Property="Height" Value="10" />
                                    <Setter Property="Margin" Value="0.4" />
                                    <Setter Property="UIElement.RenderTransformOrigin" Value=".5,.5" />
                                </Style>
                            </Grid.Resources>
                            <Grid.RowDefinitions>
                                <RowDefinition />
                                <RowDefinition />
                                <RowDefinition />
                            </Grid.RowDefinitions>
                            <WrapPanel Grid.Row="0" Margin="2,2,2,0">
                                <Rectangle Name="R7" Style="{StaticResource RectangleStyle}" Fill="{Binding Foreground , RelativeSource={RelativeSource TemplatedParent}}">
                                    <Rectangle.RenderTransform>
                                        <ScaleTransform x:Name="R7S" CenterX="0" CenterY="0" />
                                    </Rectangle.RenderTransform>
                                </Rectangle>
                                <Rectangle Name="R8" Style="{StaticResource RectangleStyle}" Fill="{Binding Foreground , RelativeSource={RelativeSource TemplatedParent}}">
                                    <Rectangle.RenderTransform>
                                        <ScaleTransform x:Name="R8S" CenterX="0" CenterY="0" />
                                    </Rectangle.RenderTransform>
                                </Rectangle>
                                <Rectangle Name="R9" Style="{StaticResource RectangleStyle}" Fill="{Binding Foreground , RelativeSource={RelativeSource TemplatedParent}}">
                                    <Rectangle.RenderTransform>
                                        <ScaleTransform x:Name="R9S" CenterX="0" CenterY="0" />
                                    </Rectangle.RenderTransform>
                                </Rectangle>
                            </WrapPanel>
                            <WrapPanel Grid.Row="1" Margin="2,0,2,0">
                                <Rectangle Name="R4" Style="{StaticResource RectangleStyle}" Fill="{Binding Foreground , RelativeSource={RelativeSource TemplatedParent}}">
                                    <Rectangle.RenderTransform>
                                        <ScaleTransform x:Name="R4S" CenterX="0" CenterY="0" />
                                    </Rectangle.RenderTransform>
                                </Rectangle>
                                <Rectangle Name="R5" Style="{StaticResource RectangleStyle}" Fill="{Binding Foreground , RelativeSource={RelativeSource TemplatedParent}}">
                                    <Rectangle.RenderTransform>
                                        <ScaleTransform x:Name="R5S" CenterX="0" CenterY="0" />
                                    </Rectangle.RenderTransform>
                                </Rectangle>
                                <Rectangle Name="R6" Style="{StaticResource RectangleStyle}" Fill="{Binding Foreground , RelativeSource={RelativeSource TemplatedParent}}">
                                    <Rectangle.RenderTransform>
                                        <ScaleTransform x:Name="R6S" CenterX="0" CenterY="0" />
                                    </Rectangle.RenderTransform>
                                </Rectangle>
                            </WrapPanel>
                            <WrapPanel Grid.Row="2" Margin="2,0,2,2">
                                <Rectangle Name="R1" Style="{StaticResource RectangleStyle}" Fill="{Binding Foreground , RelativeSource={RelativeSource TemplatedParent}}">
                                    <Rectangle.RenderTransform>
                                        <ScaleTransform x:Name="R1S" CenterX="0" CenterY="0" />
                                    </Rectangle.RenderTransform>
                                </Rectangle>
                                <Rectangle Name="R2" Style="{StaticResource RectangleStyle}" Fill="{Binding Foreground , RelativeSource={RelativeSource TemplatedParent}}">
                                    <Rectangle.RenderTransform>
                                        <ScaleTransform x:Name="R2S" CenterX="0" CenterY="0" />
                                    </Rectangle.RenderTransform>
                                </Rectangle>
                                <Rectangle Name="R3" Style="{StaticResource RectangleStyle}" Fill="{Binding Foreground , RelativeSource={RelativeSource TemplatedParent}}">
                                    <Rectangle.RenderTransform>
                                        <ScaleTransform x:Name="R3S" CenterX="0" CenterY="0" />
                                    </Rectangle.RenderTransform>
                                </Rectangle>
                            </WrapPanel>
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="LoadingIndicatorLinesStyle" TargetType="{x:Type hc:LoadingIndicator}">
        <Setter Property="Foreground" Value="{DynamicResource PrimaryBrush}" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="Height" Value="40" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type hc:LoadingIndicator}">
                    <Border Name="PART_Border" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}">
                        <Border.VisualStateGroups>
                            <VisualStateGroup x:Name="ActiveStates">
                                <VisualState x:Name="Inactive">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames TargetProperty="(UIElement.Visibility)">
                                            <DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Collapsed}" />
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Active">
                                    <Storyboard Duration="0:0:1.2" RepeatBehavior="Forever" SpeedRatio="{TemplateBinding SpeedRatio}" AutoReverse="True">
                                        <DoubleAnimationUsingKeyFrames TargetName="PART_Ellipse1" TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleY)">
                                            <SplineDoubleKeyFrame KeyTime="00:00:00" Value="0.5" />
                                            <SplineDoubleKeyFrame KeyTime="00:00:0.2" Value="1" />
                                            <SplineDoubleKeyFrame KeyTime="00:00:0.4" Value="0.5" />
                                            <SplineDoubleKeyFrame KeyTime="00:00:0.6" Value="0.5" />
                                            <SplineDoubleKeyFrame KeyTime="00:00:0.9" Value="0.5" />
                                            <SplineDoubleKeyFrame KeyTime="00:00:1.2" Value="1" />
                                        </DoubleAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames TargetName="PART_Ellipse2" TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleY)">
                                            <SplineDoubleKeyFrame KeyTime="00:00:00" Value="0.5" />
                                            <SplineDoubleKeyFrame KeyTime="00:00:0.2" Value="0.5" />
                                            <SplineDoubleKeyFrame KeyTime="00:00:0.4" Value="1" />
                                            <SplineDoubleKeyFrame KeyTime="00:00:0.6" Value="0.5" />
                                            <SplineDoubleKeyFrame KeyTime="00:00:0.9" Value="0.5" />
                                            <SplineDoubleKeyFrame KeyTime="00:00:1.2" Value="0.5" />
                                        </DoubleAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames TargetName="PART_Ellipse3" TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleY)">
                                            <SplineDoubleKeyFrame KeyTime="00:00:00" Value="0.5" />
                                            <SplineDoubleKeyFrame KeyTime="00:00:0.2" Value="0.5" />
                                            <SplineDoubleKeyFrame KeyTime="00:00:0.4" Value="0.5" />
                                            <SplineDoubleKeyFrame KeyTime="00:00:0.6" Value="1" />
                                            <SplineDoubleKeyFrame KeyTime="00:00:0.9" Value="0.5" />
                                            <SplineDoubleKeyFrame KeyTime="00:00:1.2" Value="0.5" />
                                        </DoubleAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames TargetName="PART_Ellipse4" TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleY)">
                                            <SplineDoubleKeyFrame KeyTime="00:00:00" Value="0.5" />
                                            <SplineDoubleKeyFrame KeyTime="00:00:0.2" Value="0.5" />
                                            <SplineDoubleKeyFrame KeyTime="00:00:0.4" Value="0.5" />
                                            <SplineDoubleKeyFrame KeyTime="00:00:0.6" Value="0.5" />
                                            <SplineDoubleKeyFrame KeyTime="00:00:0.9" Value="1" />
                                            <SplineDoubleKeyFrame KeyTime="00:00:1.2" Value="0.5" />
                                        </DoubleAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames TargetName="PART_Ellipse5" TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleY)">
                                            <SplineDoubleKeyFrame KeyTime="00:00:00" Value="0.5" />
                                            <SplineDoubleKeyFrame KeyTime="00:00:0.2" Value="0.5" />
                                            <SplineDoubleKeyFrame KeyTime="00:00:0.4" Value="0.5" />
                                            <SplineDoubleKeyFrame KeyTime="00:00:0.6" Value="0.5" />
                                            <SplineDoubleKeyFrame KeyTime="00:00:0.9" Value="0.5" />
                                            <SplineDoubleKeyFrame KeyTime="00:00:1.2" Value="1" />
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </Border.VisualStateGroups>
                        <StackPanel Orientation="Horizontal" HorizontalAlignment="Center">
                            <Rectangle Name="PART_Ellipse1" Height="30" Width="4" Margin="4,0" Fill="{TemplateBinding Foreground}" Opacity="0.5" RenderTransformOrigin="0.5,0.5" RenderTransform="{ScaleTransform ScaleY=.3}" />
                            <Rectangle Name="PART_Ellipse2" Height="30" Width="4" Margin="4,0" Fill="{TemplateBinding Foreground}" Opacity="0.5" RenderTransformOrigin="0.5,0.5" RenderTransform="{ScaleTransform ScaleY=0.3}" />
                            <Rectangle Name="PART_Ellipse3" Height="30" Width="4" Margin="4,0" Fill="{TemplateBinding Foreground}" Opacity="0.5" RenderTransformOrigin="0.5,0.5" RenderTransform="{ScaleTransform ScaleY=0.3}" />
                            <Rectangle Name="PART_Ellipse4" Height="30" Width="4" Margin="4,0" Fill="{TemplateBinding Foreground}" Opacity="0.5" RenderTransformOrigin="0.5,0.5" RenderTransform="{ScaleTransform ScaleY=0.3}" />
                            <Rectangle Name="PART_Ellipse5" Height="30" Width="4" Margin="4,0" Fill="{TemplateBinding Foreground}" Opacity="0.5" RenderTransformOrigin="0.5,0.5" RenderTransform="{ScaleTransform ScaleY=0.3}" />
                        </StackPanel>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="LoadingIndicatorRotateStyle" TargetType="{x:Type hc:LoadingIndicator}">
        <Setter Property="Foreground" Value="{DynamicResource PrimaryBrush}" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="Height" Value="50" />
        <Setter Property="Width" Value="50" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type hc:LoadingIndicator}">
                    <Border Name="PART_Border" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}">
                        <Border.VisualStateGroups>
                            <VisualStateGroup x:Name="ActiveStates">
                                <VisualState x:Name="Inactive">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames TargetProperty="(UIElement.Visibility)">
                                            <DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Collapsed}" />
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Active">
                                    <Storyboard SpeedRatio="{TemplateBinding SpeedRatio}">
                                        <DoubleAnimation TargetName="SpinnerRotate" TargetProperty="(RotateTransform.Angle)" BeginTime="00:00:00" From="0" To="359" Duration="0:0:02" RepeatBehavior="Forever" />
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </Border.VisualStateGroups>
                        <Path Stretch="Fill" Width="{TemplateBinding Width}" Height="{TemplateBinding Height}" Fill="{TemplateBinding Foreground}" RenderTransformOrigin="0.5,0.5" Data="F0 M 512,30,72 C 250,368,30,72 36,864,239,616 30,72,500,736 36,352,273,408 208,896,90,624 421,376,90,624 637,44,90,624 812,544,279,04 812,544,511,488 812,544,561,152 852,992,601,6 902,656,601,6 952,32,601,6 993,28,561,664 993,28,512 993,28,246,272 777,728,30,72 512,30,72 M 512,993,28 C 773,632,993,28 987,136,784,384 993,28,523,264 987,648,750,592 815,104,933,376 602,624,933,376 386,56,933,376 211,456,744,96 211,456,512,512 211,456,462,848 171,008,422,4 121,344,422,4 71,68,422,4 30,72,462,336 30,72,512 30,72,777,728 246,272,993,28 512,993,28 Z">
                            <Path.RenderTransform>
                                <RotateTransform x:Name="SpinnerRotate" Angle="0" />
                            </Path.RenderTransform>
                        </Path>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="CalendarButtonStylePersian" TargetType="{x:Type primitives:CalendarButton}">
        <Setter Property="MinWidth" Value="10" />
        <Setter Property="MinHeight" Value="10" />
        <Setter Property="FontSize" Value="12" />
        <Setter Property="Width" Value="60" />
        <Setter Property="Height" Value="35" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type primitives:CalendarButton}">
                    <ControlTemplate.Triggers>
                        <Trigger Property="UIElement.IsFocused" Value="True">
                            <Setter TargetName="CalendarButtonFocusVisual" Property="Visibility" Value="Visible" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                    <hc:SimplePanel>
                        <hc:SimplePanel.VisualStateGroups>
                            <VisualStateGroup x:Name="SelectionStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition GeneratedDuration="0" />
                                </VisualStateGroup.Transitions>
                                <VisualState x:Name="Unselected" />
                                <VisualState x:Name="Selected">
                                    <Storyboard>
                                        <DoubleAnimation Duration="0:0:.2" To="1" TargetProperty="Opacity" TargetName="SelectedBackground" />
                                        <ColorAnimation Duration="0" To="White" TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)" TargetName="NormalText" />
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="ActiveStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition GeneratedDuration="0" />
                                </VisualStateGroup.Transitions>
                                <VisualState x:Name="Active" />
                                <VisualState x:Name="Inactive">
                                    <Storyboard>
                                        <ColorAnimation Duration="0" To="{DynamicResource ThirdlyTextColor}" TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)" TargetName="NormalText" />
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </hc:SimplePanel.VisualStateGroups>
                        <Rectangle Name="SelectedBackground" Fill="{DynamicResource DangerBrush}" Opacity="0" RadiusY="16" RadiusX="16" />
                        <Rectangle Name="Background" Fill="{TemplateBinding Background}" Opacity="0" RadiusY="16" RadiusX="16" />
                        <ContentPresenter Name="NormalText" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Foreground="{SolidColorBrush Color={DynamicResource PrimaryTextColor}}" />
                        <Rectangle Name="CalendarButtonFocusVisual" IsHitTestVisible="false" RadiusY="16" RadiusX="16" Stroke="{DynamicResource PrimaryBrush}" Visibility="Collapsed" />
                    </hc:SimplePanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="CalendarDayButtonStylePersian" BasedOn="{StaticResource BaseStyle}" TargetType="{x:Type primitives:CalendarDayButton}">
        <Setter Property="MinWidth" Value="10" />
        <Setter Property="MinHeight" Value="10" />
        <Setter Property="Width" Value="32" />
        <Setter Property="Height" Value="32" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="FrameworkElement.FocusVisualStyle">
            <Setter.Value>
                <Style>
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate>
                                <Rectangle Style="{StaticResource RectangleFocusVisualCircular}" />
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type primitives:CalendarDayButton}">
                    <hc:SimplePanel>
                        <hc:SimplePanel.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition GeneratedDuration="0:0:0.1" />
                                </VisualStateGroup.Transitions>
                                <VisualState x:Name="Normal" />
                                <VisualState x:Name="Disabled">
                                    <Storyboard>
                                        <DoubleAnimation Duration="0" To=".35" TargetProperty="Opacity" TargetName="NormalText" />
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="SelectionStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition GeneratedDuration="0" />
                                </VisualStateGroup.Transitions>
                                <VisualState x:Name="Unselected" />
                                <VisualState x:Name="Selected">
                                    <Storyboard>
                                        <DoubleAnimation Duration="0:0:.2" To="1" TargetProperty="Opacity" TargetName="SelectedBackground" />
                                        <ColorAnimation Duration="0" To="White" TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)" TargetName="NormalText" />
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="ActiveStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition GeneratedDuration="0" />
                                </VisualStateGroup.Transitions>
                                <VisualState x:Name="Active" />
                                <VisualState x:Name="Inactive">
                                    <Storyboard>
                                        <ColorAnimation Duration="0" To="{DynamicResource ThirdlyTextColor}" TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)" TargetName="NormalText" />
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="DayStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition GeneratedDuration="0" />
                                </VisualStateGroup.Transitions>
                                <VisualState x:Name="RegularDay" />
                                <VisualState x:Name="Today">
                                    <Storyboard>
                                        <DoubleAnimation Duration="0" To="1" TargetProperty="Opacity" TargetName="TodayBackground" />
                                        <ColorAnimation Duration="0" To="White" TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)" TargetName="NormalText" />
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </hc:SimplePanel.VisualStateGroups>
                        <Rectangle Name="TodayBackground" RadiusX="16" RadiusY="16" Fill="{DynamicResource DangerBrush}" Opacity="0" />
                        <Rectangle Name="SelectedBackground" Fill="{DynamicResource PrimaryBrush}" Opacity="0" RadiusY="16" RadiusX="16" />
                        <ContentPresenter Name="NormalText" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Foreground="{SolidColorBrush Color={DynamicResource PrimaryTextColor}}" />
                    </hc:SimplePanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="{x:Type primitives:CalendarItem}" TargetType="{x:Type primitives:CalendarItem}">
        <Setter Property="Margin" Value="0" />
        <Setter Property="Focusable" Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type primitives:CalendarItem}">
                    <ControlTemplate.Resources>
                        <DataTemplate Name="DayTitleTemplate">
                            <TextBlock Foreground="{DynamicResource PrimaryTextBrush}" TextBlock.FontWeight="Bold" HorizontalAlignment="Center" Margin="0,6,0,6" VerticalAlignment="Center" Text="{Binding}" />
                        </DataTemplate>
                    </ControlTemplate.Resources>
                    <ControlTemplate.Triggers>
                        <DataTrigger Value="Year" Binding="{Binding DisplayMode , RelativeSource={RelativeSource AncestorType=hc:PersianCalendar}}">
                            <Setter TargetName="PART_MonthView" Property="Visibility" Value="Hidden" />
                            <Setter TargetName="PART_YearView" Property="Visibility" Value="Visible" />
                        </DataTrigger>
                        <DataTrigger Value="Decade" Binding="{Binding DisplayMode , RelativeSource={RelativeSource AncestorType=hc:PersianCalendar}}">
                            <Setter TargetName="PART_MonthView" Property="Visibility" Value="Hidden" />
                            <Setter TargetName="PART_YearView" Property="Visibility" Value="Visible" />
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                    <hc:SimplePanel Name="PART_Root">
                        <hc:SimplePanel.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Normal" />
                                <VisualState x:Name="Disabled">
                                    <Storyboard>
                                        <DoubleAnimation Duration="0" To="1" TargetProperty="Opacity" TargetName="PART_DisabledVisual" />
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </hc:SimplePanel.VisualStateGroups>
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition />
                                <ColumnDefinition Width="Auto" />
                            </Grid.ColumnDefinitions>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto" />
                                <RowDefinition Height="*" />
                            </Grid.RowDefinitions>
                            <Border Margin="4" Grid.ColumnSpan="3" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}" Background="{Binding Path=(hc:TitleElement.Background), RelativeSource={RelativeSource TemplatedParent}}" />
                            <Button Name="PART_PreviousButton" Width="50" HorizontalAlignment="Left" Grid.Column="0" Height="50" Padding="16" Focusable="False" Grid.Row="0" Style="{StaticResource ButtonIcon}" Geometry="{StaticResource LeftGeometry}" Foreground="{Binding Path=(hc:TitleElement.Foreground), RelativeSource={RelativeSource TemplatedParent}}" />
                            <Button Name="PART_HeaderButton" Focusable="False" Grid.Column="1" FontSize="20" HorizontalAlignment="Center" Grid.Row="0" Style="{StaticResource ButtonCustom}" Foreground="{Binding Path=(hc:TitleElement.Foreground), RelativeSource={RelativeSource TemplatedParent}}" />
                            <Button Name="PART_NextButton" Width="50" HorizontalAlignment="Right" Height="50" Padding="16" Grid.Column="2" Focusable="False" Grid.Row="0" Style="{StaticResource ButtonIcon}" Geometry="{StaticResource RightGeometry}" Foreground="{Binding Path=(hc:TitleElement.Foreground), RelativeSource={RelativeSource TemplatedParent}}" />
                            <Grid Name="PART_MonthView" Width="240" Height="240" Margin="10,6,10,10" Grid.ColumnSpan="3" Grid.Column="0" HorizontalAlignment="Center" VerticalAlignment="Center" Grid.Row="1" Visibility="Visible">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition />
                                    <ColumnDefinition />
                                    <ColumnDefinition />
                                    <ColumnDefinition />
                                    <ColumnDefinition />
                                    <ColumnDefinition />
                                    <ColumnDefinition />
                                </Grid.ColumnDefinitions>
                                <Grid.RowDefinitions>
                                    <RowDefinition />
                                    <RowDefinition />
                                    <RowDefinition />
                                    <RowDefinition />
                                    <RowDefinition />
                                    <RowDefinition />
                                    <RowDefinition />
                                </Grid.RowDefinitions>
                            </Grid>
                            <Grid Name="PART_YearView" Width="240" Height="240" Margin="10,6,10,10" Grid.ColumnSpan="3" Grid.Column="0" HorizontalAlignment="Center" VerticalAlignment="Center" Grid.Row="1" Visibility="Hidden">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition />
                                    <ColumnDefinition />
                                    <ColumnDefinition />
                                    <ColumnDefinition />
                                </Grid.ColumnDefinitions>
                                <Grid.RowDefinitions>
                                    <RowDefinition />
                                    <RowDefinition />
                                    <RowDefinition />
                                </Grid.RowDefinitions>
                            </Grid>
                        </Grid>
                        <Rectangle Name="PART_DisabledVisual" Visibility="Collapsed" />
                    </hc:SimplePanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="CalendarBaseStylePersian" TargetType="{x:Type hc:PersianCalendar}">
        <Setter Property="Foreground" Value="{DynamicResource PrimaryTextBrush}" />
        <Setter Property="Background" Value="{DynamicResource RegionBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
        <Setter Property="FlowDirection" Value="RightToLeft" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Margin" Value="8 0" />
        <Setter Property="hc:PersianCalendar.CalendarDayButtonStyle" Value="{StaticResource CalendarDayButtonStylePersian}" />
        <Setter Property="hc:PersianCalendar.CalendarButtonStyle" Value="{StaticResource CalendarButtonStylePersian}" />
        <Setter Property="hc:TitleElement.Background" Value="{DynamicResource TitleBrush}" />
        <Setter Property="hc:TitleElement.Foreground" Value="{DynamicResource TextIconBrush}" />
        <Setter Property="hc:BorderElement.CornerRadius" Value="{StaticResource DefaultCornerRadius}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type hc:PersianCalendar}">
                    <hc:SimplePanel Margin="0,4,0,8" HorizontalAlignment="Center" VerticalAlignment="Center">
                        <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Effect="{StaticResource EffectShadow2}" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}" />
                        <primitives:CalendarItem Name="PART_CalendarItem" Margin="{TemplateBinding BorderThickness}" />
                    </hc:SimplePanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="{x:Type hc:PersianCalendar}" TargetType="{x:Type hc:PersianCalendar}" BasedOn="{StaticResource CalendarBaseStylePersian}" />
    <Style x:Key="PersianCalendarWithClockBaseStyle" TargetType="{x:Type hc:PersianCalendarWithClock}">
        <Setter Property="Focusable" Value="False" />
        <Setter Property="Foreground" Value="{DynamicResource PrimaryTextBrush}" />
        <Setter Property="Background" Value="{DynamicResource RegionBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
        <Setter Property="hc:TitleElement.Background" Value="{DynamicResource TitleBrush}" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Margin" Value="8 0" />
        <Setter Property="hc:BorderElement.CornerRadius" Value="{StaticResource DefaultCornerRadius}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type hc:PersianCalendarWithClock}">
                    <hc:SimplePanel Margin="0,4,0,8" HorizontalAlignment="Center" VerticalAlignment="Center">
                        <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Effect="{StaticResource EffectShadow2}" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}" />
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition Width="Auto" />
                            </Grid.ColumnDefinitions>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto" />
                                <RowDefinition />
                                <RowDefinition Height="Auto" />
                            </Grid.RowDefinitions>
                            <Border Margin="4" Grid.ColumnSpan="2" Height="42" VerticalAlignment="Top" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}" Background="{Binding Path=(hc:TitleElement.Background), RelativeSource={RelativeSource TemplatedParent}}" />
                            <ContentPresenter Name="PART_CalendarPresenter" Grid.Column="0" Grid.Row="0" Grid.RowSpan="2" Margin="-8,-4,-8,-8" />
                            <ContentPresenter Name="PART_ClockPresenter" Grid.Column="1" Grid.Row="0" Grid.RowSpan="2" Margin="-8,-4,-8,-8" />
                            <Button Name="PART_ButtonConfirm" Grid.Row="2" Grid.Column="0" Grid.ColumnSpan="2" HorizontalAlignment="Center" Margin="0,0,0,19" Width="180" VerticalAlignment="Bottom" Style="{StaticResource ButtonPrimary}" Visibility="{TemplateBinding ShowConfirmButton , Converter={StaticResource Boolean2VisibilityConverter}}" Content="{ex:Lang Key={x:Static langs:LangKeys.Confirm}}" />
                        </Grid>
                    </hc:SimplePanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="{x:Type hc:PersianCalendarWithClock}" TargetType="{x:Type hc:PersianCalendarWithClock}" BasedOn="{StaticResource PersianCalendarWithClockBaseStyle}" />
    <Style x:Key="{x:Type hc:PersianDateTimePicker}" BasedOn="{StaticResource DateTimePickerBaseStylePersian}" TargetType="{x:Type hc:PersianDateTimePicker}" />
    <Style x:Key="DateTimePickerExtendPersian" BasedOn="{StaticResource DateTimePickerExtendBaseStylePersian}" TargetType="{x:Type hc:PersianDateTimePicker}" />
    <Style x:Key="DateTimePickerPlusPersian" BasedOn="{StaticResource DateTimePickerPlusBaseStylePersian}" TargetType="{x:Type hc:PersianDateTimePicker}" />
    <Style x:Key="{x:Type hc:SpeedoMeter}" TargetType="{x:Type hc:SpeedoMeter}">
        <Setter Property="Background" Value="{DynamicResource SecondaryRegionBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
        <Setter Property="Height" Value="300" />
        <Setter Property="Width" Value="300" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type hc:SpeedoMeter}">
                    <hc:SimplePanel>
                        <shapes:Arc Name="arc" Stretch="None" StrokeThickness="20" StrokeDashArray=".25" Stroke="{DynamicResource BorderBrush}" Width="{TemplateBinding ActualWidth}" Height="{TemplateBinding ActualHeight}" StartAngle="{Binding Angle , RelativeSource={RelativeSource Mode=TemplatedParent}, Converter={StaticResource Positive2Nagative}}" EndAngle="{Binding Angle , RelativeSource={RelativeSource Mode=TemplatedParent}}" />
                        <shapes:Arc Stretch="None" StrokeThickness="20" StrokeDashArray=".25" Width="{TemplateBinding ActualWidth}" Height="{TemplateBinding ActualHeight}" StartAngle="{Binding Angle , RelativeSource={RelativeSource Mode=TemplatedParent}, Converter={StaticResource Positive2Nagative}}">
                            <shapes:Arc.EndAngle>
                                <MultiBinding Converter="{StaticResource SpeedConverter}">
                                    <Binding Path="Angle" RelativeSource="{RelativeSource Mode=TemplatedParent}" />
                                    <Binding Path="Value" RelativeSource="{RelativeSource Mode=TemplatedParent}" />
                                    <Binding Path="MaximumValue" RelativeSource="{RelativeSource Mode=TemplatedParent}" />
                                </MultiBinding>
                            </shapes:Arc.EndAngle>
                            <shapes:Arc.Style>
                                <Style TargetType="{x:Type shapes:Arc}">
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding StrokeColor , RelativeSource={RelativeSource Mode=TemplatedParent}}" Value="{x:Null}">
                                            <Setter Property="Stroke">
                                                <Setter.Value>
                                                    <MultiBinding Converter="{StaticResource ValueToBrushConverter}">
                                                        <Binding Path="Value" RelativeSource="{RelativeSource Mode=TemplatedParent}" />
                                                        <Binding Path="MaximumValue" RelativeSource="{RelativeSource Mode=TemplatedParent}" />
                                                    </MultiBinding>
                                                </Setter.Value>
                                            </Setter>
                                        </DataTrigger>
                                    </Style.Triggers>
                                    <Setter Property="Stroke" Value="{Binding StrokeColor , RelativeSource={RelativeSource Mode=TemplatedParent}}" />
                                </Style>
                            </shapes:Arc.Style>
                        </shapes:Arc>
                        <StackPanel HorizontalAlignment="Center" VerticalAlignment="Center">
                            <TextBlock HorizontalAlignment="Center" Visibility="{Binding StatusVisibility , RelativeSource={RelativeSource Mode=TemplatedParent}}" Text="{Binding Path=Status, RelativeSource={RelativeSource TemplatedParent}}" TextBlock.FontSize="{Binding StatusFontSize , RelativeSource={RelativeSource Mode=TemplatedParent}}">
                                <TextBlock.Style>
                                    <Style TargetType="{x:Type TextBlock}">
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding StatusColor , RelativeSource={RelativeSource Mode=TemplatedParent}}" Value="{x:Null}">
                                                <Setter Property="Foreground">
                                                    <Setter.Value>
                                                        <MultiBinding Converter="{StaticResource ValueToBrushConverter}">
                                                            <Binding Path="Value" RelativeSource="{RelativeSource Mode=TemplatedParent}" />
                                                            <Binding Path="MaximumValue" RelativeSource="{RelativeSource Mode=TemplatedParent}" />
                                                        </MultiBinding>
                                                    </Setter.Value>
                                                </Setter>
                                            </DataTrigger>
                                        </Style.Triggers>
                                        <Setter Property="Foreground" Value="{Binding StatusColor , RelativeSource={RelativeSource Mode=TemplatedParent}}" />
                                    </Style>
                                </TextBlock.Style>
                            </TextBlock>
                            <TextBlock TextBlock.FontWeight="Bold" HorizontalAlignment="Center" Visibility="{Binding ValueVisibility , RelativeSource={RelativeSource Mode=TemplatedParent}}" TextBlock.FontSize="{Binding ValueFontSize , RelativeSource={RelativeSource Mode=TemplatedParent}}" Text="{Binding Path=Value, RelativeSource={RelativeSource TemplatedParent}}">
                                <TextBlock.Style>
                                    <Style TargetType="{x:Type TextBlock}">
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding ValueColor , RelativeSource={RelativeSource Mode=TemplatedParent}}" Value="{x:Null}">
                                                <Setter Property="Foreground">
                                                    <Setter.Value>
                                                        <MultiBinding Converter="{StaticResource ValueToBrushConverter}">
                                                            <Binding Path="Value" RelativeSource="{RelativeSource Mode=TemplatedParent}" />
                                                            <Binding Path="MaximumValue" RelativeSource="{RelativeSource Mode=TemplatedParent}" />
                                                        </MultiBinding>
                                                    </Setter.Value>
                                                </Setter>
                                            </DataTrigger>
                                        </Style.Triggers>
                                        <Setter Property="Foreground" Value="{Binding ValueColor , RelativeSource={RelativeSource Mode=TemplatedParent}}" />
                                    </Style>
                                </TextBlock.Style>
                            </TextBlock>
                        </StackPanel>
                    </hc:SimplePanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <ControlTemplate x:Key="TipSliderThumbHorizontalTop" TargetType="{x:Type Thumb}">
        <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsMouseOver" Value="True">
                <Setter Value="{StaticResource EffectShadow2}" TargetName="BorderDot" Property="UIElement.Effect" />
                <Setter TargetName="LabelValue" Property="UIElement.Opacity" Value="1" />
            </Trigger>
            <EventTrigger RoutedEvent="PreviewMouseLeftButtonDown">
                <EventTrigger.Actions>
                    <BeginStoryboard>
                        <Storyboard>
                            <ThicknessAnimation To="2" Duration="0:0:.1" TargetName="BorderDot" TargetProperty="BorderThickness" />
                        </Storyboard>
                    </BeginStoryboard>
                </EventTrigger.Actions>
            </EventTrigger>
            <EventTrigger RoutedEvent="PreviewMouseLeftButtonUp">
                <EventTrigger.Actions>
                    <BeginStoryboard>
                        <Storyboard>
                            <ThicknessAnimation To="0" Duration="0:0:.1" TargetName="BorderDot" TargetProperty="BorderThickness" />
                        </Storyboard>
                    </BeginStoryboard>
                </EventTrigger.Actions>
            </EventTrigger>
        </ControlTemplate.Triggers>
        <hc:AxleCanvas>
            <Label Name="LabelValue" IsHitTestVisible="False" Opacity="0" Bottom="28" Style="{StaticResource LabelPrimary}" Content="{Binding Value , RelativeSource={RelativeSource AncestorType=Slider}}" ContentStringFormat="{Binding Path=(hc:TipElement.StringFormat), RelativeSource={RelativeSource AncestorType=Slider}}" />
            <Border Name="BorderDot" Bottom="0" Effect="{StaticResource EffectShadow1}" BorderThickness="0" BorderBrush="{DynamicResource PrimaryBrush}" Width="18" Height="18" Background="White" CornerRadius="9" />
        </hc:AxleCanvas>
    </ControlTemplate>
    <ControlTemplate x:Key="TipSliderThumbHorizontalBottom" TargetType="{x:Type Thumb}">
        <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsMouseOver" Value="True">
                <Setter Value="{StaticResource EffectShadow2}" TargetName="BorderDot" Property="UIElement.Effect" />
                <Setter TargetName="LabelValue" Property="UIElement.Opacity" Value="1" />
            </Trigger>
            <EventTrigger RoutedEvent="PreviewMouseLeftButtonDown">
                <EventTrigger.Actions>
                    <BeginStoryboard>
                        <Storyboard>
                            <ThicknessAnimation To="2" Duration="0:0:.1" TargetName="BorderDot" TargetProperty="BorderThickness" />
                        </Storyboard>
                    </BeginStoryboard>
                </EventTrigger.Actions>
            </EventTrigger>
            <EventTrigger RoutedEvent="PreviewMouseLeftButtonUp">
                <EventTrigger.Actions>
                    <BeginStoryboard>
                        <Storyboard>
                            <ThicknessAnimation To="0" Duration="0:0:.1" TargetName="BorderDot" TargetProperty="BorderThickness" />
                        </Storyboard>
                    </BeginStoryboard>
                </EventTrigger.Actions>
            </EventTrigger>
        </ControlTemplate.Triggers>
        <hc:AxleCanvas>
            <Label Name="LabelValue" IsHitTestVisible="False" Opacity="0" Top="28" Style="{StaticResource LabelPrimary}" Content="{Binding Value , RelativeSource={RelativeSource AncestorType=Slider}}" ContentStringFormat="{Binding Path=(hc:TipElement.StringFormat), RelativeSource={RelativeSource AncestorType=Slider}}" />
            <Border Name="BorderDot" Bottom="0" Effect="{StaticResource EffectShadow1}" BorderThickness="0" BorderBrush="{DynamicResource PrimaryBrush}" Width="18" Height="18" Background="White" CornerRadius="9" />
        </hc:AxleCanvas>
    </ControlTemplate>
    <ControlTemplate x:Key="TipSliderThumbVerticalLeft" TargetType="{x:Type Thumb}">
        <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsMouseOver" Value="True">
                <Setter Value="{StaticResource EffectShadow2}" TargetName="BorderDot" Property="UIElement.Effect" />
                <Setter TargetName="LabelValue" Property="UIElement.Opacity" Value="1" />
            </Trigger>
            <EventTrigger RoutedEvent="PreviewMouseLeftButtonDown">
                <EventTrigger.Actions>
                    <BeginStoryboard>
                        <Storyboard>
                            <ThicknessAnimation To="2" Duration="0:0:.1" TargetName="BorderDot" TargetProperty="BorderThickness" />
                        </Storyboard>
                    </BeginStoryboard>
                </EventTrigger.Actions>
            </EventTrigger>
            <EventTrigger RoutedEvent="PreviewMouseLeftButtonUp">
                <EventTrigger.Actions>
                    <BeginStoryboard>
                        <Storyboard>
                            <ThicknessAnimation To="0" Duration="0:0:.1" TargetName="BorderDot" TargetProperty="BorderThickness" />
                        </Storyboard>
                    </BeginStoryboard>
                </EventTrigger.Actions>
            </EventTrigger>
        </ControlTemplate.Triggers>
        <hc:AxleCanvas Orientation="Vertical">
            <Label Name="LabelValue" IsHitTestVisible="False" Opacity="0" Right="28" Style="{StaticResource LabelPrimary}" Content="{Binding Value , RelativeSource={RelativeSource AncestorType=Slider}}" ContentStringFormat="{Binding Path=(hc:TipElement.StringFormat), RelativeSource={RelativeSource AncestorType=Slider}}" />
            <Border Name="BorderDot" Right="0" Effect="{StaticResource EffectShadow1}" BorderThickness="0" BorderBrush="{DynamicResource PrimaryBrush}" Width="18" Height="18" Background="White" CornerRadius="9" />
        </hc:AxleCanvas>
    </ControlTemplate>
    <ControlTemplate x:Key="TipSliderThumbVerticalRight" TargetType="{x:Type Thumb}">
        <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsMouseOver" Value="True">
                <Setter Value="{StaticResource EffectShadow2}" TargetName="BorderDot" Property="UIElement.Effect" />
                <Setter TargetName="LabelValue" Property="UIElement.Opacity" Value="1" />
            </Trigger>
            <EventTrigger RoutedEvent="PreviewMouseLeftButtonDown">
                <EventTrigger.Actions>
                    <BeginStoryboard>
                        <Storyboard>
                            <ThicknessAnimation To="2" Duration="0:0:.1" TargetName="BorderDot" TargetProperty="BorderThickness" />
                        </Storyboard>
                    </BeginStoryboard>
                </EventTrigger.Actions>
            </EventTrigger>
            <EventTrigger RoutedEvent="PreviewMouseLeftButtonUp">
                <EventTrigger.Actions>
                    <BeginStoryboard>
                        <Storyboard>
                            <ThicknessAnimation To="0" Duration="0:0:.1" TargetName="BorderDot" TargetProperty="BorderThickness" />
                        </Storyboard>
                    </BeginStoryboard>
                </EventTrigger.Actions>
            </EventTrigger>
        </ControlTemplate.Triggers>
        <hc:AxleCanvas Orientation="Vertical">
            <Label Name="LabelValue" IsHitTestVisible="False" Opacity="0" Left="28" Style="{StaticResource LabelPrimary}" Content="{Binding Value , RelativeSource={RelativeSource AncestorType=Slider}}" ContentStringFormat="{Binding Path=(hc:TipElement.StringFormat), RelativeSource={RelativeSource AncestorType=Slider}}" />
            <Border Name="BorderDot" Right="0" Effect="{StaticResource EffectShadow1}" BorderThickness="0" BorderBrush="{DynamicResource PrimaryBrush}" Width="18" Height="18" Background="White" CornerRadius="9" />
        </hc:AxleCanvas>
    </ControlTemplate>
    <ControlTemplate x:Key="SliderHorizontal" TargetType="{x:Type Slider}">
        <ControlTemplate.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="hc:TipElement.Placement" Value="Top" />
                    <Condition Property="hc:TipElement.Visibility" Value="Visible" />
                </MultiTrigger.Conditions>
                <Setter TargetName="Thumb" Value="{StaticResource TipSliderThumbHorizontalTop}" Property="Template" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="hc:TipElement.Placement" Value="Bottom" />
                    <Condition Property="hc:TipElement.Visibility" Value="Visible" />
                </MultiTrigger.Conditions>
                <Setter TargetName="Thumb" Value="{StaticResource TipSliderThumbHorizontalBottom}" Property="Template" />
            </MultiTrigger>
            <Trigger Property="Slider.TickPlacement" Value="TopLeft">
                <Setter TargetName="TopTick" Property="Visibility" Value="Visible" />
            </Trigger>
            <Trigger Property="Slider.TickPlacement" Value="BottomRight">
                <Setter TargetName="BottomTick" Property="Visibility" Value="Visible" />
            </Trigger>
            <Trigger Property="Slider.TickPlacement" Value="Both">
                <Setter TargetName="TopTick" Property="Visibility" Value="Visible" />
                <Setter TargetName="BottomTick" Property="Visibility" Value="Visible" />
            </Trigger>
            <Trigger Property="Slider.IsSelectionRangeEnabled" Value="true">
                <Setter TargetName="Canvas_SelectionRange" Property="Visibility" Value="Visible" />
            </Trigger>
        </ControlTemplate.Triggers>
        <Grid>
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" MinHeight="{TemplateBinding MinHeight}" />
                <RowDefinition Height="Auto" />
            </Grid.RowDefinitions>
            <TickBar Name="TopTick" Fill="{TemplateBinding Foreground}" Height="4" Margin="0,0,0,2" Placement="Top" Grid.Row="0" Visibility="Collapsed" />
            <TickBar Name="BottomTick" Fill="{TemplateBinding Foreground}" Height="4" Margin="0,2,0,0" Placement="Bottom" Grid.Row="2" Visibility="Collapsed" />
            <Border Name="TrackBackground" Background="{TemplateBinding Background}" Grid.Row="1" Height="2" VerticalAlignment="center" Margin="9,0">
                <Canvas Name="Canvas_SelectionRange" Visibility="Hidden">
                    <Rectangle Name="PART_SelectionRange" Fill="{DynamicResource AccentBrush}" Height="2" />
                </Canvas>
            </Border>
            <Track Name="PART_Track" Margin="9,0" Grid.Row="1" DecreaseRepeatButton="{RepeatButton Command={x:Static Slider.DecreaseLarge}, Background={DynamicResource PrimaryBrush}, Style={StaticResource SliderRepeatButtonHorizontalStyle}}" IncreaseRepeatButton="{RepeatButton Command={x:Static Slider.IncreaseLarge}, Style={StaticResource SliderRepeatButtonHorizontalStyle}}" Thumb="{Thumb Name=Thumb, ClipToBounds=False, Width=18, Margin=-9,0, Height=18, Focusable=False, OverridesDefaultStyle=True, Template={StaticResource SliderThumb}, VerticalAlignment=Center}" />
        </Grid>
    </ControlTemplate>
    <ControlTemplate x:Key="SliderVertical" TargetType="{x:Type Slider}">
        <ControlTemplate.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="hc:TipElement.Placement" Value="Left" />
                    <Condition Property="hc:TipElement.Visibility" Value="Visible" />
                </MultiTrigger.Conditions>
                <Setter TargetName="Thumb" Value="{StaticResource TipSliderThumbVerticalLeft}" Property="Template" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="hc:TipElement.Placement" Value="Right" />
                    <Condition Property="hc:TipElement.Visibility" Value="Visible" />
                </MultiTrigger.Conditions>
                <Setter TargetName="Thumb" Value="{StaticResource TipSliderThumbVerticalRight}" Property="Template" />
            </MultiTrigger>
            <Trigger Property="Slider.TickPlacement" Value="TopLeft">
                <Setter TargetName="TopTick" Property="Visibility" Value="Visible" />
            </Trigger>
            <Trigger Property="Slider.TickPlacement" Value="BottomRight">
                <Setter TargetName="BottomTick" Property="Visibility" Value="Visible" />
            </Trigger>
            <Trigger Property="Slider.TickPlacement" Value="Both">
                <Setter TargetName="TopTick" Property="Visibility" Value="Visible" />
                <Setter TargetName="BottomTick" Property="Visibility" Value="Visible" />
            </Trigger>
            <Trigger Property="Slider.IsSelectionRangeEnabled" Value="true">
                <Setter TargetName="Canvas_SelectionRange" Property="Visibility" Value="Visible" />
            </Trigger>
        </ControlTemplate.Triggers>
        <Grid>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition MinWidth="{TemplateBinding MinWidth}" Width="Auto" />
                <ColumnDefinition Width="Auto" />
            </Grid.ColumnDefinitions>
            <TickBar Name="TopTick" Grid.Column="0" Fill="{TemplateBinding Foreground}" Margin="0,0,2,0" Placement="Left" Visibility="Collapsed" Width="4" />
            <TickBar Name="BottomTick" Grid.Column="2" Fill="{TemplateBinding Foreground}" Margin="2,0,0,0" Placement="Right" Visibility="Collapsed" Width="4" />
            <Border Name="TrackBackground" Background="{TemplateBinding Background}" Grid.Column="1" HorizontalAlignment="center" Margin="0,9" Width="2">
                <Canvas Name="Canvas_SelectionRange" Visibility="Hidden">
                    <Rectangle Name="PART_SelectionRange" Fill="{DynamicResource AccentBrush}" Width="2" />
                </Canvas>
            </Border>
            <Track Name="PART_Track" Margin="0,9" Grid.Column="1" DecreaseRepeatButton="{RepeatButton Command={x:Static Slider.DecreaseLarge}, Background={DynamicResource PrimaryBrush}, Style={StaticResource SliderRepeatButtonVerticalStyle}}" IncreaseRepeatButton="{RepeatButton Command={x:Static Slider.IncreaseLarge}, Style={StaticResource SliderRepeatButtonVerticalStyle}}" Thumb="{Thumb Name=Thumb, Margin=0,-9, Focusable=False, Height=18, OverridesDefaultStyle=True, Template={StaticResource SliderThumb}, HorizontalAlignment=Center, Width=18}" />
        </Grid>
    </ControlTemplate>
    <Style x:Key="SliderBaseStyle" BasedOn="{StaticResource BaseStyle}" TargetType="{x:Type Slider}">
        <Style.Triggers>
            <Trigger Property="Slider.Orientation" Value="Vertical">
                <Setter Property="Template" Value="{StaticResource SliderVertical}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="UIElement.Opacity" Value=".4" />
            </Trigger>
        </Style.Triggers>
        <Setter Property="Stylus.IsPressAndHoldEnabled" Value="false" />
        <Setter Property="Background" Value="{DynamicResource SecondaryRegionBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource DarkPrimaryBrush}" />
        <Setter Property="Template" Value="{StaticResource SliderHorizontal}" />
    </Style>
    <ControlTemplate x:Key="TipRangeSliderThumbHorizontalTop" TargetType="{x:Type hc:RangeThumb}">
        <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsMouseOver" Value="True">
                <Setter Value="{StaticResource EffectShadow2}" TargetName="BorderDot" Property="UIElement.Effect" />
                <Setter TargetName="LabelValue" Property="UIElement.Opacity" Value="1" />
            </Trigger>
            <EventTrigger RoutedEvent="PreviewMouseLeftButtonDown">
                <EventTrigger.Actions>
                    <BeginStoryboard>
                        <Storyboard>
                            <ThicknessAnimation To="2" Duration="0:0:.1" TargetName="BorderDot" TargetProperty="BorderThickness" />
                        </Storyboard>
                    </BeginStoryboard>
                </EventTrigger.Actions>
            </EventTrigger>
            <EventTrigger RoutedEvent="PreviewMouseLeftButtonUp">
                <EventTrigger.Actions>
                    <BeginStoryboard>
                        <Storyboard>
                            <ThicknessAnimation To="0" Duration="0:0:.1" TargetName="BorderDot" TargetProperty="BorderThickness" />
                        </Storyboard>
                    </BeginStoryboard>
                </EventTrigger.Actions>
            </EventTrigger>
        </ControlTemplate.Triggers>
        <hc:AxleCanvas>
            <Label Name="LabelValue" IsHitTestVisible="False" Opacity="0" Bottom="28" Style="{StaticResource LabelPrimary}" Content="{TemplateBinding Content}" ContentStringFormat="{Binding Path=(hc:TipElement.StringFormat), RelativeSource={RelativeSource AncestorType=hc:RangeSlider}}" />
            <Border Name="BorderDot" Bottom="0" Effect="{StaticResource EffectShadow1}" BorderThickness="0" BorderBrush="{DynamicResource PrimaryBrush}" Width="18" Height="18" Background="White" CornerRadius="9" />
        </hc:AxleCanvas>
    </ControlTemplate>
    <ControlTemplate x:Key="TipRangeSliderThumbHorizontalBottom" TargetType="{x:Type hc:RangeThumb}">
        <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsMouseOver" Value="True">
                <Setter Value="{StaticResource EffectShadow2}" TargetName="BorderDot" Property="UIElement.Effect" />
                <Setter TargetName="LabelValue" Property="UIElement.Opacity" Value="1" />
            </Trigger>
            <EventTrigger RoutedEvent="PreviewMouseLeftButtonDown">
                <EventTrigger.Actions>
                    <BeginStoryboard>
                        <Storyboard>
                            <ThicknessAnimation To="2" Duration="0:0:.1" TargetName="BorderDot" TargetProperty="BorderThickness" />
                        </Storyboard>
                    </BeginStoryboard>
                </EventTrigger.Actions>
            </EventTrigger>
            <EventTrigger RoutedEvent="PreviewMouseLeftButtonUp">
                <EventTrigger.Actions>
                    <BeginStoryboard>
                        <Storyboard>
                            <ThicknessAnimation To="0" Duration="0:0:.1" TargetName="BorderDot" TargetProperty="BorderThickness" />
                        </Storyboard>
                    </BeginStoryboard>
                </EventTrigger.Actions>
            </EventTrigger>
        </ControlTemplate.Triggers>
        <hc:AxleCanvas>
            <Label Name="LabelValue" IsHitTestVisible="False" Opacity="0" Top="28" Style="{StaticResource LabelPrimary}" Content="{TemplateBinding Content}" ContentStringFormat="{Binding Path=(hc:TipElement.StringFormat), RelativeSource={RelativeSource AncestorType=hc:RangeSlider}}" />
            <Border Name="BorderDot" Bottom="0" Effect="{StaticResource EffectShadow1}" BorderThickness="0" BorderBrush="{DynamicResource PrimaryBrush}" Width="18" Height="18" Background="White" CornerRadius="9" />
        </hc:AxleCanvas>
    </ControlTemplate>
    <ControlTemplate x:Key="TipRangeSliderThumbVerticalLeft" TargetType="{x:Type hc:RangeThumb}">
        <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsMouseOver" Value="True">
                <Setter Value="{StaticResource EffectShadow2}" TargetName="BorderDot" Property="UIElement.Effect" />
                <Setter TargetName="LabelValue" Property="UIElement.Opacity" Value="1" />
            </Trigger>
            <EventTrigger RoutedEvent="PreviewMouseLeftButtonDown">
                <EventTrigger.Actions>
                    <BeginStoryboard>
                        <Storyboard>
                            <ThicknessAnimation To="2" Duration="0:0:.1" TargetName="BorderDot" TargetProperty="BorderThickness" />
                        </Storyboard>
                    </BeginStoryboard>
                </EventTrigger.Actions>
            </EventTrigger>
            <EventTrigger RoutedEvent="PreviewMouseLeftButtonUp">
                <EventTrigger.Actions>
                    <BeginStoryboard>
                        <Storyboard>
                            <ThicknessAnimation To="0" Duration="0:0:.1" TargetName="BorderDot" TargetProperty="BorderThickness" />
                        </Storyboard>
                    </BeginStoryboard>
                </EventTrigger.Actions>
            </EventTrigger>
        </ControlTemplate.Triggers>
        <hc:AxleCanvas Orientation="Vertical">
            <Label Name="LabelValue" IsHitTestVisible="False" Opacity="0" Right="28" Style="{StaticResource LabelPrimary}" Content="{TemplateBinding Content}" ContentStringFormat="{Binding Path=(hc:TipElement.StringFormat), RelativeSource={RelativeSource AncestorType=hc:RangeSlider}}" />
            <Border Name="BorderDot" Right="0" Effect="{StaticResource EffectShadow1}" BorderThickness="0" BorderBrush="{DynamicResource PrimaryBrush}" Width="18" Height="18" Background="White" CornerRadius="9" />
        </hc:AxleCanvas>
    </ControlTemplate>
    <ControlTemplate x:Key="TipRangeSliderThumbVerticalRight" TargetType="{x:Type hc:RangeThumb}">
        <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsMouseOver" Value="True">
                <Setter Value="{StaticResource EffectShadow2}" TargetName="BorderDot" Property="UIElement.Effect" />
                <Setter TargetName="LabelValue" Property="UIElement.Opacity" Value="1" />
            </Trigger>
            <EventTrigger RoutedEvent="PreviewMouseLeftButtonDown">
                <EventTrigger.Actions>
                    <BeginStoryboard>
                        <Storyboard>
                            <ThicknessAnimation To="2" Duration="0:0:.1" TargetName="BorderDot" TargetProperty="BorderThickness" />
                        </Storyboard>
                    </BeginStoryboard>
                </EventTrigger.Actions>
            </EventTrigger>
            <EventTrigger RoutedEvent="PreviewMouseLeftButtonUp">
                <EventTrigger.Actions>
                    <BeginStoryboard>
                        <Storyboard>
                            <ThicknessAnimation To="0" Duration="0:0:.1" TargetName="BorderDot" TargetProperty="BorderThickness" />
                        </Storyboard>
                    </BeginStoryboard>
                </EventTrigger.Actions>
            </EventTrigger>
        </ControlTemplate.Triggers>
        <hc:AxleCanvas Orientation="Vertical">
            <Label Name="LabelValue" IsHitTestVisible="False" Opacity="0" Left="28" Style="{StaticResource LabelPrimary}" Content="{TemplateBinding Content}" ContentStringFormat="{Binding Path=(hc:TipElement.StringFormat), RelativeSource={RelativeSource AncestorType=hc:RangeSlider}}" />
            <Border Name="BorderDot" Right="0" Effect="{StaticResource EffectShadow1}" BorderThickness="0" BorderBrush="{DynamicResource PrimaryBrush}" Width="18" Height="18" Background="White" CornerRadius="9" />
        </hc:AxleCanvas>
    </ControlTemplate>
    <ControlTemplate x:Key="RangeSliderHorizontal" TargetType="{x:Type hc:RangeSlider}">
        <ControlTemplate.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="hc:TipElement.Placement" Value="Top" />
                    <Condition Property="hc:TipElement.Visibility" Value="Visible" />
                </MultiTrigger.Conditions>
                <Setter TargetName="ThumbStart" Value="{StaticResource TipRangeSliderThumbHorizontalTop}" Property="Template" />
                <Setter TargetName="ThumbEnd" Value="{StaticResource TipRangeSliderThumbHorizontalTop}" Property="Template" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="hc:TipElement.Placement" Value="Bottom" />
                    <Condition Property="hc:TipElement.Visibility" Value="Visible" />
                </MultiTrigger.Conditions>
                <Setter TargetName="ThumbStart" Value="{StaticResource TipRangeSliderThumbHorizontalBottom}" Property="Template" />
                <Setter TargetName="ThumbEnd" Value="{StaticResource TipRangeSliderThumbHorizontalBottom}" Property="Template" />
            </MultiTrigger>
            <Trigger Property="hc:RangeSlider.TickPlacement" Value="TopLeft">
                <Setter TargetName="TopTick" Property="Visibility" Value="Visible" />
            </Trigger>
            <Trigger Property="hc:RangeSlider.TickPlacement" Value="BottomRight">
                <Setter TargetName="BottomTick" Property="Visibility" Value="Visible" />
            </Trigger>
            <Trigger Property="hc:RangeSlider.TickPlacement" Value="Both">
                <Setter TargetName="TopTick" Property="Visibility" Value="Visible" />
                <Setter TargetName="BottomTick" Property="Visibility" Value="Visible" />
            </Trigger>
        </ControlTemplate.Triggers>
        <Grid>
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" MinHeight="{TemplateBinding MinHeight}" />
                <RowDefinition Height="Auto" />
            </Grid.RowDefinitions>
            <TickBar Name="TopTick" Ticks="{TemplateBinding Ticks}" TickFrequency="{TemplateBinding TickFrequency}" Minimum="{TemplateBinding Minimum}" Maximum="{TemplateBinding Maximum}" IsDirectionReversed="{TemplateBinding IsDirectionReversed}" Fill="{TemplateBinding Foreground}" Height="4" Margin="0,0,0,2" Placement="Top" Grid.Row="0" Visibility="Collapsed" Width="{Binding ActualWidth , ElementName=TrackBackground}" />
            <TickBar Name="BottomTick" Ticks="{TemplateBinding Ticks}" TickFrequency="{TemplateBinding TickFrequency}" Minimum="{TemplateBinding Minimum}" Maximum="{TemplateBinding Maximum}" IsDirectionReversed="{TemplateBinding IsDirectionReversed}" Fill="{TemplateBinding Foreground}" Height="4" Margin="0,2,0,0" Placement="Bottom" Grid.Row="2" Visibility="Collapsed" Width="{Binding ActualWidth , ElementName=TrackBackground}" />
            <Border Name="TrackBackground" Background="{TemplateBinding Background}" Margin="9,0" Grid.Row="1" Height="2" VerticalAlignment="center" />
            <hc:RangeTrack Name="PART_Track" IsDirectionReversed="{TemplateBinding IsDirectionReversed}" Orientation="{TemplateBinding Orientation}" ValueStart="{TemplateBinding ValueStart}" ValueEnd="{TemplateBinding ValueEnd}" Minimum="{TemplateBinding Minimum}" Maximum="{TemplateBinding Maximum}" Margin="9,0" Grid.Row="1" DecreaseRepeatButton="{RepeatButton Interval={TemplateBinding Interval}, Delay={TemplateBinding Delay}, Command={x:Static hc:RangeSlider.DecreaseLarge}, Style={StaticResource SliderRepeatButtonHorizontalStyle}}" CenterRepeatButton="{RepeatButton Interval={TemplateBinding Interval}, Delay={TemplateBinding Delay}, Command={x:Static hc:RangeSlider.CenterLarge}, Background={DynamicResource PrimaryBrush}, Style={StaticResource SliderRepeatButtonHorizontalStyle}}" IncreaseRepeatButton="{RepeatButton Interval={TemplateBinding Interval}, Delay={TemplateBinding Delay}, Command={x:Static hc:RangeSlider.IncreaseLarge}, Style={StaticResource SliderRepeatButtonHorizontalStyle}}" ThumbStart="{hc:RangeThumb Name=ThumbStart, Content={TemplateBinding ValueStart}, ClipToBounds=False, Width=18, Margin=-9,0, Height=18, Focusable=False, OverridesDefaultStyle=True, Template={StaticResource RangeSliderThumb}, VerticalAlignment=Center}" ThumbEnd="{hc:RangeThumb Name=ThumbEnd, Content={TemplateBinding ValueEnd}, ClipToBounds=False, Width=18, Margin=-9,0, Height=18, Focusable=False, OverridesDefaultStyle=True, Template={StaticResource RangeSliderThumb}, VerticalAlignment=Center}" />
        </Grid>
    </ControlTemplate>
    <ControlTemplate x:Key="RangeSliderVertical" TargetType="{x:Type hc:RangeSlider}">
        <ControlTemplate.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="hc:TipElement.Placement" Value="Left" />
                    <Condition Property="hc:TipElement.Visibility" Value="Visible" />
                </MultiTrigger.Conditions>
                <Setter TargetName="ThumbStart" Value="{StaticResource TipRangeSliderThumbVerticalLeft}" Property="Template" />
                <Setter TargetName="ThumbEnd" Value="{StaticResource TipRangeSliderThumbVerticalLeft}" Property="Template" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="hc:TipElement.Placement" Value="Right" />
                    <Condition Property="hc:TipElement.Visibility" Value="Visible" />
                </MultiTrigger.Conditions>
                <Setter TargetName="ThumbStart" Value="{StaticResource TipRangeSliderThumbVerticalRight}" Property="Template" />
                <Setter TargetName="ThumbEnd" Value="{StaticResource TipRangeSliderThumbVerticalRight}" Property="Template" />
            </MultiTrigger>
            <Trigger Property="hc:RangeSlider.TickPlacement" Value="TopLeft">
                <Setter TargetName="TopTick" Property="Visibility" Value="Visible" />
            </Trigger>
            <Trigger Property="hc:RangeSlider.TickPlacement" Value="BottomRight">
                <Setter TargetName="BottomTick" Property="Visibility" Value="Visible" />
            </Trigger>
            <Trigger Property="hc:RangeSlider.TickPlacement" Value="Both">
                <Setter TargetName="TopTick" Property="Visibility" Value="Visible" />
                <Setter TargetName="BottomTick" Property="Visibility" Value="Visible" />
            </Trigger>
        </ControlTemplate.Triggers>
        <Grid>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition MinWidth="{TemplateBinding MinWidth}" Width="Auto" />
                <ColumnDefinition Width="Auto" />
            </Grid.ColumnDefinitions>
            <TickBar Name="TopTick" Ticks="{TemplateBinding Ticks}" TickFrequency="{TemplateBinding TickFrequency}" Minimum="{TemplateBinding Minimum}" Maximum="{TemplateBinding Maximum}" IsDirectionReversed="{TemplateBinding IsDirectionReversed}" Grid.Column="0" Fill="{TemplateBinding Foreground}" Margin="0,0,2,0" Placement="Left" Visibility="Collapsed" Width="4" Height="{Binding ActualHeight , ElementName=TrackBackground}" />
            <TickBar Name="BottomTick" Ticks="{TemplateBinding Ticks}" TickFrequency="{TemplateBinding TickFrequency}" Minimum="{TemplateBinding Minimum}" Maximum="{TemplateBinding Maximum}" IsDirectionReversed="{TemplateBinding IsDirectionReversed}" Grid.Column="2" Fill="{TemplateBinding Foreground}" Margin="2,0,0,0" Placement="Right" Visibility="Collapsed" Width="4" Height="{Binding ActualHeight , ElementName=TrackBackground}" />
            <Border Name="TrackBackground" Background="{TemplateBinding Background}" Margin="0,9" Grid.Column="1" HorizontalAlignment="center" Width="2" />
            <hc:RangeTrack Name="PART_Track" IsDirectionReversed="{TemplateBinding IsDirectionReversed}" Orientation="{TemplateBinding Orientation}" ValueStart="{TemplateBinding ValueStart}" ValueEnd="{TemplateBinding ValueEnd}" Minimum="{TemplateBinding Minimum}" Maximum="{TemplateBinding Maximum}" Margin="0,9" Grid.Column="1" DecreaseRepeatButton="{RepeatButton Interval={TemplateBinding Interval}, Delay={TemplateBinding Delay}, Command={x:Static hc:RangeSlider.DecreaseLarge}, Style={StaticResource SliderRepeatButtonVerticalStyle}}" CenterRepeatButton="{RepeatButton Interval={TemplateBinding Interval}, Delay={TemplateBinding Delay}, Command={x:Static hc:RangeSlider.CenterLarge}, Background={DynamicResource PrimaryBrush}, Style={StaticResource SliderRepeatButtonVerticalStyle}}" IncreaseRepeatButton="{RepeatButton Interval={TemplateBinding Interval}, Delay={TemplateBinding Delay}, Command={x:Static hc:RangeSlider.IncreaseLarge}, Style={StaticResource SliderRepeatButtonVerticalStyle}}" ThumbStart="{hc:RangeThumb Name=ThumbStart, Content={TemplateBinding ValueStart}, Margin=0,-9, Focusable=False, Height=18, OverridesDefaultStyle=True, Template={StaticResource RangeSliderThumb}, HorizontalAlignment=Center, Width=18}" ThumbEnd="{hc:RangeThumb Name=ThumbEnd, Content={TemplateBinding ValueEnd}, Margin=0,-9, Focusable=False, Height=18, OverridesDefaultStyle=True, Template={StaticResource RangeSliderThumb}, HorizontalAlignment=Center, Width=18}" />
        </Grid>
    </ControlTemplate>
    <Style x:Key="RangeSliderBaseStyle" BasedOn="{StaticResource BaseStyle}" TargetType="{x:Type hc:RangeSlider}">
        <Style.Triggers>
            <Trigger Property="hc:RangeSlider.Orientation" Value="Vertical">
                <Setter Property="Template" Value="{StaticResource RangeSliderVertical}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="UIElement.Opacity" Value=".4" />
            </Trigger>
        </Style.Triggers>
        <Setter Property="Stylus.IsPressAndHoldEnabled" Value="false" />
        <Setter Property="Background" Value="{DynamicResource SecondaryRegionBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource DarkPrimaryBrush}" />
        <Setter Property="Template" Value="{StaticResource RangeSliderHorizontal}" />
    </Style>
    <Style x:Key="{x:Type hc:RangeSlider}" BasedOn="{StaticResource RangeSliderBaseStyle}" TargetType="{x:Type hc:RangeSlider}" />
    <Style x:Key="{x:Type Slider}" BasedOn="{StaticResource SliderBaseStyle}" TargetType="{x:Type Slider}" />
    <Style x:Key="{x:Type DatePickerTextBox}" TargetType="{x:Type DatePickerTextBox}" BasedOn="{StaticResource DatePickerTextBoxStyle}">
        <Setter Property="FrameworkElement.ContextMenu" Value="{StaticResource TextBoxContextMenu}" />
    </Style>
    <Style x:Key="DatePickerTextBoxStylePersian" TargetType="{x:Type primitives:DatePickerTextBox}">
        <Setter Property="Foreground" Value="{Binding Foreground , RelativeSource={RelativeSource AncestorType=hc:PersianDatePicker}}" />
        <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst" />
        <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
        <Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="TextBoxBase.CaretBrush" Value="{DynamicResource PrimaryTextBrush}" />
        <Setter Property="FrameworkElement.ContextMenu" Value="{StaticResource TextBoxContextMenu}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type primitives:DatePickerTextBox}">
                    <hc:SimplePanel>
                        <TextBlock VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Margin="{TemplateBinding Padding}" Foreground="{DynamicResource ThirdlyTextBrush}" Text="{Binding Path=(hc:InfoElement.Placeholder), RelativeSource={RelativeSource AncestorType=hc:PersianDatePicker}}" Visibility="{TemplateBinding Text , Converter={StaticResource String2VisibilityReConverter}}" />
                        <ScrollViewer Name="PART_ContentHost" Margin="-2,0" Padding="{TemplateBinding Padding}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" />
                    </hc:SimplePanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="DatePickerBaseStylePersian" TargetType="{x:Type hc:PersianDatePicker}">
        <Setter Property="Foreground" Value="{DynamicResource PrimaryTextBrush}" />
        <Setter Property="hc:PersianDatePicker.CalendarStyle" Value="{StaticResource CalendarBaseStylePersian}" />
        <Setter Property="hc:BorderElement.CornerRadius" Value="{StaticResource DefaultCornerRadius}" />
        <Setter Property="hc:PersianDatePicker.IsTodayHighlighted" Value="True" />
        <Setter Property="hc:PersianDatePicker.SelectedDateFormat" Value="Short" />
        <Setter Property="Background" Value="{DynamicResource RegionBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
        <Setter Property="MinHeight" Value="{StaticResource DefaultControlHeight}" />
        <Setter Property="Padding" Value="{StaticResource DefaultInputPadding}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type hc:PersianDatePicker}">
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter TargetName="templateRoot" Property="UIElement.Opacity" Value="0.4" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="UIElement.IsMouseOver" Value="true" />
                                <Condition SourceName="PART_Popup" Property="IsOpen" Value="false" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="templateRoot" Value="{DynamicResource SecondaryBorderBrush}" Property="BorderBrush" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="UIElement.IsMouseOver" Value="true" />
                                <Condition SourceName="PART_Popup" Property="IsOpen" Value="true" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="templateRoot" Value="{DynamicResource PrimaryBrush}" Property="BorderBrush" />
                        </MultiTrigger>
                        <Trigger SourceName="PART_TextBox" Property="UIElement.IsFocused" Value="true">
                            <Setter TargetName="templateRoot" Value="{DynamicResource PrimaryBrush}" Property="BorderBrush" />
                        </Trigger>
                        <Trigger SourceName="PART_Popup" Property="IsOpen" Value="True">
                            <Setter TargetName="templateRoot" Value="{DynamicResource PrimaryBrush}" Property="BorderBrush" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                    <Border Name="templateRoot" BorderBrush="{DynamicResource BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}">
                        <Grid Name="PART_Root" HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*" />
                                <ColumnDefinition Width="30" />
                            </Grid.ColumnDefinitions>
                            <Button Name="PART_Button" Height="{x:Static system:Double.NaN}" Style="{StaticResource ButtonIcon}" Padding="7,6" Geometry="{StaticResource CalendarGeometry}" Grid.Column="1" Focusable="False" Grid.Row="0" Foreground="{Binding BorderBrush , ElementName=templateRoot}" />
                            <primitives:DatePickerTextBox Name="PART_TextBox" Padding="{TemplateBinding Padding}" Grid.Column="0" Focusable="{TemplateBinding Focusable}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" Grid.Row="0" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" Style="{StaticResource DatePickerTextBoxStylePersian}" />
                            <Popup Name="PART_Popup" Grid.Column="0" VerticalOffset="4" PopupAnimation="{StaticResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}" AllowsTransparency="True" Placement="Bottom" StaysOpen="False" PlacementTarget="{Binding ElementName=templateRoot}" />
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <ControlTemplate x:Key="DatePickerExtendTopTemplatePersian" TargetType="{x:Type hc:PersianDatePicker}">
        <ControlTemplate.Triggers>
            <Trigger Property="IsEnabled" Value="false">
                <Setter TargetName="templateRoot" Property="UIElement.Opacity" Value="0.4" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition SourceName="templateRoot" Property="UIElement.IsMouseOver" Value="true" />
                    <Condition SourceName="PART_Popup" Property="IsOpen" Value="false" />
                </MultiTrigger.Conditions>
                <Setter TargetName="templateRoot" Value="{DynamicResource SecondaryBorderBrush}" Property="BorderBrush" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition SourceName="templateRoot" Property="UIElement.IsMouseOver" Value="true" />
                    <Condition SourceName="PART_Popup" Property="IsOpen" Value="true" />
                </MultiTrigger.Conditions>
                <Setter TargetName="templateRoot" Value="{DynamicResource PrimaryBrush}" Property="BorderBrush" />
            </MultiTrigger>
            <Trigger SourceName="PART_TextBox" Property="UIElement.IsFocused" Value="true">
                <Setter TargetName="templateRoot" Value="{DynamicResource PrimaryBrush}" Property="BorderBrush" />
            </Trigger>
            <Trigger SourceName="PART_Popup" Property="IsOpen" Value="True">
                <Setter TargetName="templateRoot" Value="{DynamicResource PrimaryBrush}" Property="BorderBrush" />
            </Trigger>
        </ControlTemplate.Triggers>
        <Grid>
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition MinHeight="{Binding Path=(hc:InfoElement.MinContentHeight), RelativeSource={RelativeSource TemplatedParent}}" Height="{Binding Path=(hc:InfoElement.ContentHeight), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource Double2GridLengthConverter}}" />
            </Grid.RowDefinitions>
            <DockPanel LastChildFill="True" Margin="{TemplateBinding Padding}" Visibility="{Binding Path=(hc:InfoElement.Title), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource String2VisibilityConverter}}" HorizontalAlignment="{Binding Path=(hc:TitleElement.HorizontalAlignment), RelativeSource={RelativeSource TemplatedParent}}">
                <ContentPresenter DockPanel.Dock="Right" Foreground="{DynamicResource DangerBrush}" Margin="4,0,0,0" Content="{Binding Path=(hc:InfoElement.Symbol), RelativeSource={RelativeSource TemplatedParent}}" Visibility="{Binding Path=(hc:InfoElement.Necessary), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource Boolean2VisibilityConverter}}" />
                <TextBlock AutoTooltip="True" TextWrapping="NoWrap" TextTrimming="CharacterEllipsis" Margin="1,0,1,0" Text="{Binding Path=(hc:InfoElement.Title), RelativeSource={RelativeSource TemplatedParent}}" />
            </DockPanel>
            <Border Name="templateRoot" Grid.Row="1" BorderBrush="{DynamicResource BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}">
                <Grid Name="PART_Root" HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="*" />
                        <ColumnDefinition Width="30" />
                    </Grid.ColumnDefinitions>
                    <Button Name="PART_Button" Height="{x:Static system:Double.NaN}" Style="{StaticResource ButtonIcon}" Padding="7,6" Geometry="{StaticResource CalendarGeometry}" Grid.Column="1" Focusable="False" Grid.Row="0" Foreground="{Binding BorderBrush , ElementName=templateRoot}" />
                    <primitives:DatePickerTextBox Name="PART_TextBox" Padding="{TemplateBinding Padding}" Grid.Column="0" Focusable="{TemplateBinding Focusable}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" Grid.Row="0" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" Style="{StaticResource DatePickerTextBoxStylePersian}" />
                    <Popup Name="PART_Popup" Grid.Column="0" VerticalOffset="4" PopupAnimation="{StaticResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}" AllowsTransparency="True" Placement="Bottom" StaysOpen="False" PlacementTarget="{Binding ElementName=templateRoot}" />
                </Grid>
            </Border>
        </Grid>
    </ControlTemplate>
    <ControlTemplate x:Key="DatePickerExtendLeftTemplatePersian" TargetType="{x:Type hc:PersianDatePicker}">
        <ControlTemplate.Triggers>
            <Trigger Property="IsEnabled" Value="false">
                <Setter TargetName="templateRoot" Property="UIElement.Opacity" Value="0.4" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition SourceName="templateRoot" Property="UIElement.IsMouseOver" Value="true" />
                    <Condition SourceName="PART_Popup" Property="IsOpen" Value="false" />
                </MultiTrigger.Conditions>
                <Setter TargetName="templateRoot" Value="{DynamicResource SecondaryBorderBrush}" Property="BorderBrush" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition SourceName="templateRoot" Property="UIElement.IsMouseOver" Value="true" />
                    <Condition SourceName="PART_Popup" Property="IsOpen" Value="true" />
                </MultiTrigger.Conditions>
                <Setter TargetName="templateRoot" Value="{DynamicResource PrimaryBrush}" Property="BorderBrush" />
            </MultiTrigger>
            <Trigger SourceName="PART_TextBox" Property="UIElement.IsFocused" Value="true">
                <Setter TargetName="templateRoot" Value="{DynamicResource PrimaryBrush}" Property="BorderBrush" />
            </Trigger>
            <Trigger SourceName="PART_Popup" Property="IsOpen" Value="True">
                <Setter TargetName="templateRoot" Value="{DynamicResource PrimaryBrush}" Property="BorderBrush" />
            </Trigger>
        </ControlTemplate.Triggers>
        <Grid MinHeight="{Binding Path=(hc:InfoElement.MinContentHeight), RelativeSource={RelativeSource TemplatedParent}}" Height="{Binding Path=(hc:InfoElement.ContentHeight), RelativeSource={RelativeSource TemplatedParent}}">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="{Binding Path=(hc:InfoElement.TitleWidth), RelativeSource={RelativeSource TemplatedParent}}" />
                <ColumnDefinition />
            </Grid.ColumnDefinitions>
            <DockPanel LastChildFill="True" Margin="0,7,6,7" Visibility="{Binding Path=(hc:InfoElement.Title), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource String2VisibilityConverter}}" HorizontalAlignment="{Binding Path=(hc:TitleElement.HorizontalAlignment), RelativeSource={RelativeSource TemplatedParent}}" VerticalAlignment="{Binding Path=(hc:TitleElement.VerticalAlignment), RelativeSource={RelativeSource TemplatedParent}}">
                <ContentPresenter DockPanel.Dock="Right" Foreground="{DynamicResource DangerBrush}" Margin="4,0,0,0" Content="{Binding Path=(hc:InfoElement.Symbol), RelativeSource={RelativeSource TemplatedParent}}" Visibility="{Binding Path=(hc:InfoElement.Necessary), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource Boolean2VisibilityConverter}}" />
                <TextBlock AutoTooltip="True" TextWrapping="NoWrap" TextTrimming="CharacterEllipsis" Text="{Binding Path=(hc:InfoElement.Title), RelativeSource={RelativeSource TemplatedParent}}" />
            </DockPanel>
            <Border Name="templateRoot" Grid.Column="1" BorderBrush="{DynamicResource BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" CornerRadius="{Binding Path=(hc:BorderElement.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}">
                <Grid Name="PART_Root" HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="*" />
                        <ColumnDefinition Width="30" />
                    </Grid.ColumnDefinitions>
                    <Button Name="PART_Button" Height="{x:Static system:Double.NaN}" Style="{StaticResource ButtonIcon}" Padding="7,6" Geometry="{StaticResource CalendarGeometry}" Grid.Column="1" Focusable="False" Grid.Row="0" Foreground="{Binding BorderBrush , ElementName=templateRoot}" />
                    <primitives:DatePickerTextBox Name="PART_TextBox" Padding="{TemplateBinding Padding}" Grid.Column="0" Focusable="{TemplateBinding Focusable}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" Grid.Row="0" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" Style="{StaticResource DatePickerTextBoxStylePersian}" />
                    <Popup Name="PART_Popup" Grid.Column="0" VerticalOffset="4" PopupAnimation="{StaticResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}" AllowsTransparency="True" Placement="Bottom" StaysOpen="False" PlacementTarget="{Binding ElementName=templateRoot}" />
                </Grid>
            </Border>
        </Grid>
    </ControlTemplate>
    <Style x:Key="DatePickerExtendBaseStylePersian" BasedOn="{StaticResource DatePickerBaseStylePersian}" TargetType="{x:Type hc:PersianDatePicker}">
        <Style.Triggers>
            <Trigger Property="hc:TitleElement.TitlePlacement" Value="Left">
                <Setter Property="Template" Value="{StaticResource DatePickerExtendLeftTemplatePersian}" />
                <Setter Property="Width" Value="Auto" />
            </Trigger>
        </Style.Triggers>
        <Setter Property="Height" Value="Auto" />
        <Setter Property="hc:InfoElement.Symbol" Value="●" />
        <Setter Property="hc:InfoElement.ContentHeight" Value="{x:Static system:Double.NaN}" />
        <Setter Property="hc:InfoElement.MinContentHeight" Value="{StaticResource DefaultControlHeight}" />
        <Setter Property="Template" Value="{StaticResource DatePickerExtendTopTemplatePersian}" />
    </Style>
    <Style x:Key="{x:Type hc:PersianDatePicker}" BasedOn="{StaticResource DatePickerBaseStylePersian}" TargetType="{x:Type hc:PersianDatePicker}" />
    <Style x:Key="DatePickerExtendPersian" BasedOn="{StaticResource DatePickerExtendBaseStylePersian}" TargetType="{x:Type hc:PersianDatePicker}" />
</ResourceDictionary>-->